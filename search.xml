<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Dubbo的容错机制和负载均衡]]></title>
      <url>/2017/11/24/cluster&amp;loadbalance/</url>
      <content type="html"><![CDATA[<p>前面介绍dubbo中提到过这两个内容，但我觉得有必要再分出来写一下</p>
<h2 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h2><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>在集群调用失败时，Dubbo提供了多种容错方案，缺省为failover重试。<br>可以自行拓展集群容错策略</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://i.imgur.com/8Ko8h69.png" alt=""></p>
<ul>
<li>Invoker是Provider的一个可调用Service的抽象，Invoker封装了Provider地址及Service接口信息</li>
<li>Directory代表多个Invoker，可以把它看作List<inovker>，但与Invoker不同的是，它的值可能是动态变化的，比如注册中心推送变更</inovker></li>
<li>Cluster将Directory中的多个Invoker伪装成一个Invoker，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个</li>
<li>Router负责从多个Invoker中按路由规则选出子集，比如读写分离，应用隔离等</li>
<li>LoadBalance负责从多个Invoker中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>Failover Cluster</p>
<ul>
<li>失败自动切换，若出现失败，重试其他服务器。可通过retries=”2”来设置重试次数（不含第一次）<br>  <dubbo:reference retries="2"><br>  <dubbo:reference><pre><code>&lt;dubbo:method name=&quot;findFoo&quot; retries=&quot;2&quot; /&gt;
</code></pre>  </dubbo:reference></dubbo:reference></li>
</ul>
</li>
<li><p>Failfast Cluster</p>
<ul>
<li>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录</li>
</ul>
</li>
<li>Failsafe Cluster<ul>
<li>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li>
</ul>
</li>
<li>Failback Cluster<ul>
<li>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li>
</ul>
</li>
<li>Forking Cluster<ul>
<li>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作。但需要浪费更多服务资源。可通过forks=”2” 来设置最大并行数。</li>
</ul>
</li>
<li>Broadcast Cluster<ul>
<li>广播调用所有提供者，逐个调用，任意一台报错则报错，通常用于通知所有提供者更新缓存或日志等本地资源信息。<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3></li>
</ul>
</li>
</ul>
<h4 id="提供方"><a href="#提供方" class="headerlink" title="提供方"></a>提供方</h4><p><code>&lt;dubbo:service cluster=&quot;failsafe&quot; /&gt;</code></p>
<h4 id="消费方"><a href="#消费方" class="headerlink" title="消费方"></a>消费方</h4><p><code>&lt;dubbo:reference cluster=&quot;failsafe&quot; /&gt;</code></p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="机制-1"><a href="#机制-1" class="headerlink" title="机制"></a>机制</h3><p>在集群负载均衡时，Dubbo提供了多种均衡策略，缺省为random随机调用<br>可以自行拓展负载均衡策略</p>
<h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><ul>
<li><p><strong>Random LoadBalance</strong>。随机。按权重设置随机概率</p>
<ul>
<li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重</li>
</ul>
</li>
<li><p><strong>RoundRobin LoadBalance</strong>.轮循,按公约后的权重设置轮循比率</p>
<ul>
<li>存在慢的提供者累计请求的问题，比如：第二台机器很慢，但没挂，当请求遇到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li>
<li>解决办法：结合权重，把第二台的权重设置低一点</li>
</ul>
</li>
<li><p><strong>LeastActive LoadBalance</strong>.最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</p>
<ul>
<li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后技术差会越大。</li>
</ul>
</li>
<li><strong> ConsistentHash LoadBalance</strong>.一致性Hash，相同参数的请求总是发到同一提供者<ul>
<li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其他提供者，不会引起剧烈变动</li>
<li>缺省值对第一个参数Hash，如果要修改，请配置<code>&lt;dubbo:parmeter key=&quot;hash.arguments&quot; value=&quot;0.1&quot;/&gt;</code></li>
<li>缺省用160份虚拟节点，如果要修改，请配置<code>&lt;dubbo:parmeter key=&quot;hash.nodes&quot; value=&quot;320&quot;/&gt;</code><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3>服务端服务级别<br><code>&lt;dubbo:service interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</code></li>
</ul>
</li>
</ul>
<p>客户端级别<br><code>&lt;dubbo:reference interface=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</code></p>
<p>服务端方法级别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;dubbo:service interface=&quot;...&quot;&gt;</div><div class="line">	&lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot; / &gt;</div><div class="line">&lt;/dubbo:service&gt;</div></pre></td></tr></table></figure></p>
<p>客户端方法级别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;dubbo:reference interface=&quot;...&quot;&gt;</div><div class="line">	&lt;dubbo:method name=&quot;...&quot; loadbalance=&quot;roundrobin&quot; /&gt;</div><div class="line">&lt;/dubbo:reference&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[spring]]></title>
      <url>/2017/11/24/Spring/</url>
      <content type="html"><![CDATA[<p>Spring是一个开放源代码的设计层面框架，他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用.</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ol>
<li>一个IOC和AOP架构。</li>
<li>容器</li>
<li>一站式架构</li>
</ol>
<h2 id="Spring的核心"><a href="#Spring的核心" class="headerlink" title="Spring的核心"></a>Spring的核心</h2><h3 id="IOC（控制反转）"><a href="#IOC（控制反转）" class="headerlink" title="IOC（控制反转）"></a>IOC（控制反转）</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>传统的java开发模式，要想用一个对象，我们一般是new一个对象或者通过反射获得一个对象，而用了spring框架之后，spring底层利用工厂模式为我们创建我们所需要的对象，我们不需要自己手动去创建，直接调用spring为我们提供的对象即可。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>如何实例化一个对象</p>
<ol>
<li>使用类构造器`<bean id="bean1" class="cc.misaniy.spring.Bean1"></bean></li>
<li><p>使用静态工厂方法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 调用Bean2Factory的getBean2方法得到bean2</div><div class="line">&lt;bean id=&quot;bean2&quot; class=&quot;cc.misaniy.spring.Bean2Factory factory-method=&quot;getBean2&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用实例化工厂方法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//先创建工厂实例bean3Factory,再通过工厂实例创建目标bean实例</div><div class="line">&lt;bean id=&quot;bean3Factory&quot; class=&quot;cc.misaniy.spring.Bean3Factory&quot; /&gt;</div><div class="line">&lt;bean id=&quot;bean3&quot; factory-bean=&quot;bean3Factory&quot; factory-method=&quot;getBean3&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>当使用spring的时候我们不需要关心通过何种方式实例化一个对象，spring通过控制反转机制（IOC）为我们创建一个对象</p>
</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="https://i.imgur.com/Jj4ZGUs.png" alt=""></p>
<h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><ol>
<li>instantiate bean 对象实例化</li>
<li>properties 封装属性</li>
<li>如果Bean实现BeanNameAware执行setBeanName</li>
<li>如果Bean实现BeanFactoryAware或者ApplicationContextAware设置工厂setBeanFactory或者上下文对象setApplicationContext</li>
<li>如果存在类实现BeanPostProcessor(后处理Bean),执行postProcessBeforeInitialization，BeanPostProcessor接口提供钩子函数,用来动态扩展修改Bean（程序自动调用后处理Bean）</li>
<li>如果Bean实现InitializingBean执行afterPropertiesSet</li>
<li>调用<bean init-method="init"> 执行初始化方法init</bean></li>
<li>如果存在类实现BeanPostProcessor(处理Bean)，执行postProcessAfterInitialization</li>
<li>执行业务处理</li>
<li>如果Bean实现DisposableBean执行destroy</li>
<li>调用<bean destroy-method="customerDestroy">指定销毁方法customerDestroy</bean></li>
</ol>
<h4 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h4><ol>
<li>singleton:当一个bean的作用域为singleton,那么Spring IOC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例</li>
<li>prototype:Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean（）方法）时都会创建一个新的Bean实例。根据经验，对所有有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域</li>
<li>request：在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>
<li>session：在一个HTTP session 中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>
<li>global session：在一个全局的HTTP session 中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>
</ol>
<h4 id="BeanFactory接口和ApplicationContext接口的区别"><a href="#BeanFactory接口和ApplicationContext接口的区别" class="headerlink" title="BeanFactory接口和ApplicationContext接口的区别"></a>BeanFactory接口和ApplicationContext接口的区别</h4><ul>
<li>ApplicationContext 接口继承BeanFactory接口，Spring核心工厂是BeanFactory，BeanFactory采取延迟加载，第一次getBean时才会初始化Bean，ApplicationContext是会在加载配置文件时初始化Bean。</li>
<li>ApplicationContext是对BeanFactory的扩展，它可以进行国际化处理、时间传递和bean自动装配以及各种不同应用层的Context实现。</li>
</ul>
<h2 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Spring使用java bean对象的set方法或者带参数的构造方法为我们在创建所需对象时将其属性自动设置所需要的值的过程就是依赖注入的过程</p>
<h3 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h3><ol>
<li>构造器注入<br> 通过<constructor-arg>元素完成注入</constructor-arg></li>
<li>set方法注入<br> 通过<property>元素完成注入【开发中常用方式】</property></li>
</ol>
<h2 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>在面向对象编程（OOP）思想中，我们将事物纵向抽象成一个个的对象。而在OOP编程思想中，我们将一个个对象某些类型的方面横向抽象成一个切面，对这个切面进行一些如权限验证、事务管理、记录日志等公用操作处理的过程就是面向切面编程。</p>
<h3 id="各种概念"><a href="#各种概念" class="headerlink" title="各种概念"></a>各种概念</h3><p><img src="https://i.imgur.com/glgHlAj.png" alt=""></p>
<ul>
<li>切面(Aspect)<ul>
<li>一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中的一个关于横切关注点的很好的例子。在Spring AOP中，切面可以使用通用类（基于模式的风格）或者在普通类中以@Aspect注解（@AspectJ风格）来实现。</li>
</ul>
</li>
<li>连接点（Joinpoint）<ul>
<li>在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是代表一个方法的执行。通过声明一个org.aspect.lang.JoinPoint类型的参数可以使通知（Advice）的主题部分获得连接点信息。</li>
</ul>
</li>
<li>通知（Advice）<ul>
<li>在切面的某个特定的连接点(Joinpoint)上执行的动作。通知有各种类型，其中包括”around”、”before”、”after”等通知。许多AOP框架，包括Spring，都是以拦截器坐通知模型，并维护一个连接点为中心的拦截器链。</li>
</ul>
</li>
<li>切入点（Pointcut）<ul>
<li>匹配连接点（Jointpoint）的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。</li>
</ul>
</li>
<li>引入（Introduction）<ul>
<li>也被称为内部类型声明（inter-type declaration）。声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用一个引入来使bean实现isModified接口，以便简化缓存机制。</li>
</ul>
</li>
<li>目标对象（Target Object）<ul>
<li>被一个或者多个切面（aspect）所通知(advise)的对象。也有人把它叫做被通知对象（advised）。既然Srping AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。</li>
</ul>
</li>
<li>AOP代理（AOP Proxy）<ul>
<li>AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。注意：Spring2.0最新引入的基于模式（schema-based）风格和@AspectJ注解风格的切面声明，对于使用这些风格的用户来说，代理的创建是透明的。</li>
</ul>
</li>
<li>织入（Weaving）<ul>
<li>把切面（aspect）连接到其他的应用程序类型或者对象上，并创建一个被通知（advised）对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯JAVA AOP 框架一样，在运行时完成织入。</li>
</ul>
</li>
</ul>
<h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>动态代理</p>
<ul>
<li>jdk：默认。面向接口的</li>
<li>cglib：面向实现类的</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="管理事务"><a href="#管理事务" class="headerlink" title="管理事务"></a>管理事务</h4><h5 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h5><ul>
<li>通过编程的方式管理事务</li>
<li>比较灵活，难维护</li>
</ul>
<h5 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h5><ul>
<li><p>将业务代码和事务分离，注解和XML配置</p>
<ul>
<li><p>XML配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&gt;</div><div class="line">	&lt;property name=&quot;configLocation&quot; value=&quot;classpath:hibernate.cfg.xml&quot;/&gt;</div><div class="line">	&lt;property name=&quot;configurationClass&quot; value=&quot;org.hibernate.cfg.AnnotationConfiguration&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;!-- 定义事务管理器（声明式事务） --&gt;</div><div class="line">&lt;bean id=&quot;transactionManger&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;</div><div class="line">	&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;!-- 配置DAO --&gt;</div><div class="line">&lt;bean id=&quot;userDaoTarget&quot; class=&quot;com.blusky.spring.dao.UserDaoImpl&quot;&gt;</div><div class="line">	&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;userDao&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</div><div class="line">	&lt;!-- 配置事务管理 --&gt;</div><div class="line">	&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;</div><div class="line">	&lt;property name=&quot;target&quot; ref=&quot;userDaoTarget&quot;/&gt;</div><div class="line">	&lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.bluesky.spirng.dao.GeneratorDao&quot; /&gt;</div><div class="line">	&lt;!-- 配置事务属性 --&gt;</div><div class="line">	&lt;property name=&quot;transactionAttributes&quot;&gt;</div><div class="line">		&lt;props&gt;</div><div class="line">			&lt;prop key=&quot;*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</div><div class="line">		&lt;props&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>注解</p>
</li>
</ul>
</li>
<li><p>比较灵活，好维护</p>
<h5 id="spring如何管理事务"><a href="#spring如何管理事务" class="headerlink" title="spring如何管理事务"></a>spring如何管理事务</h5></li>
<li><p>事务管理器<br>Spring并不直接管理事务，而是提供了多种事务管理器，他们将事务管理的职责委托给Hibernate或JTA等持久化机制所提供的相关平台框架的事务来实现。</p>
</li>
<li><p>基本的属性<br>  <img src="https://i.imgur.com/OUoyYiZ.png" alt=""></p>
<ul>
<li><p>传播行为：当事务方法被另一个事务方法调用时，必须指定事务应该如何传播</p>
<ul>
<li>Spring定义了7种传播行为</li>
<li>常用的两种传播行为<ol>
<li>SUPPORTS：如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行</li>
<li>REQUIRED：默认的事务传播行为：如果没有事务，就新建一个事务，如果有，就加入当前事务</li>
</ol>
</li>
</ul>
</li>
<li><p>隔离级别：定义了一个事务可能收到其他并发事务影响的程度</p>
<ul>
<li>并发引起的问题<ul>
<li>脏读<ul>
<li>脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时。如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的。</li>
</ul>
</li>
<li>不可重复读<ul>
<li>不可重复读发生在一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据时。这通常是因为另一个并发事务在两次查询期间进行了更新。</li>
</ul>
</li>
<li>幻读<ul>
<li>幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录</li>
</ul>
</li>
<li>不可重复读和幻读的区别<ul>
<li>不可重复读的重点是修改</li>
<li>幻读的重点在于新增或者删除</li>
</ul>
</li>
</ul>
</li>
<li>隔离级别<ul>
<li>9种</li>
<li>一般使用数据库默认的隔离级别就可以</li>
</ul>
</li>
</ul>
</li>
<li>回滚规则<ul>
<li>定义了那些异常会导致事务回滚而哪些不会</li>
<li>默认情况下，事务只有遇到运行期异常时才会回滚，而在遇到检查型异常时不会回滚</li>
<li>可以声明事务在遇到特定的检查型异常时像运行期异常那样回滚。同样，你还可以声明事务遇到特定的异常不回滚，即使这些异常是运行期异常</li>
</ul>
</li>
<li>事务超时<ul>
<li>为了使应用程序很好地运行，事务不能运行太长的时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库资源。事务超时就是事务的一个定时器，在特定时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束。</li>
</ul>
</li>
<li>事务只读<ul>
<li>如果事务值对祸端的数据库进行操作，数据库可以利用事务的只读特性来进行一些特定的优化</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="管理日志"><a href="#管理日志" class="headerlink" title="管理日志"></a>管理日志</h4><ol>
<li><p>自定义一个注解，拦截Controller</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Target(&#123;ElementType.PARAMETER,ElementType.METHOD&#125;)</div><div class="line">@Retention（RetentionPolicy.RUNTIME）</div><div class="line">@Documented</div><div class="line">public @interface SystemControllerLog&#123;</div><div class="line">	String description() default &quot;&quot;;</div><div class="line">&#125;</div><div class="line">package com.annotation;</div><div class="line"></div><div class="line">import java.lang.annotation.*;</div><div class="line"></div><div class="line">// 自定义注解 拦截service</div><div class="line">@Target(&#123;ElementType.PARAMETER,ElementType.METHOD&#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">public @interface SystemServiceLog&#123;</div><div class="line">	String description() default &quot;&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个切点类<br> ···</p>
<pre><code>package com.annotation;    
</code></pre><p> import com.model.Log;<br> import com.model.User;<br> import com.service.LogService;<br> import com.util.DateUtil;<br> import com.util.JSONUtil;<br> import com.util.SpringContextHolder;<br> import com.util.WebConstants;<br> import org.aspectj.lang.JoinPoint;<br> import org.aspectj.lang.annotation.*;<br> import org.slf4j.Logger;<br> import org.slf4j.LoggerFactory;<br> import org.springframework.stereotype.Component;<br> import org.springframework.web.context.request.RequestContextHolder;<br> import org.springframework.web.context.request.ServletRequestAttributes;<br> import javax.annotation.Resource;<br> import javax.servlet.http.HttpServletRequest;<br> import javax.servlet.http.HttpSession;<br> import java.lang.reflect.Method;    </p>
<p> /**  </p>
<ul>
<li>切点类  </li>
<li>@author tiangai  </li>
<li>@since 2014-08-05 Pm 20:35  </li>
<li><p>@version 1.0<br>*/<br>@Aspect<br>@Component<br>public  class SystemLogAspect {<br> //注入Service用于把日志保存数据库<br> @Resource<br>  private LogService logService;<br> //本地异常日志记录对象<br>  private  static  final Logger logger = LoggerFactory.getLogger(SystemLogAspect. class);    </p>
<p> //Service层切点<br> @Pointcut(“@annotation(com.annotation.SystemServiceLog)”)<br>  public  void serviceAspect() {<br> }    </p>
<p> //Controller层切点<br> @Pointcut(“@annotation(com.annotation.SystemControllerLog)”)<br>  public  void controllerAspect() {<br> }    </p>
<p> /**  </p>
<ul>
<li>前置通知 用于拦截Controller层记录用户的操作  </li>
<li></li>
<li><p>@param joinPoint 切点<br>*/<br>@Before(“controllerAspect()”)<br>public  void doBefore(JoinPoint joinPoint) {    </p>
<p> HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();<br> HttpSession session = request.getSession();<br> //读取session中的用户<br> User user = (User) session.getAttribute(WebConstants.CURRENT_USER);<br> //请求的IP<br> String ip = request.getRemoteAddr();<br>  try {    </p>
<pre><code>//*========控制台输出=========*//    
System.out.println(&quot;=====前置通知开始=====&quot;);    
System.out.println(&quot;请求方法:&quot; + (joinPoint.getTarget().getClass().getName() + &quot;.&quot; + joinPoint.getSignature().getName() + &quot;()&quot;));    
System.out.println(&quot;方法描述:&quot; + getControllerMethodDescription(joinPoint));    
System.out.println(&quot;请求人:&quot; + user.getName());    
System.out.println(&quot;请求IP:&quot; + ip);    
//*========数据库日志=========*//    
Log log = SpringContextHolder.getBean(&quot;logxx&quot;);    
log.setDescription(getControllerMethodDescription(joinPoint));    
log.setMethod((joinPoint.getTarget().getClass().getName() + &quot;.&quot; + joinPoint.getSignature().getName() + &quot;()&quot;));    
log.setType(&quot;0&quot;);    
log.setRequestIp(ip);    
log.setExceptionCode( null);    
log.setExceptionDetail( null);    
log.setParams( null);    
log.setCreateBy(user);    
log.setCreateDate(DateUtil.getCurrentDate());    
//保存数据库    
logService.add(log);    
System.out.println(&quot;=====前置通知结束=====&quot;);    
</code></pre><p> }  catch (Exception e) {    </p>
<pre><code>//记录本地异常日志    
logger.error(&quot;==前置通知异常==&quot;);    
logger.error(&quot;异常信息:{}&quot;, e.getMessage());    
</code></pre><p> }<br>}    </p>
<p>/**  </p>
</li>
<li>异常通知 用于拦截service层记录异常日志  </li>
<li></li>
<li>@param joinPoint  </li>
<li><p>@param e<br>*/<br>@AfterThrowing(pointcut = “serviceAspect()”, throwing = “e”)<br>public  void doAfterThrowing(JoinPoint joinPoint, Throwable e) {<br> HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();<br> HttpSession session = request.getSession();<br> //读取session中的用户<br> User user = (User) session.getAttribute(WebConstants.CURRENT_USER);<br> //获取请求ip<br> String ip = request.getRemoteAddr();<br> //获取用户请求方法的参数并序列化为JSON格式字符串<br> String params = “”;<br>  if (joinPoint.getArgs() !=  null &amp;&amp; joinPoint.getArgs().length &gt; 0) {    </p>
<pre><code> for ( int i = 0; i &lt; joinPoint.getArgs().length; i++) {    
    params += JSONUtil.toJsonString(joinPoint.getArgs()[i]) + &quot;;&quot;;    
}    
</code></pre><p> }<br>  try {    </p>
<pre><code>  /*========控制台输出=========*/    
System.out.println(&quot;=====异常通知开始=====&quot;);    
System.out.println(&quot;异常代码:&quot; + e.getClass().getName());    
System.out.println(&quot;异常信息:&quot; + e.getMessage());    
System.out.println(&quot;异常方法:&quot; + (joinPoint.getTarget().getClass().getName() + &quot;.&quot; + joinPoint.getSignature().getName() + &quot;()&quot;));    
System.out.println(&quot;方法描述:&quot; + getServiceMthodDescription(joinPoint));    
System.out.println(&quot;请求人:&quot; + user.getName());    
System.out.println(&quot;请求IP:&quot; + ip);    
System.out.println(&quot;请求参数:&quot; + params);    
   /*==========数据库日志=========*/    
Log log = SpringContextHolder.getBean(&quot;logxx&quot;);    
log.setDescription(getServiceMthodDescription(joinPoint));    
log.setExceptionCode(e.getClass().getName());    
log.setType(&quot;1&quot;);    
log.setExceptionDetail(e.getMessage());    
log.setMethod((joinPoint.getTarget().getClass().getName() + &quot;.&quot; + joinPoint.getSignature().getName() + &quot;()&quot;));    
log.setParams(params);    
log.setCreateBy(user);    
log.setCreateDate(DateUtil.getCurrentDate());    
log.setRequestIp(ip);    
//保存数据库    
logService.add(log);    
System.out.println(&quot;=====异常通知结束=====&quot;);    
</code></pre><p> }  catch (Exception ex) {    </p>
<pre><code>//记录本地异常日志    
logger.error(&quot;==异常通知异常==&quot;);    
logger.error(&quot;异常信息:{}&quot;, ex.getMessage());    
</code></pre><p> }<br>  /<em>==========记录本地异常日志==========</em>/<br> logger.error(“异常方法:{}异常代码:{}异常信息:{}参数:{}”, joinPoint.getTarget().getClass().getName() + joinPoint.getSignature().getName(), e.getClass().getName(), e.getMessage(), params);    </p>
<p>}    </p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code>    /**  
     * 获取注解中对方法的描述信息 用于service层注解  
     *  
     * @param joinPoint 切点  
     * @return 方法描述  
     * @throws Exception  
     */    
     public  static String getServiceMthodDescription(JoinPoint joinPoint)    
             throws Exception {    
        String targetName = joinPoint.getTarget().getClass().getName();    
        String methodName = joinPoint.getSignature().getName();    
        Object[] arguments = joinPoint.getArgs();    
        Class targetClass = Class.forName(targetName);    
        Method[] methods = targetClass.getMethods();    
        String description = &quot;&quot;;    
         for (Method method : methods) {    
             if (method.getName().equals(methodName)) {    
                Class[] clazzs = method.getParameterTypes();    
                 if (clazzs.length == arguments.length) {    
                    description = method.getAnnotation(SystemServiceLog. class).description();    
                     break;    
                }    
            }    
        }    
         return description;    
    }    

    /**  
     * 获取注解中对方法的描述信息 用于Controller层注解  
     *  
     * @param joinPoint 切点  
     * @return 方法描述  
     * @throws Exception  
     */    
     public  static String getControllerMethodDescription(JoinPoint joinPoint)  throws Exception {    
        String targetName = joinPoint.getTarget().getClass().getName();    
        String methodName = joinPoint.getSignature().getName();    
        Object[] arguments = joinPoint.getArgs();    
        Class targetClass = Class.forName(targetName);    
        Method[] methods = targetClass.getMethods();    
        String description = &quot;&quot;;    
         for (Method method : methods) {    
             if (method.getName().equals(methodName)) {    
                Class[] clazzs = method.getParameterTypes();    
                 if (clazzs.length == arguments.length) {    
                    description = method.getAnnotation(SystemControllerLog. class).description();    
                     break;    
                }    
            }    
        }    
         return description;    
    }    
}    
···
</code></pre><ol>
<li>把Controller的代理权交给cglib<code>&lt;aop:aspectj-autoproxy proxy-target-clss=&quot;true&quot; /&gt;</code></li>
<li>在controller里面使用<br> ···<br> @RequestMapping(value=”/delete”)<br> //此处为记录AOP拦截Controller记录用户操作<br> @SystemControllerLog(description=”删除用户”)<pre><code>public String del(Criteria criteria,String id,Model model,HttpSession session)
</code></pre> ···</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 框架集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL主从复制的搭建]]></title>
      <url>/2017/11/17/copymysql/</url>
      <content type="html"><![CDATA[<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="修改MySQL主机上的MySQL的配置文件"><a href="#修改MySQL主机上的MySQL的配置文件" class="headerlink" title="修改MySQL主机上的MySQL的配置文件"></a>修改MySQL主机上的MySQL的配置文件</h3><p>vim/etc/my.cnf</p>
<p>在/etc/my.cnf配置文件的[mysqlID]下添加如下内容：<br><img src="https://i.imgur.com/QSlV7Un.png" alt=""></p>
<h3 id="在MySQL主机上重启MySQL服务"><a href="#在MySQL主机上重启MySQL服务" class="headerlink" title="在MySQL主机上重启MySQL服务"></a>在MySQL主机上重启MySQL服务</h3><p>service mysqlId restart</p>
<h3 id="进入MySQL数据库可以查看刚才配置的server-id"><a href="#进入MySQL数据库可以查看刚才配置的server-id" class="headerlink" title="进入MySQL数据库可以查看刚才配置的server-id"></a>进入MySQL数据库可以查看刚才配置的server-id</h3><p>进入MySQL数据库<br>mysql-uroot-proot<br>查看server_id<br>show variables like ‘server_id’<br><img src="https://i.imgur.com/O4oPSB8.png" alt=""></p>
<p>由于这台是主机，可以查看主机的状态<br>show master status<br><img src="https://i.imgur.com/pEU3XoI.png" alt=""></p>
<h3 id="搜全备机能够进行数据同步"><a href="#搜全备机能够进行数据同步" class="headerlink" title="搜全备机能够进行数据同步"></a>搜全备机能够进行数据同步</h3><p>GRANT REPLICATION SLAVE ON <em>.</em> TO ‘root’@’192.168.1.103’ IDENTIFIED BY’root’;</p>
<h3 id="MySQL备机上，也修改MySQL配置文件并重启，但server-id不能相同"><a href="#MySQL备机上，也修改MySQL配置文件并重启，但server-id不能相同" class="headerlink" title="MySQL备机上，也修改MySQL配置文件并重启，但server_id不能相同"></a>MySQL备机上，也修改MySQL配置文件并重启，但server_id不能相同</h3><h3 id="在备机执行一下SQL语句，表示到主机中去同步数据"><a href="#在备机执行一下SQL语句，表示到主机中去同步数据" class="headerlink" title="在备机执行一下SQL语句，表示到主机中去同步数据"></a>在备机执行一下SQL语句，表示到主机中去同步数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">change master to</div><div class="line">master_host=&apos;192.168.1.103&apos;,</div><div class="line">master_port=3306,</div><div class="line">master_user=&apos;root&apos;,</div><div class="line">master_password=&apos;root&apos;,</div><div class="line">master_log-file=&apos;mysql-bin.000001&apos;,</div><div class="line">master_log_pos=154;</div></pre></td></tr></table></figure>
<p>master_log_file:表示要去同步的log日志，就是我们配置的log-bin，也就是show master status;查看的结果<br>master_log_pos：表示从哪一行开始同步</p>
<h3 id="开启同步"><a href="#开启同步" class="headerlink" title="开启同步"></a>开启同步</h3><p>start slave;<br>可以查看备机的从服务器的状态<br>show slave status\G;<br><img src="https://i.imgur.com/84QDtV9.png" alt=""><br>如果Slave_IO_Running、Slave_SQL_Running都为Yes表示成功<br>其中任何一个为NO都不行</p>
]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库基础小结]]></title>
      <url>/2017/10/31/datebase/</url>
      <content type="html"><![CDATA[<p>数据库是入门Coder的基础。工具用太久，有时候甚至忘了一些基础，小结一下。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul>
<li>AVG</li>
<li>COUNT</li>
<li>MIN</li>
<li>MAX</li>
<li>SUM</li>
<li>GROUP_CONCAT<blockquote>
<p>返回由属于一组的列值连接组合而成的结果</p>
</blockquote>
</li>
</ul>
<h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p><code>From table1 a**inner join** table2 b **on** a.id=b.cid</code></p>
<pre><code>&gt; 亦可写成`From table1 a , table2 b where a.id=b.cid`
&gt; 在连接条件中还有（&gt;、&lt;、&lt;&gt;、&gt;=、&lt;=、！&gt;和!&lt;）
</code></pre><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul>
<li>左外连接<ul>
<li><code>From table1 a **left join** table2 b **on** a.id=b.cid</code><blockquote>
<p>左连接显示左表全部行</p>
</blockquote>
</li>
</ul>
</li>
<li>右外连接<ul>
<li><code>From table1 a **right join** table2 b **on** a.id=b.cid</code><blockquote>
<p>右连接显示右表全部行</p>
</blockquote>
</li>
</ul>
</li>
<li>全连接<ul>
<li><code>From table1 a **full join** table2 b **on** a.id=b.cid</code></li>
</ul>
</li>
</ul>
<h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><p>（CROSS JOIN）也称笛卡尔积：不带WHERE条件子句，它将会返回被连接的两个表的笛卡尔积，返回结果的行数等于两个表行数的乘积,如果带WHERE，返回的是匹配的行数。</p>
<ul>
<li><p>不带Where<br>  <code>From table1 cross join table2</code></p>
<pre><code>&gt;亦可写成`From table1 ,table2`
</code></pre></li>
<li><p>带Where<br>  <code>From table1 a cross **join table2** b where a.id=b.cid</code></p>
<blockquote>
<p>注意：cross join 后加条件只能用where ，不用用on</p>
</blockquote>
</li>
</ul>
<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>连接的表都是同一个表，同样可以由内连接，外连接各种组合<br>    <code>From table1 a ,table1 b where a.id = b.id</code></p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul>
<li>为了给住查询（外部查询）提供数据而首先执行的查询（内部查询）被叫做子查询。也就是说，先执行子查询，根据子查询的结构，再执行主查询</li>
<li>IN、NOT IN、EXIST、NOT EXIST、=、&lt;&gt;</li>
<li><strong>子查询的效率低于连接诶查询</strong></li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务的四个属性"><a href="#事务的四个属性" class="headerlink" title="事务的四个属性"></a>事务的四个属性</h3><ul>
<li>原子性<ul>
<li>事务是由一个或一组相互关联的SQL语句组成，这些语句被认为是一个不可分割的单元</li>
</ul>
</li>
<li>一致性<ul>
<li>对于数据库的修改是一致的，即多个用户查的数据是一样的。一致性主要由mysql的日志机制处理，他记录数据的变化，为事务恢复提供跟踪记录。</li>
</ul>
</li>
<li>隔离性<ul>
<li>每个事务都有自己的空间，和其他发生在系统中的事务隔离开来，而且事务的结果只在他完全被执行时才能看到</li>
</ul>
</li>
<li>持久性<ul>
<li>提交了这个事务之后对数据的修改更新就是永久的。当一个事务完成，数据库的日志已经被更新时，持久性即可发挥其特有的功效，在mysql中，如果系统崩溃或数据戒指被破坏，通过日志，系统能够恢复在重启前进行的最后一次成功更新，可以反应系统崩溃时处于执行过程的事物的变化</li>
</ul>
</li>
</ul>
<h3 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h3><h4 id="READ-UNCOMMITTED-未提交读"><a href="#READ-UNCOMMITTED-未提交读" class="headerlink" title="READ UNCOMMITTED(未提交读)"></a>READ UNCOMMITTED(未提交读)</h4><p>事务A对数据做的修改，即使没有提交，对于事务B来说也是可见的，这种问题叫脏读</p>
<h4 id="READ-COMMITTED（提交读）"><a href="#READ-COMMITTED（提交读）" class="headerlink" title="READ COMMITTED（提交读）"></a>READ COMMITTED（提交读）</h4><p>事务A对数据做的修改，提交之后会对事务B可见。</p>
<pre><code>&gt; 举例：事务B开启时独到数据1，接下来事务A开启，把这个数据改成2，提交，B再次读取这个数据，会独到最新的数据2
</code></pre><h4 id="REPEATABLE-READ-可重复读"><a href="#REPEATABLE-READ-可重复读" class="headerlink" title="REPEATABLE READ(可重复读)"></a>REPEATABLE READ(可重复读)</h4><p>事务A对数据做的修改，提交之后，对于先于事务A开启的事务是不可见的。</p>
<pre><code>&gt; 举例：事务B开启时读到数据1，接下来事务A开启，把这个数据改成2，提交，B再次读取这个数据，仍然独到数据1
</code></pre><h4 id="SERIALIZABLE（可串行化）"><a href="#SERIALIZABLE（可串行化）" class="headerlink" title="SERIALIZABLE（可串行化）"></a>SERIALIZABLE（可串行化）</h4><p>可串行化是最高的隔离级别。这种隔离级别强制要求所有事物串行执行，在这种隔离级别下，读取的每行数据都加锁，会导致大量的锁征用问题，性能最差</p>
<p><img src="https://i.imgur.com/3DF95Aj.png" alt=""></p>
<pre><code>&gt; 随着隔离级别的增高，并发性能也会降低
</code></pre><h3 id="mysql中的事务"><a href="#mysql中的事务" class="headerlink" title="mysql中的事务"></a>mysql中的事务</h3><ul>
<li>事务的实现是基于数据库的存储引擎的。不同的存储引擎对事务的支持成都不一样</li>
<li>mysql支持的存储引擎中支持事务的InnoDB</li>
<li>事务的隔离级别是通过锁实现的，而事务的原子性、一致性和持久性是通过事务日志实现的</li>
<li>事务日志<ul>
<li>redo——<strong>保障了事务的持久性和一致性</strong><ul>
<li>在InnoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志现形”。当事务提交之后，在BUFFER POOL中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态，未完成的事务，可以继续提交，也可以选择回滚，这是基于恢复的策略而定</li>
</ul>
</li>
<li>undo——<strong>保障了事务的原子性</strong><ul>
<li>undo log主要为事务的回滚服务。在事务执行的过程中，除了记录redo log，还会记录一定量的undo log。undo log记录数据在每个操作前的状态，如果事务执行过程中需要回滚，就可以根据undo log进行回滚操作。每个事务的回滚，只会当回滚当前事务做的操作，并不会印象到其他的事务做的操作</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><ul>
<li>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，他们包含着数据表里所有文件的引用指针。可以类比为书的目录，可以加快数据库的查询速度。</li>
<li>索引是创建在数据表对象上的。由表中的一个字段或多个字段生成的键组成，这些键存储在数据结构（B-树或哈希表）中，通过mysql可以快速有效的查找与键值相关联的字段</li>
<li>根据存储类型，分为B型树索引和哈希索引<ul>
<li>InnoDB和MyISAM支持BTREE类型索引，默认</li>
<li>Memoery支持HASH类型的索引</li>
</ul>
</li>
</ul>
<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><p>最基本的索引，没有任何限制。MyIASM中默认的BTREE类型的索引，经常用</p>
<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>与普通索引类是，不同的是：索引的列必须唯一，但允许有<strong>空值</strong></p>
<h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>它是一种特殊的唯一索引，<strong>不允许有空值</strong></p>
<h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><ul>
<li>FULLTEXT索引仅仅可用于MYISAM表</li>
<li>他们可以从CHAR、VARCHAR或TEXT列中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加<blockquote>
<p>注意：大容量的表，使用全文索引虽然速度更快，但是生产全文检索是一个非常消耗时间消耗磁盘空间的做法</p>
</blockquote>
</li>
</ul>
<h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><ul>
<li>所谓多列索引，是指在创建索引的时候，锁关联的字段不是一个字段，而是多个字段。</li>
<li>虽然可以通过所关联的字段进行查询，但是只有查询条件中使用了所关联字段中的第一个字段，多列索引才会被使用</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="什么情况适合创建索引"><a href="#什么情况适合创建索引" class="headerlink" title="什么情况适合创建索引"></a>什么情况适合创建索引</h4><ol>
<li>经常被查询的字段，即在WHERE子句中出现的字段</li>
<li>在分组的字段，即在GROUP BY子句中出现的字段</li>
<li>存在依赖关系的子表和父表之间的联合查询，即主键或外键字段</li>
<li>设置唯一完整性约束的字段</li>
</ol>
<h4 id="什么情况不适合创建索引"><a href="#什么情况不适合创建索引" class="headerlink" title="什么情况不适合创建索引"></a>什么情况不适合创建索引</h4><ol>
<li>在查询中很少使用的字段</li>
<li>拥有许多重复值的字段</li>
</ol>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><ol>
<li>使用or关键字的时候索引失效，要想使用or,又想使用索引，只能将or条件中的每个列都加上索引</li>
<li>对于多列索引，不是使用的第一部分，则不会使用索引</li>
<li>like查询是以%开头</li>
<li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来，否则不使用索引</li>
<li>如果mysql估计使用全表扫描要比使用索引快，则不使用索引</li>
<li>对索引列进行运算导致索引失效(+，-，*，/，！等)</li>
<li>独立的列（对列变量需要计算（聚合运算、类型转换等））</li>
<li>在JOIN操作中（需要从多个数据表提取数据时），MYSQL只在主键和外键的数据类型相同时才能使用索引，否则即使建立了索引也不会使用</li>
<li>不使用NOT IN和&lt;&gt;操作，不会使用索引将进行全表扫描，NOT IN 可以NOT EXISTS代替，ID&lt;&gt;3则可以用id&gt;3 or id &lt; 3来代替</li>
<li>索引不会包含有NULL值的列，只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</li>
</ol>
<h3 id="查看索引和优化索引"><a href="#查看索引和优化索引" class="headerlink" title="查看索引和优化索引"></a>查看索引和优化索引</h3><ul>
<li>查看索引<code>show status like &#39;Handler_read%&#39;</code></li>
<li>优化索引<ul>
<li>索引不会包含有NULL值的列，因此数据库设计时不要让字段的默认值为NULL</li>
<li>使用短索引<blockquote>
<p>例如：如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p>
</blockquote>
</li>
<li>索引列排序<blockquote>
<p>MySQL查询只使用一个索引，因此如果WHERE子句中已经使用了索引的话，那么order by 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引</p>
</blockquote>
</li>
<li>不要在列上进行运算</li>
</ul>
</li>
</ul>
<h2 id="存储过程、存储函数"><a href="#存储过程、存储函数" class="headerlink" title="存储过程、存储函数"></a>存储过程、存储函数</h2><h3 id="什么是"><a href="#什么是" class="headerlink" title="什么是"></a>什么是</h3><ul>
<li>一组预编译的SQL语句集</li>
<li>优点<ol>
<li>只需要一次创建过程，以后在程序中就可以调用该过程任意次</li>
<li>允许更快执行，如果某操作需要执行大量SQL语句或重复执行，存储过程比SQL语句执行的要快</li>
<li>减少网络流量，例如一个需要数百行的SQL代码的操作有一条执行语句完成，不需要在网络中发送数百行代码</li>
<li>更好的安全机制，对于没有权限执行存储过程的用户，也可以授权他们执行存储过程</li>
</ol>
</li>
<li>缺点<ol>
<li>可移植性差，多个类型的数据库</li>
<li>学习成本高</li>
<li>如果存储过程中有复杂运算的话，会增加一些数据库服务端的处理成本，对于集中式数据库可能会导致系统可扩展性问题。</li>
</ol>
</li>
</ul>
<h3 id="如何用"><a href="#如何用" class="headerlink" title="如何用"></a>如何用</h3><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE PROCEDURE Proc()</div><div class="line">BEGIN</div><div class="line">SELECT * tb_person;</div><div class="line">END;</div></pre></td></tr></table></figure>
<h4 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION Query_score(classID INT,studentID INT)</div><div class="line">RETURNS INT RETURN</div><div class="line">(SELECT grade FROM tb_score WHERE cID=classID AND sID=studentID);</div></pre></td></tr></table></figure>
<h4 id="两者之间的区别"><a href="#两者之间的区别" class="headerlink" title="两者之间的区别"></a>两者之间的区别</h4><ol>
<li>存储过程的功能更加复杂，而存储函数的功能针对性更强；</li>
<li>存储过程可以返回参数（通过OUT|INPUT），而函数只能返回单一值或者表对象；</li>
<li>存储过程作为一个独立的部分来执行，而函数可以可以作为查询语句的一部分来调用，由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字之后；</li>
<li>存储过程是通过关键字CALL来调用，作为一个独立的执行部分。而存储函数则可作为SELECT语句的一部分调用，嵌入到SQL语句中；</li>
<li>当存储过程和函数被执行的时候，SQLManager会到procedure cache中去取相应的查询语句，如果在procedure cache里没有相应的查询语句，SQLManager就会对存储过程和函数进行编译。</li>
</ol>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>复杂的数据处理用存储过程，如有些报表处理</li>
<li>多条件多表联合查询，并做分页处理，用存储过程也比较适合</li>
</ol>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h3><ol>
<li>对查询进行优化，尽量避免全表查询，首先考虑在where以及order by 涉及的列上建立索引。</li>
<li>应尽量避免在where子句中字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描</li>
<li>应尽量避免在where子句中使用!=或&lt;&gt;操作符，否则将导致引擎放弃使用索引而进行全表扫描。</li>
<li>应尽量避免在where子句中使用or来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，可以使用union all来代替</li>
<li>in 和not in 也要慎用，否则会导致全表扫描，对连续的数据用between 代替，也可以用exists 代替in</li>
<li>like ‘%a%’这种，索引失效，可以使用全文索引代替</li>
<li>对于多张大数据量（几百条就算）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差</li>
<li>少使用*</li>
<li>日期使用mysql自带的，少使用字符串存储，字符串的比较复杂；IP也使用int类型，不要使用字符串</li>
<li>尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对娇小的字段内搜索效率显然要高些。</li>
</ol>
<h3 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h3><h4 id="主从复制（读写分离）"><a href="#主从复制（读写分离）" class="headerlink" title="主从复制（读写分离）"></a>主从复制（读写分离）</h4><p>使用spring可以实现读写分离<br><img src="https://i.imgur.com/63X8SU0.png" alt=""></p>
<h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><ul>
<li>分表<ul>
<li>垂直分表<blockquote>
<p>将表按照功能模块、关系密切程度划分出来，部署到不同的库上，比如我们会建立定义数据库workDB、商品数据库payDB、用户数据库userDB、日志数据库logDB等，分别用于存储项目数据定义表、商品定义表、用户数据表、日志数据表等</p>
</blockquote>
</li>
<li>水平分表<blockquote>
<p>指定自己的规则：1、求余。2、哈希。3、时间</p>
</blockquote>
</li>
</ul>
</li>
<li>分库<ul>
<li>分库就是把一张表的数据分成N多个区块，这些区块可以在同一个磁盘上，也可以在不同的磁盘上</li>
</ul>
</li>
<li>应用场景<ul>
<li>表太多，海量数据，各项业务划分清除，低耦合的话，用垂直拆分比较号</li>
<li>表不多，单表数据量大的话，选水平拆分比较号</li>
</ul>
</li>
</ul>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="查看mysql支持的存储引擎（SHOW-ENGINES）"><a href="#查看mysql支持的存储引擎（SHOW-ENGINES）" class="headerlink" title="查看mysql支持的存储引擎（SHOW ENGINES）"></a>查看mysql支持的存储引擎（SHOW ENGINES）</h3><p><img src="https://i.imgur.com/YG8qPCU.png" alt=""></p>
<h3 id="myisam和innodb的区别"><a href="#myisam和innodb的区别" class="headerlink" title="myisam和innodb的区别"></a>myisam和innodb的区别</h3><ol>
<li>存储结构<ul>
<li>MyISAM<br>每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，拓展名指出文件类型。.frm文件存储表定义。数据文件的拓展名为.MYD(MYDate)。索引文件的拓展名是.MYI(MYIndex)</li>
<li>InnoDB<br>所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB</li>
</ul>
</li>
<li>存储空间<ul>
<li>MyISAM<br>可被压缩，存储空间较小。支持三种不同的存储格式：静态表（默认，但是主义数据末尾不能有空格，会被去掉）、动态表、压缩表</li>
<li>innoDB<br>需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于告诉缓冲数据和索引</li>
</ul>
</li>
<li>可移植性、备份及恢复<ul>
<li>MyISAM<br>数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个进行操作。</li>
<li>innoDB<br>免费的方案可以是拷贝数据文件、备份binlog，或用mysqldump，在数据量达到几十GB的时候就相对痛苦了。</li>
</ul>
</li>
<li>事务支持<ul>
<li>MyISAM<br>强调的是性能，每次查询具有原子性，其执行速度比InnoDB类型要快，但是不提供事务支持。</li>
<li>innoDB<br>提供事务支持，外部键等高级数据库功能。具有事务（commit），回滚（rollback）和崩溃修复能力（crash recovery capablities）的事务安全（transaction=safe(ACID compliant)）型表</li>
</ul>
</li>
<li>表锁差异<ul>
<li>MyISAM<br>只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据</li>
<li>innoDB<br>支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的性能，但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的</li>
</ul>
</li>
<li>AUTO-INCREMENT<ul>
<li>MyISAM<br>可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。</li>
<li>innoDB<br>InnoDB中必须包含只有该字段的索引。引擎的自动增长列必须是索引。如果是组合索引也必须是组合索引的第一列。</li>
</ul>
</li>
<li>全文索引<ul>
<li>MyISAM<br>支持FULLTEXT类型的全文索引。</li>
<li>innoDB<br>不支持FULLTEXT类型的全文索引，但是innodb可以使用sphinx插件支持全文索引，并且效果更好</li>
</ul>
</li>
<li>表主键<ul>
<li>MyISAM<br>允许没有任何索引和主键的表存在，索引都是保存行的地址。</li>
<li>innoDB<br>如果没有设定主键或空孔唯一索引，就会自动生成一个6字节的主键（用户不可见），数据是主索引的一部分，附加索引保存的是主索引的值。</li>
</ul>
</li>
<li>表的具体行数<ul>
<li>MyISAM<br>保存表的总行数，如果select count(*) from table会直接取出该值</li>
<li>innoDB<br>没有保存表的总行数，如果使用select count(*) from table；会遍历整个表，消耗相当大，但是在加了where条件后，myisam和innodb处理的方式都一样。</li>
</ul>
</li>
<li><p>CRUD操作</p>
<ul>
<li><p>MyISAM<br>如果执行大量的select，MyISAM是更好的选择</p>
</li>
<li><p>innoDB<br>如果你的数据执行大量的insert或update，出于性能方面的考虑，应该使用InnoDB表。DELETE从性能上InnoDB更优，但DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除，在InnoDB上如果要清空保存有大量数据的表，最好使用truncate table这个命令</p>
</li>
</ul>
</li>
<li><p>外键</p>
<ul>
<li>MyISAM<br>不支持</li>
<li>innoDB<br>支持</li>
</ul>
</li>
</ol>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><h3 id="行锁（InnoDB）"><a href="#行锁（InnoDB）" class="headerlink" title="行锁（InnoDB）"></a>行锁（InnoDB）</h3><h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><p>又成为读锁，多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改</p>
<pre><code>&gt; SELECT ... LOCK IN SHARE MODE
</code></pre><h4 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h4><p>又称为写锁。排它锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行数据和修改。排他锁指的是一个事务在一行数据加上排它锁后，其他事务不能再加其他的锁。updata,delete,isnert都会自动给设计到的数据加上排他锁，select语句默认不会加任何锁类型</p>
<pre><code>&gt; SELECT ... FRO UPDATE
</code></pre><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><ul>
<li>乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行就爱南侧，如果发现冲突了，则返回用户错误的信息，让用户决定如何去做</li>
<li>实现方式<ul>
<li>版本（Version）记录机制<br><img src="https://i.imgur.com/kiLI98q.png" alt=""><blockquote>
<p>一般是通过为数据库表增加一个数字类型的”version”字段来实现。当读取数据时，将version字段的值一同独处，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比较。如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据</p>
</blockquote>
</li>
<li>时间戳（timestamp）</li>
</ul>
</li>
</ul>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守状态（悲观），因此，在整个数据处理过程中，将数据处于锁定状态。</p>
<pre><code>&gt; SELECT ... FOR UPDATE 或 LOCK IN SHARE MODE
</code></pre><h2 id="select语句完整的执行顺序"><a href="#select语句完整的执行顺序" class="headerlink" title="select语句完整的执行顺序"></a>select语句完整的执行顺序</h2><p>from → where → group by → having →表达式 → group by → select 输出</p>
]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate]]></title>
      <url>/2017/10/26/hibernate/</url>
      <content type="html"><![CDATA[<p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。</p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><ul>
<li>读取配置Configuration</li>
<li>创建sessionFactory</li>
<li>打开session</li>
<li>开启事务Transaction</li>
<li>进行持久化操作（CRUD）</li>
<li>提交事务</li>
<li>关闭session<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2>延迟加载机制是为了避免一些无谓的性能开销而提出来的。所谓延迟加载就是当在真正需要数据的时候，才真正执行数据加载操作。在Hibernate中提供了对实体对象的延迟加载以及对集合的延迟加载，另外在Hibernate3中还提供了对属性的延迟加载。<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2></li>
</ul>
<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ol>
<li>hibernate支持两个级别的缓存，默认只支持一级缓存</li>
<li>每个session内部自带一个一级缓存</li>
<li>每个Session被关闭时，其对应的一级缓存自动清除<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3>独立于session，默认不开启<h2 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h2>本地SQL查询，Criteria、HQL<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2></li>
</ol>
<h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><p>不纯在持久化标识OID，尚未与Hibernate Session关联对象，被认为处于瞬时态，失去引用将被JVM回收</p>
<h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><p>存在持久化标识OID，与当前session有关联，并且相关联的session没有关闭，并且事务未提交</p>
<h3 id="游离态"><a href="#游离态" class="headerlink" title="游离态"></a>游离态</h3><p>存在持久化标识OID，但没有与当前session关联，游离状态改变hibernate不能检测到</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ol>
<li>使用双向一对多关联，不使用单向一对多</li>
<li>灵活使用单向一对多关联</li>
<li>不用一对多，用多对一取代</li>
<li>配置对象缓存，不使用集合缓存</li>
<li>一对多集合使用Bag,多对多集合使用Set</li>
<li>继承类使用显式多台</li>
<li>表字段要少，表关联不要怕多，有二级缓存撑腰<h2 id="GET和LOAD的区别"><a href="#GET和LOAD的区别" class="headerlink" title="GET和LOAD的区别"></a>GET和LOAD的区别</h2>Session.get方法，查询立即执行，返回Customer类对象<br>Session.load方法，默认采用延迟加载数据方式，不会立即查询，返回Customer类子类对象（动态生成代理对象）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 框架集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis]]></title>
      <url>/2017/10/25/mybatis/</url>
      <content type="html"><![CDATA[<p>MyBatis是一个持久层框架，避免了jdbc代码和手工设置参数以及抽取结果集，可以使用简单的xml或者注解方式来配置映射基本体，将接口和java中的pojo映射成数据库中的记录</p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="https://i.imgur.com/SC7b00G.png" alt=""></p>
<h2 id="和Hibernate的对比"><a href="#和Hibernate的对比" class="headerlink" title="和Hibernate的对比"></a>和Hibernate的对比</h2><ol>
<li>Mybatis和Hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写SQL语句，不过mybatis可以用过XML或注解方式灵活配置要运行的sql语句，并将java对象和SQL语句映射生成最终执行的SQL，最后将SQL执行的结果再映射生成JAVA对象</li>
<li>Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一旦需求变化要求成功输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大</li>
<li>Hibernate对象/关系映射能力强，数据库无关性号，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的缺点是学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。</li>
</ol>
<h2 id="使用MyBatis的mapper接口调用时有哪些要求"><a href="#使用MyBatis的mapper接口调用时有哪些要求" class="headerlink" title="使用MyBatis的mapper接口调用时有哪些要求"></a>使用MyBatis的mapper接口调用时有哪些要求</h2><ol>
<li>Mapper接口方法名和mapper.xml中定义的每个sql的ID相同</li>
<li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType类型相同</li>
<li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType类型相同</li>
<li>Mapper.xml文件中的namespace即是mapper接口的类路径。</li>
</ol>
<h2 id="SqlMapConfig-xml中配置有哪些内容"><a href="#SqlMapConfig-xml中配置有哪些内容" class="headerlink" title="SqlMapConfig.xml中配置有哪些内容"></a>SqlMapConfig.xml中配置有哪些内容</h2><p>SqlMapConfig.xml中配置的内容和顺序如下</p>
<ul>
<li>properties(属性)</li>
<li>settings(配置)</li>
<li>typeAliases(类型别名) </li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（环境集合属性对象）</li>
<li>enviroment（环境子属性对象）</li>
<li>transactionManager(事务管理)</li>
<li>dataSource（数据源）</li>
<li>mappers（映射器）</li>
</ul>
<h2 id="一级缓存和二级缓存"><a href="#一级缓存和二级缓存" class="headerlink" title="一级缓存和二级缓存"></a>一级缓存和二级缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>Mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果又则从缓存取出返回结果就不查数据库。Mybatis内部存储缓存使用一个HashMap。key为hashCode+sqlId+Sql语句。value为查询出来映射生成的java对象。</p>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>Mybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨SqlSession的。</p>
]]></content>
      
        <categories>
            
            <category> 框架集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[springmvc]]></title>
      <url>/2017/10/24/springmvc/</url>
      <content type="html"><![CDATA[<p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架，如Struts1，Struts2等。</p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="https://i.imgur.com/1Slzo09.png" alt=""></p>
<ol>
<li>用户发送请求到前端控制器DispatcherServlet</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器</li>
<li>处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给DispatcherServlet。</li>
<li>DispatcherServlet调用HandlerAdapter处理器适配器</li>
<li>HandlerAdapter经过适配调用具体的处理器（Controller，也叫后端控制器）</li>
<li>Controller执行完成返回ModelAndView</li>
<li>HandlerAdpater将Controller执行结果ModelAndView返回给DispatcherServlet</li>
<li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li>
<li>ViewReslover解析后返回具体View</li>
<li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）</li>
<li>DispatcherServlet响应用户<h2 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h2></li>
</ol>
<ul>
<li>@Controller<ul>
<li>标记在一个类上，一个springmvc的controller对象</li>
</ul>
</li>
<li>@RequestMapping<ul>
<li>处理请求地址映射的注解，可用于类或方法上，用于类上，表示类中的所有响应方法都是以该地址作为父路径的。</li>
</ul>
</li>
<li>@Resource和@Autowired<ul>
<li>都是bean注入使用</li>
<li>@Autowired为spring提供的注解，需要导包</li>
<li>@Autowired是按照类型注入对象的，如果想按照名称来配置，可以结合@Qualifier注解使用</li>
<li>@Resource是按照名称自动注入</li>
</ul>
</li>
<li>@PathVariable<ul>
<li>用于将请求路径URL中的模版变量映射到功能方法的参数上，即取出URL模版中的变量作为参数</li>
</ul>
</li>
<li>@RequestParm<ul>
<li>在Springmvc后台控制层获取参数</li>
</ul>
</li>
<li>@ResponseBody<ul>
<li>将controller的方法返回的对象，通过适当的htppmessageconverter转化为指定格式后，写入到response对象的body数据区</li>
</ul>
</li>
<li>@Component<ul>
<li>通用注解</li>
</ul>
</li>
<li>@Repository<ul>
<li>注解dao层</li>
</ul>
</li>
<li>@ModelAttribute和@SessionAttribute<ul>
<li>@ModelAttribute该Controller的所有方法在调用前，先执行，应用在basecontroller中</li>
<li>@SessionAttribute将值放在session域中</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 框架集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Struts2]]></title>
      <url>/2017/10/21/Struts2/</url>
      <content type="html"><![CDATA[<p>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。</p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="https://i.imgur.com/3v84BdA.png" alt=""></p>
<ol>
<li>加载类（FilterDispatcher）</li>
<li>读取配置（struts2配置文件中的Action）</li>
<li>派发请求（客户端发送请求）</li>
<li>调用Action（FilterDispatcher从Struts配置文件中读取与之对应的Action）</li>
<li>启动拦截器（WebWork拦截器链自动对请求应用通用功能，如验证）</li>
<li>处理业务（回调Action的excute（）方法）</li>
<li>返回响应（通过execute方法将信息返回到FilterDispatcher）</li>
<li>查找响应（FilterDispatcher根据配置查找响应的是什么信息如：SUCCESS、ERROER、将跳转到哪个jsp页面）</li>
<li>响应用户（jsp→客户浏览器端显示）</li>
<li>Struts2标签库（相比struts1的标签库，struts2是大大加强了，对数据的操作功能很强大）</li>
</ol>
<h2 id="与SpringMVC的区别"><a href="#与SpringMVC的区别" class="headerlink" title="与SpringMVC的区别"></a>与SpringMVC的区别</h2><ol>
<li>SpringMVC的入口是一个Servlet前端控制器，而Struts2入口是一个Filter过滤器</li>
<li>SpringMVC是基于方法开发，传递参数是通过方法形参，可以设计为单例或多例（建议单例）</li>
<li>Struts2采用值栈存储请求和响应的数据，通过OGNL存储数据，springmvc通过参数解析器将request对象内容进行解析成方法形参，将响应数据和页面封装成ModelAndView对象，最后又将模型数据通过request对象传输到页面。jsp视图解析器默认使用jstl。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 框架集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[集合小结]]></title>
      <url>/2017/10/17/collection/</url>
      <content type="html"><![CDATA[<p>计算机科学中，集合是一组可变数量的数据项(也可能是0个)的组合，这些数据项可能共享某些特征，需要以某种操作方式一起进行操作。</p>
<h2 id="单例集合"><a href="#单例集合" class="headerlink" title="单例集合"></a>单例集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>特点：元素有放入顺序，元素可重复</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ol>
<li>长度可变的数组<blockquote>
<ul>
<li>有索引结构，使用索引在数组中搜索和读取数组是很快的，也就是<strong>查找快</strong></li>
<li>数组这种数据结构将对象放在连续的位置中，因此<strong>增加、删除的速度比较慢</strong></li>
</ul>
</blockquote>
</li>
<li>存数类型是Object，允许为null</li>
<li>初始大小（不设置大小的时候默认是10）</li>
<li>不是线程安全的，异步的</li>
</ol>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ol>
<li>链表的数据结构</li>
<li>存储的类型是Object,允许为null</li>
<li>不是线程安全的，得自己实现线程安全<blockquote>
<p>在创建List时构造一个同步的List<br> <code>List list = Collections.synchronizedList(new LinkedList(...));</code></p>
</blockquote>
</li>
</ol>
<h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ol>
<li>底层是数组结构</li>
<li>同步的，线程安全</li>
<li>执行效率低</li>
<li>Vector缺省情况下自动增长原来一倍的数组长度<blockquote>
<p>在集合中保存大量的数据那么使用Vector有一些有事，因为你可以通过设置集合的变化大小来避免不必要的资源开销</p>
</blockquote>
</li>
<li>初始大小是10</li>
</ol>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>特点：元素无放入顺序，且不可重复（实际存储顺序是HashCode决定的，固定的）</p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ol>
<li>基于hashmap实现，底层使用hashmap保存元素</li>
<li>set元素中的值存放在hashmap的key中，value存放了一个模拟值persent</li>
<li>由于hashmap中的key是不能重复的，所以hashset就利用这个特性实现了set中的值不会重复</li>
<li>hashset是如何保证元素的唯一性<ol>
<li>基于哈希表实现的。哈希表是存储一系列哈希值的表，而哈希值是由对象的hashcode()方法产生的。</li>
<li>确保元素唯一性的两个方法：hashcode()和equals()方法</li>
<li>当调用add（）方法向集合中存入对象的时候，先比较对象的哈细致有没有一样的，如果都不一样就直接存入。如果有与之相同的哈希值，则要继续比较两个对象是否是同一个对象，调用对象的equals方法<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4></li>
</ol>
</li>
<li>基于treeMap实现的</li>
<li>有序的二叉树<h2 id="多例集合"><a href="#多例集合" class="headerlink" title="多例集合"></a>多例集合</h2></li>
</ol>
<h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><ol>
<li>父类是Dictionary</li>
<li>实现一个key-value映射的哈希表。任何非空对象都可作为key或者value</li>
<li>同步的，<strong>线程安全</strong></li>
<li>内部通过单链表解决冲突问题</li>
<li>效率低</li>
<li>有contains方法</li>
<li>初始大小是11</li>
<li>扩容时，hashTable采用的是2*old+1</li>
<li>hash值的计算使用的直接是对象的hashcode方法</li>
<li>迭代器，HashTable用Enumeration来遍历数据<ol>
<li>只提供了遍历Vector和Hashtable类型集合元素的功能</li>
<li>这种类型的集合对象通过调用elements()方法获取一个Enumeration对象，然后Enumeration对象再调用一下方法来对集合中元素进行遍历。<blockquote>
<p>hasMoreElements():判断Enumeration对象中是否还有数据<br>nextElement():获取Enumeration对象中的下一个数据</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ol>
<li>弗雷是AbstractMap</li>
<li>哈希表，允许key和value值为空</li>
<li><p>方法是同步的，线程不安全</p>
<blockquote>
<p><strong>为什么不安全</strong></p>
<ul>
<li>首先如果多个线程同时使用put方法添加元素，而且假设正好存在两个put的key发生了碰撞(hash值一样)，那么根据HashMap的实现，这两个key会添加到数组的同一个位置，这样最终就会发生其中一个线程的put的数据被覆盖</li>
<li>如果多个线程同时检测到元素个数超过数组大小*loadFactor，这样就会发生多个线程同时对Node数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋值给table，也就算说其他线程的都会丢失，并且各自线程put的数据也丢失</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>Hashtable<br>ConcurrentHashMap<br>Synchronized Map</li>
</ul>
</blockquote>
</li>
<li><p>效率高</p>
</li>
<li>有containsvalue()和containsKey()方法</li>
<li>初始大小是16</li>
<li>扩容时，hashMap采用的是2*old</li>
<li>hash值的计算没有直接使用对象的hashcode方法，为对象key的hashcode值与对象value的hashcode值按位与或操作</li>
<li>迭代器</li>
<li>hashMap的工作原理</li>
<li>当两个对象的hashcode值相同时会发生什么？(hashmap中的碰撞探测(collision detection)及解决方案)<blockquote>
<ul>
<li>因为hashcode值相同，因此他们的bucket位置相同，碰撞就会发生</li>
<li>因为hashMap使用链表存储对象，这个Entry(包含有监支队的Map.Entry对象)会存储在链表中</li>
</ul>
</blockquote>
</li>
<li>如果有两个键的hashcode相同，你如何取对象？<blockquote>
<ul>
<li>当我们调用get()方法，hashMap会使用建对象的hashcode找到bucket位置，然后获取值对象</li>
<li>找到bucket位置之后，会调用keys,equals()方法去找到链表中正确的节点，最终找到要找的值对象</li>
</ul>
</blockquote>
</li>
<li>如果HashMap的大小超过了负载银子(load factor)定义的容量，怎么办？<blockquote>
<p>默认的负载银子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其他集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中，这个过程叫做rehashing，因为它调用hash方法找到新的bucket位置</p>
</blockquote>
</li>
<li>重新调整HashMap大小存在什么问题吗？<blockquote>
<p>当重新调整HashMap大小的时候，确实存在条件竞争，因为如果两个线程都发现HashMap需要重新调整大小了，他们会同时试着调整大小。在调整大小的过程中，存储在链表中的元素的次序会反过来，因为移动到新的bucket位置的时候，HashMap并不会将呀un苏放在链表的尾部，而是放在头部，这是为了避免尾部遍历(tail traversing)。如果条件发生了，那么就死循环了。</p>
</blockquote>
</li>
<li><p>为什么String、Integer这样的wrapper类适合作为键</p>
<blockquote>
<p>String、Integer这样的wrapper类作为HashMap的键是再适合不过了，而且String最为常用。因为String是不可变的。也是final的，而且已经重写了equals()和hashcode()方法了。其他的wrapper类也有这个特点。不可变形是必须，因为为了要计算hashCode(),就要防止键值改变，如果键值在放入时和获取是i返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。不可变性是必要的，因为为了要计算hashCode()，就要防止兼职改变。如果键值在放入和获取时返回不同的hashCode就不能从HashMap中找到想要的对象。不可变性还有其他优点如线程安全。如果你可以仅仅通过将某个field声明成final就能保证hashCode是不变的，那么请这么做吧。因为获取对象的时候要用到equals()和hashCode()方法，那么键对象正确的重写这两个方法非常重要。如果两个不想等的对象返回不同的hashcode的话，那么碰撞的几率就会小些，这样就能提高HashMap的性能。</p>
<h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3></blockquote>
</li>
<li><p>CHM不但是线程安全的，而且比HashTable和synchronizedMap的性能要好</p>
</li>
<li>相对于HashTable和synchronizedMap锁住了整个Map,CHM只锁住部分Map.</li>
<li>CHM允许并发的读操作，同时通过同步锁在写操作时保证数据完整性</li>
<li><p>如何实现</p>
<blockquote>
<ol>
<li>CHM引入了分割，并提供了HashTable支持的所有的功能</li>
<li>在CHM中，支持多线程对Map做读操作，并且不需要任何的blocking<ul>
<li>CHM将MAP分割成不同的部分，在执行更新操作的时候只锁住了一部分</li>
<li>根据默认的并发级别，Map被分割成16个部分，并且由不同的锁控制。这样的话可以同时最多有16个写线程进行操作</li>
<li>但由于一些更新操作，如put()，remove(),putAll(),clear()只锁住操作的部分，所以检索操作不能保证返回的是最新的结果</li>
<li>在迭代遍历CHM时，keySet返回的是iterator是弱一致性和fail-safe的，可能不会返回某些最近的改变，并且在遍历过程中，如果已经遍历的数组上的内容变化了，不会抛出ConcurrentModificationException的异常</li>
<li>CHM默认的并发级别是16，但可以在创建CHM时通过构造函数改变</li>
</ul>
</li>
</ol>
</blockquote>
</li>
<li><p>CHM不允许null的键值</p>
</li>
<li>应用场景<blockquote>
<ol>
<li>CHM适用于读数量超过写</li>
<li>当写数量大于读时，CHM的性能低于Hashtable的synchronized Map的。这是因为当锁住了整个Map时，读操作要等待对统一部分执行写操作的线程结束</li>
<li>CHM适用于cache,在程序启动时初始化，之后可以被多个请求线程访问。</li>
</ol>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 基本集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java7的新特性Paths,Files]]></title>
      <url>/2017/09/25/JAVA7PathsFiles/</url>
      <content type="html"><![CDATA[<p>在使用lucene 5的时候，发现在lucene4时file的地方用到了Path,发现这是JAVA7的新特性，于是查找相关文档，发现在IO方面,java7新增了Paths,Files工具类，发现异常强大，小结一下。</p>
<h3 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h3><p><strong>Path是用来表示文件路径和文件</strong>，可以有多种方法来构造一个Path对象来表示一个文件路径或一个文件</p>
<ul>
<li>在Paths类里有两个static方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Path get(String first,String...more) &#123; </div><div class="line">	return FileSystems.getDefault().getPath(first,more);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Path get(Url url)</div></pre></td></tr></table></figure>
<ul>
<li>得到三种构造方式(以源文件d:/demo.txt为例)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Path path1 = Paths.get(&quot;d:/&quot;,&quot;demo.txt&quot;);</div><div class="line">Path path2 = Paths.get(&quot;d:/demo.txt&quot;);</div><div class="line">Path path3 = Paths.get(URI.create(&quot;file:///d:/demo.txt&quot;));</div><div class="line">Path path4 = FileSystems.getDefault().getPath(&quot;d:/&quot;,&quot;demo.txt&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>File和Path、File和URI之间的转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;d:/demo.txt&quot;);</div><div class="line"></div><div class="line">Path path = file.toPath();</div><div class="line">File file2 = path.toFile();</div><div class="line">URI uri = file.toURI();</div></pre></td></tr></table></figure>
<ul>
<li>读取文件属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(url);</div><div class="line">path.getFileName();</div><div class="line">path.getParent();</div><div class="line">//根目录</div><div class="line">path.getRoot();</div><div class="line">//目录级数(D:\xxx\xxx\xxx\demo.txt   4)</div><div class="line">path.getNameCount();</div></pre></td></tr></table></figure>
<ul>
<li>创建一个文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(&quot;C:\demo.txt&quot;);</div><div class="line">if(Files.exists(path))</div><div class="line">	Files.createFile(path);</div></pre></td></tr></table></figure>
<ul>
<li>Files.newBufferWriter写入文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BufferedWriter writer = Files.newBufferedWriter(Paths.get(&quot;D:\\demo.txt&quot;),Charset.forName(&quot;UTF-8&quot;));</div><div class="line">        writer.write(&quot;测试中文&quot;);</div><div class="line">        writer.flush();</div><div class="line">        writer.close();</div></pre></td></tr></table></figure>
<ul>
<li>Files.newBufferWriter读取文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BufferedReader reader = Files.newBufferedReader(Paths.get(&quot;D:\\demo.txt&quot;), Charset.forName(&quot;UTF-8&quot;));</div><div class="line">        String str = null;</div><div class="line">        while((str = reader.readLine())!=null)&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">        reader.close();</div></pre></td></tr></table></figure>
<ul>
<li>遍历文件夹,这里只遍历当前目录，不遍历子目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(&quot;D:\\dir&quot;);</div><div class="line">        DirectoryStream&lt;Path&gt; paths = Files.newDirectoryStream(path);</div><div class="line">        for(Path p : paths)&#123;</div><div class="line">            System.out.println(p.getFileName());</div><div class="line">        &#125;	</div><div class="line"></div><div class="line"></div><div class="line">DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(Paths.get(&quot;D:\\dir&quot;));</div><div class="line">       Iterator&lt;Path&gt; ite = stream.iterator();</div><div class="line">       while (ite.hasNext())&#123;</div><div class="line">           Path path = ite.next();</div><div class="line">           System.out.println(path.getFileName());</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<ul>
<li>要遍历子目录，在java7前需要用递归，而java7的Files提供了walkFileTree()方法，这个在另一篇文章写到</li>
</ul>
<h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><ul>
<li>创建目录和文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.createDirectories(Paths.get(&quot;D://dir&quot;));</div><div class="line">if(!Files.exists(Paths.get(&quot;D://dir&quot;)))</div><div class="line">	Files.createFile(Paths.get(&quot;D://dir/demo.txt&quot;))</div></pre></td></tr></table></figure>
<ul>
<li>文件复制</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//Files.copy(Source,Target,CopyOptions)</div><div class="line">	</div><div class="line">	//StandardCopyOption</div><div class="line">	//REPLACE_EXISTING 如果存在替换</div><div class="line">	//COPY_ATTRIBUTES 复制</div><div class="line">	//ATOMIC_MOVE Move the file as an atomic file system operation.</div><div class="line"></div><div class="line">//Files.copy(Source,OutputStream)</div><div class="line"></div><div class="line">//Files.copy(InputStream,Target,CopOption)</div><div class="line"></div><div class="line">Files.copy(Paths.get(&quot;C://Source.txt&quot;,Paths.get(&quot;D://Target.txt&quot;,StandardCopyOption.COPY_ATTRIBUTES)));</div></pre></td></tr></table></figure>
<ul>
<li>读取文件属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(url);</div><div class="line">//最后一次修改时间</div><div class="line">   System.out.println(Files.getLastModifiedTime(path));</div><div class="line">   System.out.println(Files.size(path));</div><div class="line">//是否为一个连接</div><div class="line">   System.out.println(Files.isSymbolicLink(path));</div><div class="line">   System.out.println(Files.isDirectory(path));</div><div class="line">//指定属性，*表全部</div><div class="line">   System.out.println(Files.readAttributes(path,&quot;*&quot;));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb]]></title>
      <url>/2017/09/17/javaweb/</url>
      <content type="html"><![CDATA[<p>Java Web，是用Java技术来解决相关web互联网领域的技术总和。web包括：web服务器和web客户端两部分。Java在客户端的应用有java applet，不过使用得很少，Java在服务器端的应用非常的丰富，比如Servlet，JSP和第三方框架等等。</p>
<h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><ul>
<li>是一个基于请求与响应模式的、无状态的、应用层的协议，基于TCP的连接方式</li>
<li>请求： 请求行、消息报头、请求正文</li>
<li>响应：状态行、消息报头、响应正文<ul>
<li>状态码<ul>
<li>1XX：提示信息——表示请求已解说，继续处理</li>
<li>2XX：成功——表示请求已被成功接收、理解、接受</li>
<li>3XX：重定向——要完成请求必须进行更进一步的操作</li>
<li>4XX：客户端错误——请求有语法错误或请求无法实现</li>
<li>5XX：服务器端错误——服务器未能实现合法的请求</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet是一个web容器，我们通常用的servlet是httpservlet，而httpservlet又是继承于genericservlet，而genericservlet又实现了servlet接口</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol>
<li>实例化——init()</li>
<li>初始化</li>
<li>提高服务——service()</li>
<li>销毁</li>
<li>不可用</li>
</ol>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><p>在调用service()方法中，因为我们继承了httpservlet，其实就是对应了doGet(),doPost()方法。</p>
<ul>
<li>常用的MVC框架，strus,spring这些框架都是基于servlet发展二来的，比如struts1的核心控制器是ActionServlet，而MVC的前端控制器是dispatchServlet</li>
<li><p>Servlet的由于是单例的，所有请求都使用一个实例，所以如果有全局变量被多线程使用的时候，就会出现线程安全问题。解决方案如下：</p>
<ol>
<li>实现singleThreadModel接口，这样对于每次请求都会创建一个新的servlet实例，这样会消耗服务器内存，且已经过时。</li>
<li>通过<strong>加锁(synchronized)</strong>来避免线程安全问题。这个时候虽然是单例，但是对于多线程的访问，每次只能有一个请求进行方法体内执行，只有执行完毕后，其他线程才允许访问，降低吞吐量。</li>
<li>避免使用全局变量，使用<strong>局部变量</strong>可以避免线程安全问题，强烈推荐使用此方法来解决servlet线程安全问题</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">	&lt;servlet-name&gt;唯一性</div><div class="line">	&lt;servlet-class&gt;提高的服务</div><div class="line">&lt;/servlet&gt;</div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">	&lt;servlet-name&gt;</div><div class="line">	&lt;url-pattern&gt;</div><div class="line">&lt;/servlet&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><p>一个Java类，用来监听其他的Java的状态的变化</p>
<h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>监听其他对象的变化</li>
<li>应用在图形化界面中比较多<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2>Filter是一个过滤器，用来在请求前和响应后进行数据的处理<h3 id="生命周期-2"><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h3></li>
</ul>
<ol>
<li>实例化</li>
<li>初始化——init</li>
<li>进行过滤——doFilter</li>
<li>销毁——destroy</li>
<li>释放资源</li>
</ol>
<h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>编码转换 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//实现Filter类</div><div class="line">public class CharactorFilter implements Filter &#123;</div><div class="line">	//定义转换字符集类型</div><div class="line">	String encoding = utf-8;</div><div class="line">	</div><div class="line">	public void DoFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws Exception&#123;</div><div class="line">		if(encoding!=null)&#123;</div><div class="line">			//设置request字符编码</div><div class="line">			request.setCharacterEncoding(encoding);</div><div class="line">			//设置response字符编码</div><div class="line">			response.setContentType(&quot;text/html;charset=&quot;+encoding);</div><div class="line">		&#125;</div><div class="line">		chain.doFilter(request,response);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>web.xml
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;</div><div class="line">	&lt;filter-class&gt;上文过滤器的全限定名</div><div class="line">&lt;/fitler&gt;</div><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;</div><div class="line">&lt;/filter&gt;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>安全验证</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//实现Filter类</div><div class="line">public LoginFilter implements Filter&#123;</div><div class="line"></div><div class="line">	public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws Exception&#123;</div><div class="line">		HttpServletRequest httpRequest = (HttpRequest) request;</div><div class="line">		HttpServletResponse httpResponse = (HttpResponse) response;</div><div class="line">		HttpSession session = httpRequest.getSession();</div><div class="line">		</div><div class="line">		if(session.getAttribute(&quot;username&quot;)!=null)&#123;</div><div class="line">			chain.doFilter(request,response);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重复提交的判断</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class HttpRequestContentFilter implements FIlter &#123;</div><div class="line">	private Servlet Context context;</div><div class="line"></div><div class="line">	public void init(FilterConfig filterConfig) throws Exception&#123;</div><div class="line">		context = filterConfig.getServletContext();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws Exception&#123;</div><div class="line">		//在ThreadLocal中共享本次请求、响应对象</div><div class="line">		HttpRequestContext.setHttpRequestContext((HttpServletRequest)request,(HttpServletResponse)response,context);</div><div class="line">		</div><div class="line">		chain.doFilter(request,response);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Web集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux误删除了备份的数据库]]></title>
      <url>/2017/09/13/OracleBankDelete/</url>
      <content type="html"><![CDATA[<p>延迟加载异常：failed to lazily initialize a collection of role: com.misaniy.bos.domain.base.Courier.fixedAreas, could not initialize proxy - no Session</p>
<h2 id="reason：误删除了备份的数据库"><a href="#reason：误删除了备份的数据库" class="headerlink" title="reason：误删除了备份的数据库"></a>reason：误删除了备份的数据库</h2><h2 id="resolve："><a href="#resolve：" class="headerlink" title="resolve："></a>resolve：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sqlplus /nolog</div><div class="line">//使用数据库命令模式</div><div class="line">connect system/root as sysdba</div><div class="line">//连接数据库</div><div class="line">SQL&gt;shutdown normal</div><div class="line">//关闭数据库oracle服务</div><div class="line">SQL&gt;startup mount</div><div class="line">//重新启动Oracle服务</div><div class="line">SQL&gt;alter database open;</div><div class="line">//打开数据库</div><div class="line"></div><div class="line">//SQL&gt;alter database datafile 5 offline drop 若出现错误</div><div class="line"></div><div class="line">SQL&gt;alter database open;</div><div class="line">//重新更改数据库的open</div><div class="line">SQL&gt;startup</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 报错集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[could not initialize proxy - noSession]]></title>
      <url>/2017/09/13/lazily/</url>
      <content type="html"><![CDATA[<p>failed to lazily initialize a collection of role: com.misaniy.xxx, could not initialize proxy - no Session延迟加载异常</p>
<h2 id="解决方案有两种"><a href="#解决方案有两种" class="headerlink" title="解决方案有两种"></a>解决方案有两种</h2><h3 id="其一，在web-xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类"><a href="#其一，在web-xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类" class="headerlink" title="其一，在web.xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类"></a>其一，在web.xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;</div><div class="line">	&lt;filter-class&gt;org.springframework.orm.jpa.support.OpenEntityManagerInviewFilter&lt;/filter-class&gt;</div><div class="line">	&lt;!-- 如果你的sessionFactory不是叫sessionFactory，需要配置如下--&gt;</div><div class="line">	&lt;init-param&gt;</div><div class="line">		&lt;param-name&gt;sessionFactoryBeanName&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;&#123;Your Session Factory Name&#125;&lt;/param-value&gt;</div><div class="line">	&lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure>
<h3 id="其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory-比如我用的SPRING-DATA-JPA，就用如下方法"><a href="#其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory-比如我用的SPRING-DATA-JPA，就用如下方法" class="headerlink" title="其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory,比如我用的SPRING DATA JPA，就用如下方法"></a>其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory,比如我用的SPRING DATA JPA，就用如下方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@JSON(serialize = false)</div><div class="line">public XXX getXXX()&#123;</div><div class="line">	return XXX;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Bean类找到你的延迟加载的数据，没有使用到就使用该注解</p>
]]></content>
      
        <categories>
            
            <category> 报错集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle和tomcat端口冲突]]></title>
      <url>/2017/09/12/PortException/</url>
      <content type="html"><![CDATA[<p>Oracle XE http与tomcat端口冲突8080</p>
<h2 id="reason："><a href="#reason：" class="headerlink" title="reason："></a>reason：</h2><p>oracle与tomcat端口8080冲突，我们可以修改任意一个端口；</p>
<h2 id="resolve："><a href="#resolve：" class="headerlink" title="resolve："></a>resolve：</h2><h3 id="修改oracle"><a href="#修改oracle" class="headerlink" title="修改oracle"></a>修改oracle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sqlplus system/root</div><div class="line"></div><div class="line">SQL&gt;call dbms_xdb.sethttpport(&apos;8082&apos;);</div></pre></td></tr></table></figure>
<h3 id="修改tomcat，这里由于用了maven-所以直接安装tomcat7插件"><a href="#修改tomcat，这里由于用了maven-所以直接安装tomcat7插件" class="headerlink" title="修改tomcat，这里由于用了maven,所以直接安装tomcat7插件"></a>修改tomcat，这里由于用了maven,所以直接安装tomcat7插件</h3><p>Maven —&gt; build plugin  —-&gt;tomcat7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">&lt;gourpId&gt;org.apache.tomact.maven&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.2&lt;/version&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;port&gt;8081&lt;/port&gt;</div><div class="line">	&lt;path&gt;/&lt;/path&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>Run As —&gt; Maven Install<br>Run As —&gt; Maven Build… tomcat7:run</p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis的分页插件PageHelper]]></title>
      <url>/2017/08/10/PageHelper/</url>
      <content type="html"><![CDATA[<p>逆向工程生成的代码是不支持分页处理的，如果想进行分页需要自己编写mapper，这样就失去逆向工程的意义了。为了提高开发效率可以是要弄个mybatis的分页插件PageHelper.</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该插件目前支持Oracle，MySQL，MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页.</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li>把PageHelper依赖的jar包添加到工程中。官方提供的代码对逆向工程支持的不好，使用民间修改版pagehelper-fix.</li>
<li><p>在Mybatis配置xml中配置拦截器插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;plugins&gt;</div><div class="line">	&lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;</div><div class="line">		&lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;</div><div class="line">	&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//获取第1页，10条内容，默认查询总数count</div><div class="line">PageHelper.startPage(1,10);</div><div class="line">//分页处理</div><div class="line">List&lt;E&gt; list = ;</div><div class="line">//取分页信息</div><div class="line">PageInfo&lt;E&gt; pageInfo = new PageInfo(list);</div><div class="line">pageInfo.getTotal();</div><div class="line">pageInfo.getPages();</div><div class="line">pageInfo.getPageNum();</div><div class="line">pageInfo.getPageSize();</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈数据库优化]]></title>
      <url>/2017/05/15/sql/</url>
      <content type="html"><![CDATA[<p>数据库优化分为硬优化、软优化。硬优化主要是指针对数据库本身的优化（表和库），软优化主要就是针对sql语句之类的优化。</p>
<h2 id="软优化"><a href="#软优化" class="headerlink" title="软优化"></a>软优化</h2><h3 id="查询条件尽量加索引"><a href="#查询条件尽量加索引" class="headerlink" title="查询条件尽量加索引"></a>查询条件尽量加索引</h3><pre><code>- 这个不是必须加的，但很大成都上能够解决一定查询效率的问题。但是需要主义的是不要在索引字段上做计算、函数等操作。
</code></pre><h3 id="少部分关键字的使用需要减少"><a href="#少部分关键字的使用需要减少" class="headerlink" title="少部分关键字的使用需要减少"></a>少部分关键字的使用需要减少</h3><pre><code>- 避免使用Like
- exit not exit来代替not in
- 字段名代替*
- id&gt;=3代替id&gt;2
</code></pre><h3 id="减少子查询的使用"><a href="#减少子查询的使用" class="headerlink" title="减少子查询的使用"></a>减少子查询的使用</h3><pre><code>- 复杂业务简单化，不使用子查询
    - 先生成临时表，再做关联查询
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>- 减少对数据库的重复操作，能合并就合并，能一条sql就不要分多条
- 其他有的再补充
</code></pre><h2 id="硬优化"><a href="#硬优化" class="headerlink" title="硬优化"></a>硬优化</h2><h3 id="拆表"><a href="#拆表" class="headerlink" title="拆表"></a>拆表</h3><ul>
<li>在很多情况下，某一张表某些字段经常被查询到，那么我们就有必要拆分表<br><img src="https://i.imgur.com/Yy4qqup.png" alt=""></li>
<li>正如这张图，在id\name\attr7\attr8\attr9常用的情况下，把表拆分成两张表再关联起来</li>
</ul>
<h3 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h3><ul>
<li>单表数据太多，查询的效率极慢的情况下我们可以把表里的数据分成几张表来存储<br><img src="https://i.imgur.com/nzcpyp0.png" alt=""></li>
<li>就如上图，我们每次查询一月份的数据的时候都要在全年度的表里去查，数据量太大，查询了会很慢，所以我们将每个月份的数据单独提出来做成表，这样查询就相对比较快了</li>
</ul>
<h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><ul>
<li>读写分离，主要针对数据库访问的量很大，导致数据库运行可能宕机的问题。原理就是添加几个数据库，形成集群将访问量平均分配到每个数据库上<br><img src="https://i.imgur.com/iYdfjkS.png" alt=""></li>
<li>如上图，我们只需要修改主库数据，通知到每个分类，从库更新之后，每次查询我们都将查询分配到每个从库就可以了</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[全文检索和Lucene]]></title>
      <url>/2017/04/27/Full-Context/</url>
      <content type="html"><![CDATA[<p>SQL语句的like会搜索大量不相关的内容，不走索引，且，存在资源浪费。这时我们就需要用到全文检索。</p>
<h2 id="全文检索和Lucene"><a href="#全文检索和Lucene" class="headerlink" title="全文检索和Lucene"></a>全文检索和Lucene</h2><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>了解Lucene之前，我们需要清楚全文检索的概念。</p>
<p>生活中的数据分为三种。</p>
<ul>
<li><strong>结构化数据</strong>：具有固定格式或有限长度的数据，如数据库，元数据等。</li>
<li><strong>非结构化数据</strong>：不定长度或无固定格式的数据，如邮件，word文档等。</li>
<li>半结构化数据：根据需要可以按结构化数据处理，也可抽取出纯文本按非结构化数据来处理。</li>
</ul>
<p>对应的搜索分为两种。</p>
<ul>
<li><strong>对结构化数据的搜索</strong>：sql语句、windows搜索文件名、类型、修改时间等</li>
<li><strong>对非结构化数据的搜索</strong>：windwos搜索文件内容、linux的grep,搜索引擎的搜索等</li>
</ul>
<p>对非结构化数据搜索即对<strong>全文数据的搜索</strong>分为两种：</p>
<ul>
<li><strong>顺序扫描法</strong>：假设寻找某个字符串的文件，就是一个文档一个文档读，然后每个文档从头读到尾，Linux下的grep就是这种方式，小数据量可以使用，但对于大量数据，就很慢了。</li>
<li><strong>全文检索</strong>：将非结构化数据中的一部分信息提取出来，重新组织，使其变为结构化数据，我们称之为索引，而这种<strong>先建立索引，再搜索的过程就叫全文检索</strong>。</li>
</ul>
<p>对应的创建<strong>索引</strong>方式分三种。</p>
<blockquote>
<p>索引：加快数据搜索的一种数据结构</p>
</blockquote>
<ul>
<li><strong>I/O流</strong>：对于本地文件创建索引。</li>
<li><strong>爬虫</strong>：模拟访问URL，获取网页数据，搜索引擎使用。</li>
<li><strong>SQL搜索</strong>：对于存放在数据库的数据使用。</li>
</ul>
<h4 id="如何创建索引"><a href="#如何创建索引" class="headerlink" title="如何创建索引"></a>如何创建索引</h4><ol>
<li>源文档Document<ul>
<li>文档中包括一个一个域(Field)[file_name,file_path,file_size,file_content等]</li>
</ul>
</li>
<li>分词组件Tokenizer得到词元Token<ul>
<li>将源文档分词</li>
<li>去除标点</li>
<li>去除停词</li>
</ul>
</li>
<li>处理组件LinguisticProcessor得到词Term<ul>
<li>变为小写</li>
<li>缩减位词根</li>
<li>转变为词根 </li>
</ul>
</li>
<li>索引组件Indexer<ul>
<li>用词Term创建字典</li>
<li>对字典按字母顺序排序</li>
<li>合并相同的词Term成为倒排索引(Posting List)</li>
</ul>
</li>
</ol>
<p><img src="https://i.imgur.com/4HCyRk6.jpg" alt="倒排索引"></p>
<blockquote>
<p>倒排索引：从字符串到文件的映射是文件到字符串映射的反向过程，所以这种索引称为倒排索引</p>
</blockquote>
<h4 id="如何对索引进行搜索"><a href="#如何对索引进行搜索" class="headerlink" title="如何对索引进行搜索"></a>如何对索引进行搜索</h4><ol>
<li>用户输入查询语句</li>
<li>对查询语句进行分析处理</li>
<li>搜索索引，得到符合语法树的文档</li>
<li>根据得到的文档和查询语句的相关性排序</li>
</ol>
<h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><h4 id="Lucene实现全文检索"><a href="#Lucene实现全文检索" class="headerlink" title="Lucene实现全文检索"></a>Lucene实现全文检索</h4><ul>
<li>获得原始文档</li>
<li>创建文档对象</li>
<li>分析文档</li>
<li>创建索引</li>
<li>查询索引库</li>
</ul>
<h4 id="常用域Field"><a href="#常用域Field" class="headerlink" title="常用域Field"></a>常用域Field</h4><p><img src="https://i.imgur.com/oodzETd.png" alt="常用域"></p>
<h4 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="索引库的维护"><a href="#索引库的维护" class="headerlink" title="索引库的维护"></a>索引库的维护</h4><h5 id="索引库的添加"><a href="#索引库的添加" class="headerlink" title="索引库的添加"></a>索引库的添加</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//Document.add(Field)</div><div class="line">Document document = new Document();</div><div class="line">document.add(new TextField(&quot;name&quot;,&quot;文档&quot;.Store.YES));</div><div class="line">document.add(new TextFiled(&quot;content&quot;,&quot;内容&quot;,Store.YES));</div><div class="line"></div><div class="line">IndexWriter.addDocument(document);</div><div class="line">IndexWriter.close();</div></pre></td></tr></table></figure>
<h5 id="索引库的删除"><a href="#索引库的删除" class="headerlink" title="索引库的删除"></a>索引库的删除</h5><ul>
<li>删除全部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//删除全部索引</div><div class="line">indexWriter.deleteAll();</div><div class="line"></div><div class="line">indexWriter.close();</div></pre></td></tr></table></figure>
<ul>
<li>指定条件删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//Query</div><div class="line">Query query = new TermQuery(new Term(&quot;name&quot;,&quot;文档&quot;));</div><div class="line">//指定条件删除</div><div class="line">indexWriter.deleteDocuments(query);</div><div class="line"></div><div class="line">indexWriter.close();</div></pre></td></tr></table></figure>
<h5 id="索引库的修改"><a href="#索引库的修改" class="headerlink" title="索引库的修改"></a>索引库的修改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//修改后的Document</div><div class="line">Document document = new Document();</div><div class="line">document.add(new TextField(&quot;name&quot;,&quot;新文档&quot;,Store.YES));</div><div class="line">//updateDocument</div><div class="line">indexWriter.updateDocument(new Term(&quot;content&quot;,&quot;文档&quot;),document);</div><div class="line"></div><div class="line">indexWriter.close();</div></pre></td></tr></table></figure>
<h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><h5 id="Query的子类查询"><a href="#Query的子类查询" class="headerlink" title="Query的子类查询"></a>Query的子类查询</h5><h6 id="TermQuery-精确查找"><a href="#TermQuery-精确查找" class="headerlink" title="TermQuery 精确查找"></a>TermQuery 精确查找</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//IndexSearcher</div><div class="line">IndexSearcher indexSearcher = new IndexSearcher(Directory.open(FSDirectory.open(new File(Path))));</div><div class="line"></div><div class="line">Query query = new TermQuery(new Term(FieldName,keyStr));</div><div class="line"></div><div class="line">TopDocs topDocs = indexSearcher.searcher(query,100);</div><div class="line">//topDocs.scoreDocs存储了document的id</div><div class="line">for(ScoreDoc scoreDoc : topDocs.scoreDocs)&#123;</div><div class="line">	//scoreDoc.doc就是document的id</div><div class="line">	Document document = indexSearcher.doc(scoreDoc.doc);</div><div class="line">	</div><div class="line">	document.get(keyStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">indexSearcher.getindexReader.close();</div></pre></td></tr></table></figure>
<h6 id="MatchAllDocsQuery-所有文档"><a href="#MatchAllDocsQuery-所有文档" class="headerlink" title="MatchAllDocsQuery 所有文档"></a>MatchAllDocsQuery 所有文档</h6><h6 id="NumericRangeQuery-数值范围查找"><a href="#NumericRangeQuery-数值范围查找" class="headerlink" title="NumericRangeQuery 数值范围查找"></a>NumericRangeQuery 数值范围查找</h6><h6 id="BooleanQuery-组合条件查找"><a href="#BooleanQuery-组合条件查找" class="headerlink" title="BooleanQuery 组合条件查找"></a>BooleanQuery 组合条件查找</h6><h6 id="IndexSearcher搜索方法"><a href="#IndexSearcher搜索方法" class="headerlink" title="IndexSearcher搜索方法"></a>IndexSearcher搜索方法</h6><h5 id="queryparser-查询"><a href="#queryparser-查询" class="headerlink" title="queryparser 查询"></a>queryparser 查询</h5><h6 id="QueryParser"><a href="#QueryParser" class="headerlink" title="QueryParser"></a>QueryParser</h6><h6 id="MulitFieldQueryParser"><a href="#MulitFieldQueryParser" class="headerlink" title="MulitFieldQueryParser"></a>MulitFieldQueryParser</h6><p><img src="https://i.imgur.com/SBeqYbE.png" alt="IndexSearcher搜索方法"></p>
<h5 id="TopDocs"><a href="#TopDocs" class="headerlink" title="TopDocs"></a>TopDocs</h5><p><img src="https://i.imgur.com/GyG3UOS.png" alt="TopDocs类"></p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Redis实现缓存]]></title>
      <url>/2017/04/13/Redis/</url>
      <content type="html"><![CDATA[<p> 实现缓存的工具有很多，现在比较流行的是Redis。Redis(remote dictionary server)缓存存放在内存，数据库存放在磁盘，访问内存更快。频繁访问而不频繁修改的数据放在缓存里，能带来更好的体验和更小的服务器压力。</p>
<h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><p>Redis即便是高并发也是单线程的，不适合保存内容大的数据。</p>
<h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h3><p>由于Redis是C语言开发的，安装Redis前需要安装c语言的编译环境。如果没有gcc需要在线安装。<br><code>Yum install gcc-c++</code><br>解压后编译<code>make</code>安装<code>make install PREFIX=/usr/local/redis</code></p>
<h3 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h3><ul>
<li>启动Redis服务<ul>
<li>前端启动 <code>bin]./redis-server</code></li>
<li>后台启动<ul>
<li>把redis3.0/redis.conf复制到redis/bin 目录下</li>
<li>修改配置文件<code>daemonize yes</code></li>
<li>启动服务<code>bin]./redis-server redis.conf</code></li>
</ul>
</li>
</ul>
</li>
<li><p>启动客户端</p>
<ul>
<li><code>bin]./redis-cli</code>默认连接localhost:6379</li>
<li><code>bin]./redis-cli -h 192.168.25.130 -p 6379</code><ul>
<li>-h:Path</li>
<li>-p:Port</li>
</ul>
</li>
</ul>
</li>
<li><p>Redis五中数据类型</p>
<ul>
<li><strong>String</strong>:key-value(做缓存)<ul>
<li>get/incr/decr key</li>
<li>set key value</li>
</ul>
</li>
<li><strong>Hash</strong>:key-fields-values(做缓存)<ul>
<li>hget key field</li>
<li>hset key field value</li>
<li>hincrby key field int</li>
</ul>
</li>
<li>List:有顺序可重复 （类似堆）<ul>
<li>rpush key values往右添加</li>
<li>lpush key values 往左添加（倒序）</li>
<li>lrange 0 -1 查询所有</li>
<li>lpop 从左取</li>
<li>rpop 从右取</li>
</ul>
</li>
<li>Set:无顺序，不能重复<ul>
<li>sadd key values</li>
<li>smembers key</li>
<li>srem key 删除</li>
</ul>
</li>
<li>SortedSet(zset):有顺序，不能重复<ul>
<li>zadd key n values<code>zadd zset1 2 a 5 b 1 c 6 d</code></li>
<li>zrange key 0 -1 <code>c a b d</code></li>
<li>zrevrange key 0 -1 倒序查看</li>
</ul>
</li>
</ul>
</li>
<li><p>Key命令</p>
<ul>
<li>expire key time 设置失效时间</li>
<li>ttl key 查看有效期</li>
<li>persist key 解除失效（持久化）</li>
</ul>
</li>
</ul>
<h2 id="Redis的持久化方案"><a href="#Redis的持久化方案" class="headerlink" title="Redis的持久化方案"></a>Redis的持久化方案</h2><p>Redis所有数据都是保存在内存中的。</p>
<ul>
<li>Rdb:快照形式。定期把内存中当前时刻的数据保存到磁盘。<strong>Redis默认支持的持久化方案</strong>。一直开启</li>
<li>Aof:Append Only File。把所有对Redis数据库操作的命令，增删改命令保存到一个文件中。数据库恢复时，把所有命令执行一遍就可恢复。开启后会降低一点性能</li>
<li>在Redis.conf配置文件中配置。<ul>
<li>默认RBD<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>    - 备份文件 dump.rdb
- AOF.每秒执行一次
`appendonly yes`
</code></pre><h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><p><img src="https://i.imgur.com/TmMbFyW.jpg" alt=""><br>架构细节</p>
<ol>
<li>所有Redis节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</li>
<li>节点的fail是通过集群中超过半数的节点检测失效时才生效。</li>
<li>客户端与redis节点直连，不需要中间proxy层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可</li>
<li>redis-cluster把所有物理节点映射到[0-16383]slot上，cluster负责维护node&lt;-&gt;slot&lt;-&gt;value</li>
</ol>
<blockquote>
<p>Redis集群中内置了16384个哈希槽，当需要在Redis集群中防止一个key-value时，redis先对key使用crc16算法算出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点</p>
</blockquote>
<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>Redis集群中至少应该有三个节点，为了保证集群的高可用，需要每个节点有一个备份机。所以至少需要6台服务器。</p>
<h3 id="搭建伪集群"><a href="#搭建伪集群" class="headerlink" title="搭建伪集群"></a>搭建伪集群</h3><ul>
<li>复制单机版<code>redis</code>复制5份<code>redis-cluster</code></li>
<li>修改每一个redis节点的端口<code>port</code>以及启用集群<code>cluster-enabled yes</code></li>
<li>启动每一个节点<code>./redis-server redis.conf</code></li>
<li>创建集群<ul>
<li>安装Ruby的运行环境<code>yum install ruby</code></li>
<li>安装Ruby的包管理器<code>yum install rubygems</code></li>
<li>安装脚本<code>gem install redis-3.0.0.gem</code></li>
<li>复制<code>redis-3.0.0/src/redis-trib.rb</code>到<code>redis</code></li>
</ul>
</li>
<li>使用ruby脚本搭建集群<code>./redis-trib.rb create --replicase 1 192.168.XX.XX:7001 1992.168.XX.XX:7002 ......</code></li>
<li><p>创建关闭集群的脚本</p>
<ul>
<li><p><code>redis-cluster]vim shutdown-all.sh</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">redis01/redis-cli -h address -p 7001 shutdown</div><div class="line">redis01/redis-cli -h address -p 7002 shutdown</div><div class="line">redis01/redis-cli -h address -p 7003 shutdown</div></pre></td></tr></table></figure>
</li>
<li><p>chmod u+x shutdown-all.sh<br>这里这个redis-cli可以是任意一个redis集群的客户端</p>
</li>
</ul>
</li>
</ul>
<h3 id="集群的使用方法"><a href="#集群的使用方法" class="headerlink" title="集群的使用方法"></a>集群的使用方法</h3><h4 id="Redis-cli-连接集群"><a href="#Redis-cli-连接集群" class="headerlink" title="Redis-cli 连接集群"></a>Redis-cli 连接集群</h4><p><code>redis-cluster]redis01/redis-cli -p 7002 -c</code><br>-c:代表连接的redis集群</p>
<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><h3 id="连接单机版"><a href="#连接单机版" class="headerlink" title="连接单机版"></a>连接单机版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Jedis jedis = new Jedis(ipaddress,port);</div><div class="line">jedis.set(key,value);</div><div class="line">String result = jedis.get(key);</div><div class="line">System.out.print(result);</div></pre></td></tr></table></figure>
<h3 id="连接单机版使用连接池"><a href="#连接单机版使用连接池" class="headerlink" title="连接单机版使用连接池"></a>连接单机版使用连接池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">JedisPool jedisPool = new JedisPool(ipaddress,port);</div><div class="line">Jedis jedis = jedisPool.getResource();</div><div class="line">jedis.set(key,value);</div><div class="line">String result = jedis.get(key);</div><div class="line">System.out.print(result);</div><div class="line">jedis.close();</div><div class="line">jedisPool.close();</div></pre></td></tr></table></figure>
<h3 id="连接集群版"><a href="#连接集群版" class="headerlink" title="连接集群版"></a>连接集群版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//第一步：使用JedisCluster对象，需要一个Set&lt;HostAndPort&gt;参数，Redis节点的列表</div><div class="line">Set&lt;HostAndPort&gt; nodes = new HashSet&lt;&gt;();</div><div class="line">nodes.add(new HostAndPort(ipaddress,port));</div><div class="line">nodes.add(new HostAndPort(ipaddress,port));</div><div class="line">nodes.add(new HostAndPort(ipaddress,port));</div><div class="line">nodes.add(new HostAndPort(ipaddress,port));</div><div class="line">nodes.add(new HostAndPort(ipaddress,port));</div><div class="line">nodes.add(new HostAndPort(ipaddress,port));</div><div class="line">JedisCluster jedisCluster = new JedisCluster(nodes);</div><div class="line">//第二部：直接使用JedisCluster对象操作redis,在系统中举例存在。</div><div class="line">jedisCluster.set(key,value);</div><div class="line">String result = jedisCluster.get(key);</div><div class="line">//关闭JedisCluster对象。</div><div class="line">jedisCluster.close();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Solr安装与介绍]]></title>
      <url>/2017/04/02/solr/</url>
      <content type="html"><![CDATA[<p>Solr是基于Lucene的全文搜索服务器</p>
<h2 id="Solr的安装和配置"><a href="#Solr的安装和配置" class="headerlink" title="Solr的安装和配置"></a>Solr的安装和配置</h2><h3 id="Solr配置到tomcat"><a href="#Solr配置到tomcat" class="headerlink" title="Solr配置到tomcat"></a>Solr配置到tomcat</h3><ol>
<li>把Solr的war包赋值到tomcat的webapp下并解压</li>
<li>把Solr/example/lib/ext目录下的jar包添加到solr工程中.</li>
<li>配置SolrHome和SolrCore<ul>
<li>Solr/example/solr文件就是一个标准SolrHome，复制出来命名solrHome</li>
<li>solrHome中的collection1就是一个SolrCore</li>
<li>solrCore下有一个目录conf，conf下的solrconfig.xml可以配置相关信息。</li>
</ul>
</li>
<li>solrconfig.xml<ol>
<li>env-entry-value:配置solrhome的绝对路径</li>
<li>Lib:solr服务依赖的拓展包</li>
<li>dataDir:配置索引库存放路径</li>
<li>requestHandler:查询时使用的url</li>
</ol>
</li>
</ol>
<p>打开Schema.xml可以看到Solr默认的FieldType</p>
<p><img src="https://i.imgur.com/bgR7edq.png" alt="FieldType"></p>
<ul>
<li>class:Solr提供的包solr.TextField，solr.TextField允许用户通过分析器来定制索引和查询，分析器包括一个分词器(tokenizer)和多个过滤器(filter)</li>
<li>positionIncrementGap:可选属性，定义在同一个文档中此类型数据的空白间隔，避免短语匹配错误，此值相当于Lucene的短语查询设置slop值，根据经验设置位100</li>
<li>analyzer<ul>
<li>搜索分析器<ul>
<li>solr.StandardTokenizerFactory 标准分词器</li>
<li>solr.StopFilterFactory 停用词过滤器</li>
<li>solr.LowerCaseFilterFactory 小写过滤器 </li>
</ul>
</li>
<li>索引分析器<ul>
<li>solr.StandardTokenizerFactory 标准分词器</li>
<li>solr.StopFilterFactory 停用词过滤器</li>
<li>solr.SynonymFilterFactory 同义词过滤器</li>
</ul>
</li>
</ul>
</li>
<li>Field 定义<ul>
<li>name 域名</li>
<li>type FieldType</li>
<li>indexed 是否索引</li>
<li>stored 是否存储</li>
<li>multiValued 是否存储多个值</li>
</ul>
</li>
<li>uniqueKey<br>  默认定义唯一主键key为id域<br>  <code>&lt;uniqueKey&gt;id&lt;/uniqueKey&gt;</code></li>
<li><p>copyField 复制域<br>  将多个Field复制到一个Field中，进行统一检索<br>  比如，输入关键字搜索name/description</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 定义name/description/keywords的Field --&gt;</div><div class="line">&lt;field name=&quot;keywords&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;true&quot;/&gt;</div><div class="line">&lt;field name=&quot;name&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</div><div class="line">&lt;field name=&quot;description&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; /&gt;</div><div class="line">&lt;!-- 只搜索keywords就相当于搜索了name和description</div><div class="line">&lt;copyField source=&quot;name&quot; dest=&quot;keywords&quot;&gt;</div><div class="line">&lt;copyField source=&quot;description&quot; dest=&quot;keywords&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>dynamicField(动态字段)<br>自定义Field为:product_title_t<br><code>&lt;dynamicField name=&quot;*_t&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</code></p>
</li>
</ul>
<h3 id="配置中文分析器"><a href="#配置中文分析器" class="headerlink" title="配置中文分析器"></a>配置中文分析器</h3><ol>
<li>将IKAnalyzer2012FF_ul.jar添加到solr/WEB-INF/lib</li>
<li>赋值IKAnalyzer的配置文件和自定义词典到solr的classpath下</li>
<li><p>在schema.xml中添加一个自定义的filedType</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextFiled&quot;&gt;</div><div class="line">	&lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;</div><div class="line">&lt;/fieldType&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>定义field，指定field的type属性为text_ik</p>
</li>
</ol>
<h2 id="Solr管理索引库"><a href="#Solr管理索引库" class="headerlink" title="Solr管理索引库"></a>Solr管理索引库</h2><h3 id="维护索引"><a href="#维护索引" class="headerlink" title="维护索引"></a>维护索引</h3><ul>
<li><p>添加/更新文档</p>
</li>
<li><p>使用Dataimport批量导入数据</p>
<ul>
<li>导入solr-dataimporthandler.jar、solr-dataimporthandler-extras.jar、mysql数据库jar包</li>
<li><p>配置solrconfig.xml，添加一个requestHandler</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;requestHandler name=&quot;/dateimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;</div><div class="line">	&lt;lst name=&quot;defaults&quot;&gt;</div><div class="line">		&lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;</div><div class="line">	&lt;/lst&gt;</div><div class="line">&lt;/requestHandler&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个data-config.xml，保存到solrcore\conf\目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;dataConfig&gt;</div><div class="line">&lt;dataSource type=&quot;JdbcDataSource&quot;</div><div class="line">			driver=&quot;com.mysql.jdbc.Driver</div><div class="line">			url=&quot;jdbc:mysql://localhost:3306/database&quot;</div><div class="line">			user=&quot;root&quot;</div><div class="line">			password=&quot;root&quot;/&gt;</div><div class="line">&lt;document&gt;</div><div class="line">	&lt;entity name=&quot;product&quot; query=&quot;SELECT pid,name,catalog_name,price,description,picture FROM products&quot;&gt;</div><div class="line">		&lt;field column=&quot;pid&quot; name=&quot;id&quot;/&gt;</div><div class="line">		&lt;field column=&quot;name&quot; name=&quot;product_name&quot;/&gt;</div><div class="line">		&lt;field column=&quot;catalog_name&quot; name=&quot;product_catalog_name&quot;/&gt;</div><div class="line">		&lt;field column=&quot;description&quot; name=&quot;product_price&quot;/&gt;</div><div class="line">		&lt;field column=&quot;picture&quot; name=&quot;product_picture&quot;/&gt;</div><div class="line">	&lt;/entity&gt;</div><div class="line">&lt;/document&gt;</div><div class="line">&lt;/dataConfig&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重启tomcat</p>
</li>
<li>Excute导入数据</li>
</ul>
</li>
</ul>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><pre><code>- 删除指定ID的索引
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;delete&gt;</div><div class="line">	&lt;id&gt;1&lt;/id&gt;</div><div class="line">&lt;/delete&gt;</div></pre></td></tr></table></figure>

- 删除查询到的索引数据&lt;*:*表示全部&gt;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;delete&gt;</div><div class="line">	&lt;query&gt;*:*&lt;/query&gt;</div><div class="line">&lt;/delete&gt;</div></pre></td></tr></table></figure>
</code></pre><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><ul>
<li>q- 查询字符串 域名:条件</li>
<li>fq- filter query 过滤查询</li>
<li>sort- 排序</li>
<li>start,rows- 分页查询</li>
<li>fl- 返回指定字段内容，用逗号或空格分割</li>
<li>df- default Feild 默认域</li>
<li>wt- writer type 指定输出格式</li>
<li>hl- 是否高亮</li>
</ul>
<h2 id="使用SolrJ管理索引库"><a href="#使用SolrJ管理索引库" class="headerlink" title="使用SolrJ管理索引库"></a>使用SolrJ管理索引库</h2><pre><code>使用客户端操作Solr比较繁琐低效，于是有SolrJ通过JAVA来访问Solr客户端
</code></pre><h3 id="添加-更新文档"><a href="#添加-更新文档" class="headerlink" title="添加/更新文档"></a>添加/更新文档</h3><ul>
<li>solrJ、slf4j-log4j12、jul-to-slf4j、jcl-over-slf4j<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SolrServer solerServer = new HttpSolrServer(&quot;https://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">SolrInputDocument document = new SolrInputDocument();</div><div class="line"></div><div class="line">//这里FieldName在schema.xml已定义</div><div class="line">//当id已存在，相当于更新</div><div class="line">document.addField(FieldName,Value);</div><div class="line"></div><div class="line">solrServer.add(document);</div><div class="line"></div><div class="line">solrServer.commit();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SolrServer solrServer = new HttpSolrServer(&quot;http://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">//根据条件删除</div><div class="line">solrServer.deleteByQuery(&quot;*:*&quot;);</div><div class="line"></div><div class="line">solrServer.deleteById(id);</div><div class="line"></div><div class="line">solrServer.commit();</div></pre></td></tr></table></figure>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SolrServer solrServer = new HttpSolrServer(&quot;https://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">SolrQuery query = new SolrQuery();</div><div class="line"></div><div class="line">query.setQuery(&quot;*:*&quot;);</div><div class="line"></div><div class="line">QueryResponse queryResponse = solrQuery.query(query);</div><div class="line"></div><div class="line">SolrDocumentList solrDocumentList = queryResponse.getResults();</div><div class="line"></div><div class="line">//查询到的数量</div><div class="line">solrDocumentList.getNumFound();</div><div class="line">//遍历查询结果</div><div class="line">for(SolrDocument solrDocument : solrDocumentList) &#123;</div><div class="line">	solrDocument.get(fieldName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">SolrServer solrServer = new HttpSolrServer(&quot;http://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">SolrQuery query = new SolrQuery();</div><div class="line">//查询条件</div><div class="line">query.setQuery(KeyStr);</div><div class="line">//过滤条件</div><div class="line">query.setFilterQueries();</div><div class="line">//排序条件</div><div class="line">query.setSort(FieldNmae,ORDER.asc);</div><div class="line">//分页处理</div><div class="line">query.setStart(num);</div><div class="line">query.setRows(num);</div><div class="line">//结果中域的列表</div><div class="line">query.setFields(FiledNames);</div><div class="line">//默认搜索域</div><div class="line">query.set(FieldName);</div><div class="line">//高亮显示</div><div class="line">query.setHighlightField(true);</div><div class="line">//高亮显示前缀</div><div class="line">query.setHighlightSimplePre();</div><div class="line">//高亮显示后缀</div><div class="line">query.setHighlightSimplePost();</div><div class="line"></div><div class="line">//执行查询</div><div class="line">QueryResponse queryResponse = solrServer.query(query);</div><div class="line"></div><div class="line">//取查询结果</div><div class="line">SolrDocumentList solrDocumentList = queryResponse.getResults();</div><div class="line"></div><div class="line">//遍历查询结果</div><div class="line">for(SolrDocument solrDocument:solrDocumentList)&#123;</div><div class="line">	//取高亮显示</div><div class="line">	String productName=&quot;&quot;;</div><div class="line">	Map&lt;String,Map&lt;String,List&lt;String&gt;&gt;&gt; highlighting = queryResponse.getHighlighting();</div><div class="line">	List&lt;String&gt; list = highlighting.get(solrDocument.get(&quot;id&quot;)).get(product_name);</div><div class="line">	//判断是否有高亮内容</div><div class="line">	if(list!=null)&#123;</div><div class="line">		productName=list.get(0);</div><div class="line">	&#125;else&#123;</div><div class="line">		productName=(String)solrDocument.get(&quot;product_name&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[shiro]]></title>
      <url>/2017/03/16/shiro/</url>
      <content type="html"><![CDATA[<p>shiro是apache的一个开源的安全框架，支持认证一个或者多个数据源，可以对数据进行会话管理，对用户进行认证和授权，实现角色的细粒度权限控制，并且支持缓存技术。</p>
<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="安全管理器SecurityManager"><a href="#安全管理器SecurityManager" class="headerlink" title="安全管理器SecurityManager"></a>安全管理器SecurityManager</h3><p>对外提供安全管理的各种服务</p>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>这个组件负责手机principals和credentials，并将它们提交给应用系统。如果提交的credentials跟应用系统中提供的credentials吻合，就能够继续访问，否则需要重新提交principals和credentials，或者直接终止访问。</p>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>身份验证通过后，由这个组件对登录人员进行访问控制的筛查，比如“who can do what”，或者“who can do which actions”。Shiro采用“基于Realm”的方法，即用户（又称Subject）、用户组、角色和permission的聚合体</p>
<h3 id="sessionManager"><a href="#sessionManager" class="headerlink" title="sessionManager"></a>sessionManager</h3><p>这个组件保证了异构客户端的访问。配置简单。它是基于POJO/J2EE的，不跟任何的客户端或者协议绑定</p>
<h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><ul>
<li>Application Code<br>应用程序代码，就是我们自己的编码，如果在程序中需要进行权限控制，需要调用Subject的API</li>
<li><p>Subject<br>主体，代表了当前的用户。所有的Subject都绑定到SecurityManager，与Subject的所有交互都委托给SecurityManager，可以将Subject当作一个门面，而真正执行者是SecurityManger</p>
</li>
<li><p>SecurityManager<br>安全管理器，所有与安全有关的技术都会与SecurityManage交互，并且它管理所有的Subject。</p>
</li>
<li>Realm<br>域。Shiro是从Realm来获取安全数据（用户，角色，权限），就是说SecurityManager要验证用户身份，那么它需要从Realm得到用户响应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DateSource，即安全数据源</li>
</ul>
<h2 id="四种权限控制"><a href="#四种权限控制" class="headerlink" title="四种权限控制"></a>四种权限控制</h2><ol>
<li>url权限控制</li>
<li>方法注解权限控制</li>
<li>代码级别权限控制</li>
<li>页面标签权限控制</li>
</ol>
<h2 id="和其他技术对比有什么优势"><a href="#和其他技术对比有什么优势" class="headerlink" title="和其他技术对比有什么优势"></a>和其他技术对比有什么优势</h2>]]></content>
      
        <categories>
            
            <category> 框架集合 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式文件系统FastDFS]]></title>
      <url>/2017/01/11/FastDFS/</url>
      <content type="html"><![CDATA[<p>传统图片上传不能有效应对集群的方式，单独搭建一个图片服务器。可以使用分布式文件系统FastDFS方式。实现服务器的高可用</p>
<h2 id="什么是FastDFS"><a href="#什么是FastDFS" class="headerlink" title="什么是FastDFS"></a>什么是FastDFS</h2><p>FastDFS是用<strong>C语言</strong>编写的一款开源的<strong>分布式文件系统</strong>。FastDFS位互联网量身定制，充分考虑了冗杂备份，负载均衡，线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务集群提供文件上传、下载等服务</p>
<h2 id="FastDFS架构"><a href="#FastDFS架构" class="headerlink" title="FastDFS架构"></a>FastDFS架构</h2><ul>
<li>FastDFS架构包括<strong>Tracker server</strong>和<strong>Storage server</strong>。客户端请求Tracker server进行文件上传、下载，通过tracker server调度最终由Storage server完成文件上传和下载。</li>
<li>Tracker server作用是<strong>负载均衡和调度</strong>，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务。可以将Tracker称为追踪服务器或<strong>调度服务器</strong>。</li>
<li>Storage server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是利用操作西戎的文件系统来管理文件。可以将storage称为<strong>存储服务器</strong>.</li>
</ul>
<h3 id="服务端两个角色："><a href="#服务端两个角色：" class="headerlink" title="服务端两个角色："></a>服务端两个角色：</h3><p><img src="https://i.imgur.com/6q1ySLY.png" alt=""></p>
<ul>
<li>Tracker：管理集群，tracker也可以实现集群。每个tracker节点地位平等。</li>
<li>Storage:实际保存文件。Storage氛围多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从概念。</li>
</ul>
<h2 id="文件上传的流程图"><a href="#文件上传的流程图" class="headerlink" title="文件上传的流程图"></a>文件上传的流程图</h2><p><img src="https://i.imgur.com/C8wTeZn.png" alt=""><br>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。<br><img src="https://i.imgur.com/TW8hzEQ.png" alt=""></p>
<ul>
<li>组名：文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。</li>
<li>虚拟磁盘路径:storage配置的虚拟路径，与磁盘选项store_path*对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01,以此类推。</li>
<li>数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</li>
<li>文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</li>
</ul>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><img src="https://i.imgur.com/CrNHy4i.png" alt=""></p>
<h2 id="FastDFS使用"><a href="#FastDFS使用" class="headerlink" title="FastDFS使用"></a>FastDFS使用</h2><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//加载配置文件，配置文件内容就是tracker服务的地址</div><div class="line">ClientGlobal.init(AbsoluteAddress);</div><div class="line">//创建一个TrackerClient对象</div><div class="line">TrakcerClient trackerClient = new TrackerClient();</div><div class="line">//使用TrackerClient对象创建连接，获得一个TrackerServer对象</div><div class="line">TrackerServer trackerServer = trackerClient.getConnection();</div><div class="line">//创建一个StorageServer的引用</div><div class="line">StorageServer storageServer = null;</div><div class="line">//创建一个StorageClient对象，提供两个Server对象</div><div class="line">StorageClient storageClient = new StorageClient(trackerServer,storageServer);</div><div class="line">//使用StorageClient对象上传图片</div><div class="line">String[] result = storageClient.upload_file(&quot;D:/a.jpg&quot;,&quot;jpg&quot;,null);</div></pre></td></tr></table></figure>
<h3 id="使用工具类上传"><a href="#使用工具类上传" class="headerlink" title="使用工具类上传"></a>使用工具类上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//加载配置文件</div><div class="line">FastDFSClient fastDFSClient = new FastDFSClient(AbsoluteAddress);</div><div class="line">//上传文件</div><div class="line">String file = fastDFSClient.uploadFile(AbsoluteAddress);</div></pre></td></tr></table></figure>
<h2 id="整合Spring"><a href="#整合Spring" class="headerlink" title="整合Spring"></a>整合Spring</h2><h3 id="SpringMvc-xml设定文件上传解析器"><a href="#SpringMvc-xml设定文件上传解析器" class="headerlink" title="SpringMvc.xml设定文件上传解析器"></a>SpringMvc.xml设定文件上传解析器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 定义文件上传解析器 --&gt;</div><div class="line">	&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</div><div class="line">		&lt;!-- 设定默认编码 --&gt;</div><div class="line">		&lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;</div><div class="line">		&lt;!-- 设定文件上传的最大值,这里设5MB --&gt;</div><div class="line">		&lt;property name=&quot;maxUploadSize&quot; value=&quot;5242888&quot;/&gt;</div><div class="line">	&lt;/bean&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis小结]]></title>
      <url>/2016/11/28/redis2/</url>
      <content type="html"><![CDATA[<p>redis是C语言写的，存储key-value类型的非关系型数据库，可基于内存也可持久化的日志型数据库，适合作为缓存使用</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>最简单的类型，key-value，二进制安全的</p>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>任何场景都使用：商品编号、订单号采用String的递增特性生成（incr）</p>
<h3 id="hash-散列"><a href="#hash-散列" class="headerlink" title="hash(散列)"></a>hash(散列)</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol>
<li>field和value之间的映射，即键值对的集合，所以特别适合存储对象</li>
<li>每个hash最多可以存储2^32-1键值对（40多亿）</li>
<li>hash对应的value内部实际是一个hashmap，这里有两种实现方式<ul>
<li>hash的成员比较少时，Redis为了节省内存会采用一对数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap</li>
<li>当成员数量增大时会自动转成真正的HashMap</li>
</ul>
</li>
</ol>
<h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>首页广告</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>hget、hset、hgetall</p>
<h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list(列表)"></a>list(列表)</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ol>
<li>链表类型，主要功能是push、pop、获取一个范围的所有值等</li>
<li>List类型是按照插入顺序排序的字符串链表。比如使用LPUSH命令在list头插入一个元素，使用RPUSH命令在list的尾插入一个元素。当这两个命令之一作用于一个空的key时，一个新的list就创建出来了</li>
<li>List的最大长度是2^32-1个元素</li>
<li>list的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销，Redis内部的很多实现，包括发送缓冲队列等也都是用的这个数据结构</li>
</ol>
<h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>商品评论列表</li>
<li>最新消息排行</li>
<li>消息队列，可以利用Lists的PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行</li>
</ul>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><p>lpush、rpush、(插入)lpop、rpop、（返回并删除）lrange、（获取start到stop）BLPOP(返回并删除第一个元素，堵塞并直到有可用，不建议使用)</p>
<h3 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h3><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ol>
<li>set是String的无序集合</li>
<li>集合成员是唯一的，这就意味着集合中不能出现重复的数据</li>
<li>Redis集合是 通过哈希表实现的</li>
<li>支持随机获取元素</li>
<li>支持集合间的取差集、交集与并集操作</li>
<li>set的内部实现是一个value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的集合<h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4>微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作可能就只需要用求交集命令即可</li>
</ol>
<h3 id="zset-sorted-set-（有序集合）"><a href="#zset-sorted-set-（有序集合）" class="headerlink" title="zset(sorted set)（有序集合）"></a>zset(sorted set)（有序集合）</h3><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ul>
<li>有序集合和集合一样是String类型的元素的集合，且不允许重复的成员</li>
<li>不同的是每个元素都会关联一个double类型的分数，Redis正是通过分数来为集合中的元素排序，scope越低排名越靠前。</li>
<li>zet的内部使用HashMap和跳跃表（SkipList）来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序一句是HashMap里存的score，使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单<h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4>以某个条件为群暗中，比如按顶的次数排序<br>需要精准设定过期时间的应用</li>
</ul>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><ul>
<li>方式<ul>
<li>快照形式是直接把内存中的数据保存到一个dump文件中，定时保存</li>
</ul>
</li>
<li>特点<ul>
<li>半持久方式<ul>
<li>不定期的通过异步方式保存到磁盘上</li>
</ul>
</li>
<li>在redis.conf中进行配置<ul>
<li>格式：save N M</li>
<li>含义：表示在N秒之内，redis至少发生M次修改则redis抓快照到磁盘</li>
</ul>
</li>
</ul>
</li>
<li>原理<ul>
<li>当redis需要坐持久化时，redis会fork一个子进程；子进程将数据写到磁盘上的一个临时RDB文件中；当子进程完成写临时文件后，将原来的RDB替换掉，这样的好处就是可以copy-on-write（写时拷贝）</li>
</ul>
</li>
<li>优点<ul>
<li>只包含一个文件，对于文件备份比较实用</li>
<li>对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其他存储介质上</li>
<li>性能最大化。对于Redis的服务进程而言，在开始持久化时，它唯一需要坐的是fork出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了</li>
<li>相比于AOF机制，如果数据集很大，RDB的启动效率会更高</li>
</ul>
</li>
<li>缺点<ul>
<li>如果你想保证数据的高可用性，即最大限度的避免是数据丢失，那么RDB不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失</li>
<li>由于RDB是通过fork子进程来协助完成数据持久化工作的。因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3></li>
</ul>
</li>
<li>方式<ul>
<li>把所有对REDIS的服务器进行修改的命令都存到一个文件里，命令的集合</li>
</ul>
</li>
<li>特点<ul>
<li>全持久化方式<ul>
<li>每一个写命令都通过write函数追加到appendonly.aof中</li>
</ul>
</li>
<li>配置方式<ul>
<li>修改appendonly yes 默认是no</li>
<li>文件刷新三种方式<ul>
<li>appendfsync<ul>
<li>appendfsync always（每提交一个修改命令都调用fsync刷新到AOF文件，非常非常慢，但也非常安全）</li>
</ul>
</li>
<li>appendfsync everysec（每秒都调用fsnyc刷新AOF文件，很快，但可能会都市1秒内的数据） 推荐使用</li>
<li>appendfsync no（依靠OS进行刷新，redis不主动刷新，这样最快，但安全性就差）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>原理<ul>
<li>以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式进行记录，可以打开文本看到详细的操作记录</li>
</ul>
</li>
<li>优点<ul>
<li>较高的数据安全性，即数据持久性</li>
<li>由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容</li>
<li>如果日志过大，redis可以自动启用rewrite机制</li>
<li>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作</li>
</ul>
</li>
<li>缺点<ul>
<li>对于相同的数据集而言，AOF文件通常要大于RDB文件。RDB在恢复大数据时的速度比AOF快</li>
<li>根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RBD一样高效。<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3></li>
</ul>
</li>
<li>牺牲一些性能，换取更高的一致性（AOF）</li>
<li>写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（RDB）</li>
</ul>
<h2 id="Redis的漏洞"><a href="#Redis的漏洞" class="headerlink" title="Redis的漏洞"></a>Redis的漏洞</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>Redis默认情况下，会绑定在0.0.0.0：6379，这样会将Redis服务暴露到公网上，如果没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问Redis以及读取Redis的数据。攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，可以成功在Redis服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器</p>
<h3 id="如何入侵"><a href="#如何入侵" class="headerlink" title="如何入侵"></a>如何入侵</h3><ul>
<li>Redis可能执行过FLUSHALL方法，整个Redis数据库被清空</li>
<li>在Redis数据库中新建了一个名为crackit（网上流传的命令指令）的键值对，内容为一个SSH公钥。</li>
<li>在/root/.ssh文件夹下新建或者修改了authrized_keys文件，内容为Redis生成的db文件，包含上述公钥<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3></li>
</ul>
<ol>
<li>禁止一些高危命令<ul>
<li>修改Redis.conf文件，禁用远程修改DB文件地址<ul>
<li>rename-command FLUSHALL “”</li>
<li>rename-command CONFIG “”</li>
<li>rename-command EVAL “”</li>
</ul>
</li>
</ul>
</li>
<li>以低权限运行Redis服务<ul>
<li>为Redis服务创建单独的用户和家目录，并且配置禁止登录</li>
</ul>
</li>
<li>为Redis添加密码验证<ul>
<li>修改redis.conf文件，添加requirepass password</li>
</ul>
</li>
<li>禁止外网访问Redis<ul>
<li>修改redis.conf文件，添加或修改 bind 127.0.0.1 使得Redis服务只在当前主机可用</li>
</ul>
</li>
<li>做Log监控，及时发现攻击</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Dubbo]]></title>
      <url>/2016/11/09/Dubbo/</url>
      <content type="html"><![CDATA[<p>Dubbo是阿里的开源分布式服务架构，可通过高性能的RPC实现服务的输出和输入功能。</p>
<h2 id="系统通信"><a href="#系统通信" class="headerlink" title="系统通信"></a>系统通信</h2><h3 id="如何实现远程通信"><a href="#如何实现远程通信" class="headerlink" title="如何实现远程通信"></a>如何实现远程通信</h3><ol>
<li>WebService：效率不高基于soap协议。</li>
<li>使用Restful形式的服务：http+json。很多项目中应用。如果服务太多，服务之间调用关系混乱，需要治疗服务。</li>
<li>dubbo。使用rpc协议进行远程调用，直接使用socket通信。传输效率高，并且可以统计出系统之间的调用关系、调用次数。</li>
</ol>
<h3 id="规模架构"><a href="#规模架构" class="headerlink" title="规模架构"></a>规模架构</h3><p><img src="https://i.imgur.com/TJOp8sQ.jpg" alt=""></p>
<ul>
<li>单一应用架构<ul>
<li>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。</li>
<li>此时，用于简化增删改差工作量的<strong>数据访问框架(ORM)</strong>是关键。</li>
</ul>
</li>
<li>垂直应用架构<ul>
<li>当访问量逐渐增大，单一应用增加极其带来的加速度越来越小，将应用拆成无不想干的几个应用，以提升效率</li>
<li>此时，用于加速前端页面开发的<strong>Web框架(MVC)</strong>是关键</li>
</ul>
</li>
<li>分布式服务架构<ul>
<li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。</li>
<li>此时，用于提高业务服用及整合的分布式<strong>服务架构(RPC)</strong>是关键。</li>
</ul>
</li>
<li>流动计算架构<ul>
<li>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。</li>
<li>此时，用于提高极其利用率的**资源调度和治理中心(SOA)是关键。</li>
</ul>
</li>
</ul>
<h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p><img src="https://i.imgur.com/B8sAVoY.jpg" alt=""></p>
<h3 id="节点角色说明："><a href="#节点角色说明：" class="headerlink" title="节点角色说明："></a>节点角色说明：</h3><ul>
<li>Provider:暴露服务的<strong>服务提供方</strong></li>
<li>Consumer:调用远程服务的<strong>服务消费方</strong></li>
<li>Registry:服务注册与发现的<strong>注册中心</strong></li>
<li>Monitor:统计服务的调用次数调和调用时间的<strong>监控中心</strong></li>
<li>Container:<strong>服务运行容器</strong></li>
</ul>
<h3 id="调用关系说明："><a href="#调用关系说明：" class="headerlink" title="调用关系说明："></a>调用关系说明：</h3><ul>
<li>0.<strong>服务容器(Container)</strong>负责启动、加载、运行<strong>服务提供方(Provider)</strong></li>
<li>1.<strong>服务提供方(Provider)</strong>在启动时，向<strong>注册中心(Registry)</strong>注册自己提供的服务。</li>
<li>2.<strong>服务消费方(Consumer)</strong>在启动时，向<strong>注册中心(Registry)</strong>订阅自己所需的服务。</li>
<li>3.<strong>注册中心(Registry)</strong>返回<strong>服务提供方(Provider)</strong>地址列表给消费者，如果有变化，注册中心将基于长连接推送变更数据给<strong>消费方(Consumer)</strong>.</li>
<li>４。<strong>服务消费方(Consumer)</strong>，从提供者地址列表中，基于软负载均衡算法，选一台<strong>提供方(Provider)</strong>进行调用，如果调用失败，再选另一台调用.</li>
<li>5.<strong>服务消费者(Consumer)和提供方(Provider)</strong>，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到<strong>监控中心(Monitor)</strong><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3></li>
</ul>
<h4 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h4><p>Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，Dubbo基于Spring的Schema拓展进行加载。</p>
<ul>
<li>单一工程中spring的配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;xxxService&quot; class=&quot;com.xxxServiceImpl&quot; /&gt;</div><div class="line">&lt;bean id=&quot;xxxAction&quot; class=&quot;com.xxx.xxxAction&quot;&gt;</div><div class="line">	&lt;property name=&quot;xxxService&quot; ref=&quot;xxxService&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<ul>
<li>远程服务</li>
</ul>
<p>将上述local.xml配置拆分成两份，将服务定义部分放在服务提供方remote-provier.xml,将服务引用部分放在服务消费方remote-consumer.xml<br>并在provider增加暴露服务配置<code>&lt;dubbo:service&gt;</code>,在consumer增加引用服务配置<code>&lt;dubbo:reference&gt;</code></p>
<p>发布服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 和本地服务一样实现远程服务 --&gt;</div><div class="line">&lt;bean id = &quot;xxxService&quot; class = &quot;com.xxx.xxxServiceImpl&quot;/&gt;</div><div class="line">&lt;!-- 增加暴露远程服务配置 --&gt;</div><div class="line">&lt;dubbo:service interface=&quot;com.xxx.xxxService&quot; ref=&quot;xxxService&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>调用服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 增加引用远程服务配置 --&gt;</div><div class="line">&lt;dubbo:reference id =&quot;xxxService&quot; interface=&quot;com.xxx.xxxService&quot;/&gt;</div><div class="line">&lt;!-- 和本地服务一样使用远程服务&gt;</div><div class="line">&lt;bean id =&quot;xxxAction&quot; class=&quot;com.xxx.xxxAction&quot;&gt;</div><div class="line">	&lt;property name=&quot;xxxService&quot; ref=&quot;xxxService&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h4 id="注册中心-Registry"><a href="#注册中心-Registry" class="headerlink" title="注册中心(Registry)"></a>注册中心(Registry)</h4><p>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力娇小，使用dubbo2.3.3以上版本，建议使用zookeeper注册中心<br>zookeeper是Apache Hadoop的紫霞公募，是一个属性的目录服务，支持变更推送，适合作为Dubbo服务的注册中心</p>
<h5 id="Zookeeper-安装"><a href="#Zookeeper-安装" class="headerlink" title="Zookeeper 安装"></a>Zookeeper 安装</h5><ul>
<li>安装jdk</li>
<li>上传并解压zookeeper</li>
<li>将conf文件夹下的zoo-sample.cfg复制一份，改名位zoo.cfg</li>
<li>修改zoo.cfg的dataDir属性，指定zookeeper的真实目录</li>
<li>修改zoo.cfg的clientport属性，指定该服务器的zookeeper端口</li>
<li>启动zookeeper:zookeeper/bin/zkServer.sh start</li>
<li>关闭zookeeper:zookeeper/bin/zkServer.sh stop</li>
<li>查看zookeeper:zookeeper/bin/zkServer.sh status</li>
</ul>
<h2 id="框架整合"><a href="#框架整合" class="headerlink" title="框架整合"></a>框架整合</h2><h2 id="Dubbo监控中心"><a href="#Dubbo监控中心" class="headerlink" title="Dubbo监控中心"></a>Dubbo监控中心</h2><ul>
<li><p><a href="https://github.com/alibaba/dubbo下载dubbo" target="_blank" rel="external">https://github.com/alibaba/dubbo下载dubbo</a><br>将dubbo-admin打成war包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package -Dmaven.test.skip=true</div></pre></td></tr></table></figure>
</li>
<li><p>将war包复制到tomcat/webapps/中。修改/WEB-INF/dubbo.properties。包括地址和用户密码</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库优化]]></title>
      <url>/2016/10/29/optimize/</url>
      <content type="html"><![CDATA[<p>浅析数据库的优化</p>
<h2 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h2><ol>
<li>对查询进行优化，尽量避免全表查询，首先考虑在where以及order by 涉及的列上建立索引。</li>
<li>应尽量避免在where子句中字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描</li>
<li>应尽量避免在where子句中使用!=或&lt;&gt;操作符，否则将导致引擎放弃使用索引而进行全表扫描。</li>
<li>应尽量避免在where子句中使用or来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，可以使用union all来代替</li>
<li>in 和not in 也要慎用，否则会导致全表扫描，对连续的数据用between 代替，也可以用exists 代替in</li>
<li>like ‘%a%’这种，索引失效，可以使用全文索引代替</li>
<li>对于多张大数据量（几百条就算）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差</li>
<li>少使用*</li>
<li>日期使用mysql自带的，少使用字符串存储，字符串的比较复杂；IP也使用int类型，不要使用字符串</li>
<li>尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对娇小的字段内搜索效率显然要高些。</li>
</ol>
<h2 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2><h3 id="主从复制（读写分离）"><a href="#主从复制（读写分离）" class="headerlink" title="主从复制（读写分离）"></a>主从复制（读写分离）</h3><p>使用spring可以实现读写分离<br><img src="https://i.imgur.com/63X8SU0.png" alt=""></p>
<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><ul>
<li>分表<ul>
<li>垂直分表<blockquote>
<p>将表按照功能模块、关系密切程度划分出来，部署到不同的库上，比如我们会建立定义数据库workDB、商品数据库payDB、用户数据库userDB、日志数据库logDB等，分别用于存储项目数据定义表、商品定义表、用户数据表、日志数据表等</p>
</blockquote>
</li>
<li>水平分表<blockquote>
<p>指定自己的规则：1、求余。2、哈希。3、时间</p>
</blockquote>
</li>
</ul>
</li>
<li>分库<ul>
<li>分库就是把一张表的数据分成N多个区块，这些区块可以在同一个磁盘上，也可以在不同的磁盘上</li>
</ul>
</li>
<li>应用场景<ul>
<li>表太多，海量数据，各项业务划分清除，低耦合的话，用垂直拆分比较号</li>
<li>表不多，单表数据量大的话，选水平拆分比较号</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[存储引擎]]></title>
      <url>/2016/10/26/StorageEngine/</url>
      <content type="html"><![CDATA[<p>MySQL中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力</p>
<h2 id="查看mysql支持的存储引擎（SHOW-ENGINES）"><a href="#查看mysql支持的存储引擎（SHOW-ENGINES）" class="headerlink" title="查看mysql支持的存储引擎（SHOW ENGINES）"></a>查看mysql支持的存储引擎（SHOW ENGINES）</h2><p><img src="https://i.imgur.com/YG8qPCU.png" alt=""></p>
<h2 id="myisam和innodb的区别"><a href="#myisam和innodb的区别" class="headerlink" title="myisam和innodb的区别"></a>myisam和innodb的区别</h2><ol>
<li>存储结构<ul>
<li>MyISAM<br>每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，拓展名指出文件类型。.frm文件存储表定义。数据文件的拓展名为.MYD(MYDate)。索引文件的拓展名是.MYI(MYIndex)</li>
<li>InnoDB<br>所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB</li>
</ul>
</li>
<li>存储空间<ul>
<li>MyISAM<br>可被压缩，存储空间较小。支持三种不同的存储格式：静态表（默认，但是主义数据末尾不能有空格，会被去掉）、动态表、压缩表</li>
<li>innoDB<br>需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于告诉缓冲数据和索引</li>
</ul>
</li>
<li>可移植性、备份及恢复<ul>
<li>MyISAM<br>数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个进行操作。</li>
<li>innoDB<br>免费的方案可以是拷贝数据文件、备份binlog，或用mysqldump，在数据量达到几十GB的时候就相对痛苦了。</li>
</ul>
</li>
<li>事务支持<ul>
<li>MyISAM<br>强调的是性能，每次查询具有原子性，其执行速度比InnoDB类型要快，但是不提供事务支持。</li>
<li>innoDB<br>提供事务支持，外部键等高级数据库功能。具有事务（commit），回滚（rollback）和崩溃修复能力（crash recovery capablities）的事务安全（transaction=safe(ACID compliant)）型表</li>
</ul>
</li>
<li>表锁差异<ul>
<li>MyISAM<br>只支持表级锁，用户在操作myisam表时，select，update，delete，insert语句都会给表自动加锁，如果加锁以后的表满足insert并发的情况下，可以在表的尾部插入新的数据</li>
<li>innoDB<br>支持事务和行级锁，是innodb的最大特色。行锁大幅度提高了多用户并发操作的性能，但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的</li>
</ul>
</li>
<li>AUTO-INCREMENT<ul>
<li>MyISAM<br>可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。</li>
<li>innoDB<br>InnoDB中必须包含只有该字段的索引。引擎的自动增长列必须是索引。如果是组合索引也必须是组合索引的第一列。</li>
</ul>
</li>
<li>全文索引<ul>
<li>MyISAM<br>支持FULLTEXT类型的全文索引。</li>
<li>innoDB<br>不支持FULLTEXT类型的全文索引，但是innodb可以使用sphinx插件支持全文索引，并且效果更好</li>
</ul>
</li>
<li>表主键<ul>
<li>MyISAM<br>允许没有任何索引和主键的表存在，索引都是保存行的地址。</li>
<li>innoDB<br>如果没有设定主键或空孔唯一索引，就会自动生成一个6字节的主键（用户不可见），数据是主索引的一部分，附加索引保存的是主索引的值。</li>
</ul>
</li>
<li>表的具体行数<ul>
<li>MyISAM<br>保存表的总行数，如果select count(*) from table会直接取出该值</li>
<li>innoDB<br>没有保存表的总行数，如果使用select count(*) from table；会遍历整个表，消耗相当大，但是在加了where条件后，myisam和innodb处理的方式都一样。</li>
</ul>
</li>
<li><p>CRUD操作</p>
<ul>
<li><p>MyISAM<br>如果执行大量的select，MyISAM是更好的选择</p>
</li>
<li><p>innoDB<br>如果你的数据执行大量的insert或update，出于性能方面的考虑，应该使用InnoDB表。DELETE从性能上InnoDB更优，但DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除，在InnoDB上如果要清空保存有大量数据的表，最好使用truncate table这个命令</p>
</li>
</ul>
</li>
<li><p>外键</p>
<ul>
<li>MyISAM<br>不支持</li>
<li>innoDB<br>支持</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[事务Transaction]]></title>
      <url>/2016/10/23/transaction/</url>
      <content type="html"><![CDATA[<p>Transaction是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</p>
<h2 id="事务的四个属性"><a href="#事务的四个属性" class="headerlink" title="事务的四个属性"></a>事务的四个属性</h2><ul>
<li>原子性<ul>
<li>事务是由一个或一组相互关联的SQL语句组成，这些语句被认为是一个不可分割的单元</li>
</ul>
</li>
<li>一致性<ul>
<li>对于数据库的修改是一致的，即多个用户查的数据是一样的。一致性主要由mysql的日志机制处理，他记录数据的变化，为事务恢复提供跟踪记录。</li>
</ul>
</li>
<li>隔离性<ul>
<li>每个事务都有自己的空间，和其他发生在系统中的事务隔离开来，而且事务的结果只在他完全被执行时才能看到</li>
</ul>
</li>
<li>持久性<ul>
<li>提交了这个事务之后对数据的修改更新就是永久的。当一个事务完成，数据库的日志已经被更新时，持久性即可发挥其特有的功效，在mysql中，如果系统崩溃或数据戒指被破坏，通过日志，系统能够恢复在重启前进行的最后一次成功更新，可以反应系统崩溃时处于执行过程的事物的变化</li>
</ul>
</li>
</ul>
<h2 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h2><h3 id="READ-UNCOMMITTED-未提交读"><a href="#READ-UNCOMMITTED-未提交读" class="headerlink" title="READ UNCOMMITTED(未提交读)"></a>READ UNCOMMITTED(未提交读)</h3><p>事务A对数据做的修改，即使没有提交，对于事务B来说也是可见的，这种问题叫脏读</p>
<h3 id="READ-COMMITTED（提交读）"><a href="#READ-COMMITTED（提交读）" class="headerlink" title="READ COMMITTED（提交读）"></a>READ COMMITTED（提交读）</h3><p>事务A对数据做的修改，提交之后会对事务B可见。</p>
<pre><code>&gt; 举例：事务B开启时独到数据1，接下来事务A开启，把这个数据改成2，提交，B再次读取这个数据，会独到最新的数据2
</code></pre><h3 id="REPEATABLE-READ-可重复读"><a href="#REPEATABLE-READ-可重复读" class="headerlink" title="REPEATABLE READ(可重复读)"></a>REPEATABLE READ(可重复读)</h3><p>事务A对数据做的修改，提交之后，对于先于事务A开启的事务是不可见的。</p>
<pre><code>&gt; 举例：事务B开启时读到数据1，接下来事务A开启，把这个数据改成2，提交，B再次读取这个数据，仍然独到数据1
</code></pre><h3 id="SERIALIZABLE（可串行化）"><a href="#SERIALIZABLE（可串行化）" class="headerlink" title="SERIALIZABLE（可串行化）"></a>SERIALIZABLE（可串行化）</h3><p>可串行化是最高的隔离级别。这种隔离级别强制要求所有事物串行执行，在这种隔离级别下，读取的每行数据都加锁，会导致大量的锁征用问题，性能最差</p>
<p><img src="https://i.imgur.com/3DF95Aj.png" alt=""></p>
<pre><code>&gt; 随着隔离级别的增高，并发性能也会降低
</code></pre><h2 id="mysql中的事务"><a href="#mysql中的事务" class="headerlink" title="mysql中的事务"></a>mysql中的事务</h2><ul>
<li>事务的实现是基于数据库的存储引擎的。不同的存储引擎对事务的支持成都不一样</li>
<li>mysql支持的存储引擎中支持事务的InnoDB</li>
<li>事务的隔离级别是通过锁实现的，而事务的原子性、一致性和持久性是通过事务日志实现的</li>
<li>事务日志<ul>
<li>redo——<strong>保障了事务的持久性和一致性</strong><ul>
<li>在InnoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志现形”。当事务提交之后，在BUFFER POOL中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态，未完成的事务，可以继续提交，也可以选择回滚，这是基于恢复的策略而定</li>
</ul>
</li>
<li>undo——<strong>保障了事务的原子性</strong><ul>
<li>undo log主要为事务的回滚服务。在事务执行的过程中，除了记录redo log，还会记录一定量的undo log。undo log记录数据在每个操作前的状态，如果事务执行过程中需要回滚，就可以根据undo log进行回滚操作。每个事务的回滚，只会当回滚当前事务做的操作，并不会印象到其他的事务做的操作</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[锁Lock]]></title>
      <url>/2016/10/19/Lock/</url>
      <content type="html"><![CDATA[<p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。<br>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p>
<h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><h2 id="行锁（InnoDB）"><a href="#行锁（InnoDB）" class="headerlink" title="行锁（InnoDB）"></a>行锁（InnoDB）</h2><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p>又成为读锁，多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改</p>
<pre><code>&gt; SELECT ... LOCK IN SHARE MODE
</code></pre><h3 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h3><p>又称为写锁。排它锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行数据和修改。排他锁指的是一个事务在一行数据加上排它锁后，其他事务不能再加其他的锁。updata,delete,isnert都会自动给设计到的数据加上排他锁，select语句默认不会加任何锁类型</p>
<pre><code>&gt; SELECT ... FRO UPDATE
</code></pre><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><ul>
<li>乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行就爱南侧，如果发现冲突了，则返回用户错误的信息，让用户决定如何去做</li>
<li>实现方式<ul>
<li>版本（Version）记录机制<br><img src="https://i.imgur.com/kiLI98q.png" alt=""><blockquote>
<p>一般是通过为数据库表增加一个数字类型的”version”字段来实现。当读取数据时，将version字段的值一同独处，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比较。如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据</p>
</blockquote>
</li>
<li>时间戳（timestamp）</li>
</ul>
</li>
</ul>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守状态（悲观），因此，在整个数据处理过程中，将数据处于锁定状态。</p>
<pre><code>&gt; SELECT ... FOR UPDATE 或 LOCK IN SHARE MODE
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库之索引]]></title>
      <url>/2016/10/17/Index/</url>
      <content type="html"><![CDATA[<p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</p>
<h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><ul>
<li>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，他们包含着数据表里所有文件的引用指针。可以类比为书的目录，可以加快数据库的查询速度。</li>
<li>索引是创建在数据表对象上的。由表中的一个字段或多个字段生成的键组成，这些键存储在数据结构（B-树或哈希表）中，通过mysql可以快速有效的查找与键值相关联的字段</li>
<li>根据存储类型，分为B型树索引和哈希索引<ul>
<li>InnoDB和MyISAM支持BTREE类型索引，默认</li>
<li>Memoery支持HASH类型的索引</li>
</ul>
</li>
</ul>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>最基本的索引，没有任何限制。MyIASM中默认的BTREE类型的索引，经常用</p>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>与普通索引类是，不同的是：索引的列必须唯一，但允许有<strong>空值</strong></p>
<h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>它是一种特殊的唯一索引，<strong>不允许有空值</strong></p>
<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><ul>
<li>FULLTEXT索引仅仅可用于MYISAM表</li>
<li>他们可以从CHAR、VARCHAR或TEXT列中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加<blockquote>
<p>注意：大容量的表，使用全文索引虽然速度更快，但是生产全文检索是一个非常消耗时间消耗磁盘空间的做法</p>
</blockquote>
</li>
</ul>
<h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><ul>
<li>所谓多列索引，是指在创建索引的时候，锁关联的字段不是一个字段，而是多个字段。</li>
<li>虽然可以通过所关联的字段进行查询，但是只有查询条件中使用了所关联字段中的第一个字段，多列索引才会被使用</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="什么情况适合创建索引"><a href="#什么情况适合创建索引" class="headerlink" title="什么情况适合创建索引"></a>什么情况适合创建索引</h3><ol>
<li>经常被查询的字段，即在WHERE子句中出现的字段</li>
<li>在分组的字段，即在GROUP BY子句中出现的字段</li>
<li>存在依赖关系的子表和父表之间的联合查询，即主键或外键字段</li>
<li>设置唯一完整性约束的字段</li>
</ol>
<h3 id="什么情况不适合创建索引"><a href="#什么情况不适合创建索引" class="headerlink" title="什么情况不适合创建索引"></a>什么情况不适合创建索引</h3><ol>
<li>在查询中很少使用的字段</li>
<li>拥有许多重复值的字段</li>
</ol>
<h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><ol>
<li>使用or关键字的时候索引失效，要想使用or,又想使用索引，只能将or条件中的每个列都加上索引</li>
<li>对于多列索引，不是使用的第一部分，则不会使用索引</li>
<li>like查询是以%开头</li>
<li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来，否则不使用索引</li>
<li>如果mysql估计使用全表扫描要比使用索引快，则不使用索引</li>
<li>对索引列进行运算导致索引失效(+，-，*，/，！等)</li>
<li>独立的列（对列变量需要计算（聚合运算、类型转换等））</li>
<li>在JOIN操作中（需要从多个数据表提取数据时），MYSQL只在主键和外键的数据类型相同时才能使用索引，否则即使建立了索引也不会使用</li>
<li>不使用NOT IN和&lt;&gt;操作，不会使用索引将进行全表扫描，NOT IN 可以NOT EXISTS代替，ID&lt;&gt;3则可以用id&gt;3 or id &lt; 3来代替</li>
<li>索引不会包含有NULL值的列，只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</li>
</ol>
<h2 id="查看索引和优化索引"><a href="#查看索引和优化索引" class="headerlink" title="查看索引和优化索引"></a>查看索引和优化索引</h2><ul>
<li>查看索引<code>show status like &#39;Handler_read%&#39;</code></li>
<li>优化索引<ul>
<li>索引不会包含有NULL值的列，因此数据库设计时不要让字段的默认值为NULL</li>
<li>使用短索引<blockquote>
<p>例如：如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p>
</blockquote>
</li>
<li>索引列排序<blockquote>
<p>MySQL查询只使用一个索引，因此如果WHERE子句中已经使用了索引的话，那么order by 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引</p>
</blockquote>
</li>
<li>不要在列上进行运算</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringWebMvc小结]]></title>
      <url>/2016/10/13/SpringWebMvc/</url>
      <content type="html"><![CDATA[<p>学习SpringWebMvc的个人小结</p>
<h2 id="SpringWebMvc"><a href="#SpringWebMvc" class="headerlink" title="SpringWebMvc"></a>SpringWebMvc</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li>用户请求给前端控制器DispatcherServlet</li>
<li>前端控制器给HandlerMapping处理器映射器</li>
<li>处理器映射器根据映射找到Handler处理器</li>
<li>处理器返回ExcutionChain数据给前端控制器</li>
<li>前端控制器找到HandlerAdapter处理器适配器</li>
<li>处理器适配器找到处理器执行后返回ModelAndView给前端控制器</li>
<li>前端控制器把ModelAndView解析位Model和View，把Model赋值给View</li>
<li>HandlerMapping<ul>
<li>ExcutionChain</li>
</ul>
</li>
<li>HandlerAdapter<ul>
<li>ModelAndView</li>
</ul>
</li>
<li>视图解析器<ul>
<li>解析Model赋值给View</li>
</ul>
</li>
</ul>
<h3 id="SpringMvc-xml配置文件"><a href="#SpringMvc-xml配置文件" class="headerlink" title="SpringMvc.xml配置文件"></a>SpringMvc.xml配置文件</h3><ul>
<li>扫描Controller</li>
<li>&lt; mvc:annotation-driver/&gt;</li>
<li>视图解析器</li>
</ul>
<h3 id="默认支持的数据类型"><a href="#默认支持的数据类型" class="headerlink" title="默认支持的数据类型"></a>默认支持的数据类型</h3><ul>
<li>request</li>
<li>response</li>
<li>session</li>
<li>Model</li>
<li>ModelMap</li>
<li>Map</li>
<li>基本数据类型</li>
<li>pojo类(属性名相同)</li>
<li>自定义参数类型  Converter<source,target><ul>
<li>时间注解方式：pojo属性@DateTimeFormat(pattern=”yyyy-MM-dd”)</li>
</ul>
</source,target></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Socket多线程]]></title>
      <url>/2016/09/15/Socket/</url>
      <content type="html"><![CDATA[<p>线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。程序员可以通过它进行多处理器编程，你可以使用多线程对运算密集型任务提速。</p>
<h2 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>正在运行的程序。确切的来说，当一个程序进入内存运行，即编程一个进程，进程是处于运行过程中的程序，并且具有一定独立功能</p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的。这个应用程序也可以称之为多线程程序。</p>
<h2 id="如何在java中实现线程"><a href="#如何在java中实现线程" class="headerlink" title="如何在java中实现线程"></a>如何在java中实现线程</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><ul>
<li>Thread类本质也实现了Runnable接口<blockquote>
<p><code>class Thread implements Runnable</code></p>
</blockquote>
</li>
<li><p>实现代码</p>
<ul>
<li><p>在自己的类直接继承Thread接口，并重写run()方法</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class MyThread extends Thread&#123;</div><div class="line">	public void run()&#123;</div><div class="line">		........</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在需要的地方启动线程</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyThread myThread1 = new MyThread();</div><div class="line">MyThread myThread2 = new MyThread();</div><div class="line">myThread1.start();</div><div class="line">myThread2.start();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ul>
<li><p>自己的类实现Runnable接口，重写run()方法</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class MyThread implements Runnable()&#123;</div><div class="line">	public void run()&#123;</div><div class="line">		.....;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyThread myThread = new MyThread();</div><div class="line">Thread thread = new Thread(myThread);</div><div class="line">thread.start();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用ExecutorService、Callable、Future实现有返回结果的多线程"><a href="#使用ExecutorService、Callable、Future实现有返回结果的多线程" class="headerlink" title="使用ExecutorService、Callable、Future实现有返回结果的多线程"></a>使用ExecutorService、Callable、Future实现有返回结果的多线程</h3><ul>
<li>ExecutorService、Callable、Future这个对象实际上都是属于Executor框架中的功能类</li>
<li><p>执行Callable任务后，可以获取一个Future对象，在该对象上调用get就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现有返回结果的多线程了</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> class MyCallable implements Callable&lt;Object&gt;&#123;</div><div class="line">	private String taskNum;</div><div class="line">	</div><div class="line">	MyCallable(String taskNum)&#123;</div><div class="line">		this.taskNum = taskNum;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Object call() throws Exception&#123;</div><div class="line">		System.out.println(&quot;&gt;&gt;&gt;&quot;+taskNum+&quot;任务开始&quot;);</div><div class="line">		Date dateTpm1 = new Date();</div><div class="line">		Thread.sleep(1000);</div><div class="line">		Date dateTmp2 = new Date();</div><div class="line">		long time = dateTmp2.getTime() - dateTemp1.getTime();</div><div class="line">		System.out.println(&quot;&gt;&gt;&gt;&quot;+taskNum+&quot;任务停止&quot;);</div><div class="line">		return taskNum+&quot;任务返回运行结果，当前任务时间【&quot;+time+&quot;】毫秒&quot;；</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Date date = new Date();</div><div class="line"></div><div class="line">int taskSize = 5;</div><div class="line">// 创建一个线程池</div><div class="line">ExecutorService pool = Executors.newFixedThreadPool(taskSize);</div><div class="line">// 创建多个有返回值的任务</div><div class="line">List&lt;Future&gt; list = new ArrayList&lt;Future&gt;();</div><div class="line"></div><div class="line">for(int i = 0 ; i &lt; taskSize ; i++)&#123;</div><div class="line">	Callable c = new MyCallable(i+&quot; &quot;);</div><div class="line">	// 执行任务时获取Future对象</div><div class="line">	Future f = pool.submit(c);</div><div class="line">	list.add(f);</div><div class="line">&#125;</div><div class="line">// 关闭线程池</div><div class="line">pool.shutdown();</div><div class="line">// 获取所有并发任务的运行结果	</div><div class="line">for(Future f : list)&#123;</div><div class="line">	// 从Future对象上获取任务的返回键，并输出到控制台</div><div class="line">	System.out.println(&quot;&gt;&gt;&gt;&quot;+f.get().toString());</div><div class="line">&#125;</div><div class="line">Date newDate = new Date();</div><div class="line"></div><div class="line">System.out.println(&quot;---程序结束运行---，程序运行时间【&quot;+(newDate.getTime() - date.getTime())+&quot;】毫秒&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用的创建线程的线程池"><a href="#常用的创建线程的线程池" class="headerlink" title="常用的创建线程的线程池"></a>常用的创建线程的线程池</h3><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>线程池的基本思想还是一种对象池的思想，开辟一块内存空间，里面存放了众多（未死亡）的线程，池中线程执行调度由池管理器来处理。当有线程任务时，从池中取一个，执行完成后线程对象归池，这样可以避免反复创建线程对象所带来的性能开销，节省了系统的资源。</p>
<h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><ul>
<li><p>newCachedThreadPool(可缓存线程池)</p>
<ul>
<li>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空间线程，若无可回收，则新建线程</li>
<li>特点<ol>
<li>工作线程的创建数量几乎没有限制（其实也有娴熟，数目为Integer.MAX_VALUE），这样可灵活的往线程池中添加线程</li>
<li>如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间（默认为1分钟），则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。</li>
<li>在使用CachedThreadPool时，一定要主义控制任务的数量，否则，由于大量线程同时运行，很有可能会造成系统瘫痪</li>
</ol>
</li>
</ul>
</li>
<li><p>newFixedThreadPool（指定工作线程数量的线程池。</p>
<ul>
<li>创建一个指定工作数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中</li>
<li>FixedThreadPool是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。</li>
</ul>
</li>
<li>newSingleThreadExecutor(单线程化的线程池)<ul>
<li>创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序（FIFO，LIFO，优先级）执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。</li>
</ul>
</li>
<li>newScheduleThreadPool（定长的线程池）<ul>
<li>创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。<h3 id="实现接口和集成线程类直接的不同"><a href="#实现接口和集成线程类直接的不同" class="headerlink" title="实现接口和集成线程类直接的不同"></a>实现接口和集成线程类直接的不同</h3></li>
</ul>
</li>
<li>接口可以避免由于java的单继承特性带来的局限</li>
<li>增强程序的健壮性，代码能够被多个线程共享，代码与数据是独立的</li>
<li>适合多个相同程序代码的线程区处理同一资源的情况</li>
</ul>
<h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p><img src="https://i.imgur.com/FwWhFc5.png" alt=""></p>
<ul>
<li>新建状态（NEW）<ul>
<li>当线程对象创建后，即进入了新建状态，如：Thread t = new MyThread();</li>
</ul>
</li>
<li>就绪状态（Runnable）<ul>
<li>当调用线程对象的star()方法后，线程即进入就绪状态。处于就绪状态的线程，只是说明线程已经做好了准备，随时等待CPU调度执行，并不是说执行了star方法，此线程就会立即执行。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程想要进入运行状态执行，首先必须处于就绪状态中；</li>
</ul>
</li>
<li>阻塞状态（Blocked）<ul>
<li>处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才有机会再次被CPU调用以进入到运行状态<ul>
<li>等待堵塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态</li>
<li>同步堵塞：线程在获取synchronized同步锁失败（因为锁被其他线程所占用），它会进入同步阻塞状态；</li>
<li>其他堵塞：通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li>
</ul>
</li>
</ul>
</li>
<li>死亡状态（Dead）<ul>
<li>线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>
</ul>
</li>
</ul>
<h2 id="常用的一些方法"><a href="#常用的一些方法" class="headerlink" title="常用的一些方法"></a>常用的一些方法</h2><ul>
<li>start<br>用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源</li>
<li>run<br>是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法提去执行具体的任务。注意，继承Thread类必须重写run方法,在run方法中定义具体要执行的任务</li>
<li>sleep（sleep(long millis)）</li>
<li>sleep(long mills,int nanoseconds) // 第二个参数是纳秒<br>sleep相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。<br>但是又一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象。</li>
<li>yield<br>调用yield方法会让当前线程交出CPU权限，让CPU去执行其他的线程。她跟sleep方法类似，同样不会释放锁。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让拥有相同优先级的线程CPU执行时间的机会。<blockquote>
<p>调用yield方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，她只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。</p>
</blockquote>
</li>
<li>join<br>中端其他线程的执行，等待调用join方法的线程结束，即使是主线程main也会被中断。<br>join()<br>join(long millis)    //参数为毫秒<br>join（long millis,int nanoseconds） //第二个参数是纳秒</li>
</ul>
<h2 id="多个线程之间的通信"><a href="#多个线程之间的通信" class="headerlink" title="多个线程之间的通信"></a>多个线程之间的通信</h2><ul>
<li>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同。通过一定的手断使各个线程能有效的利用资源。</li>
<li>通常情况下，一个次级线程要为主线程完成某种特定类型的任务，这就隐含着表示在主线程和次线程之间需要简历一个通信的通道。</li>
<li>一般情况下，又下面集中方法实现这种通信任务：使用全局变量、使用事件对象、使用消息。</li>
</ul>
<h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><h3 id="什么时候会出现线程安全问题"><a href="#什么时候会出现线程安全问题" class="headerlink" title="什么时候会出现线程安全问题"></a>什么时候会出现线程安全问题</h3><ul>
<li>在单线程中不会出现线程安全问题，而在多线程编程中，有可能会出现同时访问同一个资源的情况，这种资源可以是各种类型的资源：一个变量、一个对象、一个文件、一个数据库等。而当多个线程同时访问一个资源的时候，就会存在一个问题：由于每个线程执行的过程是不可控的，所以很可能导致最终的结果与实际上的愿望相违背或者直接导致程序出错</li>
<li>当多个线程执行一个方法，方法内部的局部变量并不是临界资源，因为方法是在栈上执行的，而java栈是线程私有的，因此不会产生线程安全问题。<h3 id="如何解决线程"><a href="#如何解决线程" class="headerlink" title="如何解决线程"></a>如何解决线程</h3></li>
<li>序列化访问临界资源，即在同一时刻，只能有一个线程访问临界资源，也称同步互斥访问。通常来说，是在访问临界资源的代码前面加一个锁，当访问完临界资源后释放锁，让其他线程继续访问。</li>
<li><p>两种方案实现同步互斥访问。</p>
<blockquote>
<p>将操作共享数据的代码行作为一个整体，同一时间只允许一个线程执行，执行过程中其他线程不能参与执行</p>
</blockquote>
<ul>
<li><p>synchronized</p>
<ul>
<li><p>同步方法</p>
<blockquote>
<p>有synchronized关键字修饰的方法，由于java的每个对象都有一个内置锁，当用此关键字修饰方法时，内置锁会保护整个方法，在调用该方法前，需要获得内置锁，否则就处于阻塞状态。</p>
</blockquote>
<ol>
<li>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能又一个线程得到执行。另一个线程必须等待当前执行完这个代码块以后才能执行该代码块。</li>
<li>然后，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</li>
<li>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其他synchronized(this)同步代码块的访问将被阻塞。（synchronized锁定所有的同步代码块，一旦阻塞，所有同步代码块都被阻塞）。</li>
<li>第三个例子同样使用其他同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其他线程对该object对象所有同步代码部分的访问都被暂时阻塞。（synchronized获取整个对象的锁，整个对象将被锁定）</li>
</ol>
</li>
</ul>
</li>
<li><p>同步代码块</p>
<blockquote>
<p>即又synchronized关键字修饰的语句块。被该关键字修饰的语句块会自动被加上内置锁，从而实现同步。</p>
</blockquote>
</li>
<li><p>lock</p>
<ul>
<li>jdk1.5之后出现的，并发包中新增了Lock接口以及相关实现类用来实现锁功能，lock接口提供的功能与synchronized类似的同步功能，但需要手动释放锁和获得锁。</li>
<li>lock接口却提供了锁的可操作性，可中断获取锁一级超时获得锁等</li>
<li>有两个非常强大的实现类重入锁和读写锁</li>
<li><p>如何使用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Lock lock = new ReentrantLock();</div><div class="line">Lock.lock();</div><div class="line">try&#123;</div><div class="line">	//可能会出现线程安全的操作</div><div class="line">&#125;finally&#123;</div><div class="line">	//一定在finally中释放锁</div><div class="line">	//也不能吧获取锁在try中进行，因为有可能在获取锁的时候抛出异常</div><div class="line">	</div><div class="line">	lock.ublock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>常用方法</p>
<ul>
<li>void lock()：获取锁，调用该方法当前线程将会获取锁，当锁获取后，该方法将返回。</li>
<li>void lockInterruptibly() throws InterruptedException 可中断获取锁，与lock()方法不同之处在于该方法会响应中断，即在锁的获取过程中可以中断当前线程</li>
<li>boolean tryLock()尝试非阻塞的获取锁，调用该方法立即返回，true表示获取到锁</li>
<li>boolean tryLock(long time,TimeUnit unit)throws InterruptedException超时获取锁，以下情况会返回：时间内获取到了锁，时间内被中断，时间到了没有获取到锁。</li>
<li>void unlock()释放锁</li>
</ul>
</li>
<li>实现类<ul>
<li>ReentrantLock排它锁：该锁在同一时刻只允许一个线程来访问</li>
<li>ReentranReadWriteLock读写锁<blockquote>
<p>在同一时刻允许可以又多个线程来访问，但在写线程访问时，所有的独显成和其他写线程被阻塞，读写锁维护了一对锁，一个读锁和一个写锁，通过读写锁分离，使得并发性相比一般的排他锁有了很大的提升。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>使用特殊域变量（Volatile）实现线程同步</p>
<blockquote>
<p>它的原理是每次要线程要访问volatile习俗hi的变量时都是从内存中读取，而不是缓存中读取，因此每个线程访问到的变量值都是一样的，这样就保证了同步。</p>
</blockquote>
<ul>
<li>volation关键字为域变量的访问提供了一种免锁机制</li>
<li>使用volatile修饰域相当于告诉虚拟机该域可能会被其他线程更新</li>
<li>因此每次使用该域就要重新计算，而不是使用寄存器中的值</li>
<li>volatile不会提供任何院子操作，它也不能用来修饰final类型的类</li>
</ul>
</li>
<li>使用局部变量<blockquote>
<p>如果使用ThreadLocal管理变量，则每一个使用该变量的线程都获得该变量的副本，副本之间相互独立，这样每一个线程都可以随意修改自己的变量副本，而不会对其他线程产生影响。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ol>
<li>只能同步方法，而不能同步变量和类</li>
<li>每个对象只有一个锁；当提到同步时，应该清楚在什么上同步。也就是说，在哪个对象上同步。</li>
<li>不必同步类中所有的方法，类可以同时拥有同步和非同步方法。</li>
<li>如果两个线程要执行一个类中的synchronized方法，并且两个线程使用相同的实例来调用方法，那么一次只能又一个线程能够执行方法，另一个需要等待，直到锁被释放，也就是说：如果一个线程在对象上获得一个锁，就没有任何其他线程可以进入（该对象的）类中的任何一个同步方法。</li>
<li>如果线程拥有同步和非同步方法，则非同步方法可以被多个线程自由访问而不受锁的限制。</li>
<li>线程睡眠时，它所持的任何锁都不会释放。</li>
<li>线程可以获得多个锁。比如，在一个对象的同步方法里面调用另外一个对象的同步方法，则获得了两个对象的同步锁。</li>
<li>同步损害并发性，应该尽可能缩小同步返回。同步不但可以同步整个方法，还可以同步方法中一部分代码块。</li>
<li>在使用同步代码块时候，应该指定在那个对象上同步，也就是说要获取哪个对象的锁。</li>
</ol>
<h2 id="lock接口和synchronized的区别"><a href="#lock接口和synchronized的区别" class="headerlink" title="lock接口和synchronized的区别"></a>lock接口和synchronized的区别</h2><ol>
<li>Lock是一个接口，而synchronized是java中的关键字，synchronized是内置的语言实现；</li>
<li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock（）去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</li>
<li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</li>
<li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到</li>
<li>Lock可以提高多个线程进行读操作的效率</li>
<li>在性能上来说，如果竞争资源不激烈，亮着的性能是差不多的，而当竞争资源非常激烈时（即又大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。Lock的操作域synchronized相比，灵活性更高，而且Lock提供多种方式获取锁，有Lock、ReadWriteLock接口，以及实现这两个接口的ReentrantLock类、ReentrantReadWriteLock类。</li>
</ol>
<h2 id="java中的wait和sleep方法有何不同"><a href="#java中的wait和sleep方法有何不同" class="headerlink" title="java中的wait和sleep方法有何不同"></a>java中的wait和sleep方法有何不同</h2><p>都能将线程状态变成等待状态</p>
<ul>
<li>sleep()状态，是属于Thread类中的。而wait()方法，则是属于Object类中的。</li>
<li>wait方法必须正在同步环境下使用。比如synchronized方法或者同步代码块。如果你不在同步条件下使用，会抛出IllegalMonitorStateException异常。另外，sleep方法不需要再同步条件下调用，你可以任意正常的使用。</li>
<li>调用wait()的时候方法会释放当前持有的锁，而sleep方法不会释放任何锁</li>
</ul>
<h2 id="编写java代码，解决生产者——消费者问题"><a href="#编写java代码，解决生产者——消费者问题" class="headerlink" title="编写java代码，解决生产者——消费者问题"></a>编写java代码，解决生产者——消费者问题</h2><h2 id="有T1、T2、T3三个线程，如何保证T2在T1执行完后执行，T3在T2执行完后窒息感？"><a href="#有T1、T2、T3三个线程，如何保证T2在T1执行完后执行，T3在T2执行完后窒息感？" class="headerlink" title="有T1、T2、T3三个线程，如何保证T2在T1执行完后执行，T3在T2执行完后窒息感？"></a>有T1、T2、T3三个线程，如何保证T2在T1执行完后执行，T3在T2执行完后窒息感？</h2><h2 id="什么是ThreadLocal类，怎么使用它"><a href="#什么是ThreadLocal类，怎么使用它" class="headerlink" title="什么是ThreadLocal类，怎么使用它"></a>什么是ThreadLocal类，怎么使用它</h2><ol>
<li>线程局部变量</li>
<li>为每一个使用变量的线程提供一个变量值的副本，是java中一种较为特殊的线程绑定机制，是每个线程都可以独立的改变自己的副本，而不会和其他线程的副本发生冲突</li>
<li>线程消失之后，其线程局部实例的所有副本都会被垃圾回收机制回收（除非存在对这些副本的其他引用）</li>
<li>实现思路：在ThreadLocal类中有一个MAP，用于存储每一个线程的变量的副本</li>
<li>使用方法：<ol>
<li>在多线程的类（如ThreadDemo类）中，创建一个ThreadLocal对象threadXxx，用来保存线程间需要隔离处理的对象xxx</li>
<li>在ThreadDemo，创建一个获取要隔离访问的数据的方法getXxx(),在方法中判断，若ThreadLocal对象为null时，应该new一个隔离访问类型的对象，并强制转换为要应用的类型。</li>
<li>在ThreadDemo类的run方法中，通过getXxx方法获取要操作的数据，这样可以保证每个线程对应一个数据对象，在任何时刻都操作的是这个对象。</li>
</ol>
</li>
</ol>
<h2 id="什么是死锁？如何解决死锁问题"><a href="#什么是死锁？如何解决死锁问题" class="headerlink" title="什么是死锁？如何解决死锁问题"></a>什么是死锁？如何解决死锁问题</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，他们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。<br>由于资源占用是互斥的，当某个进程提出申请资源后，使得有关进程在无歪理血族下，永远分配不到必须的资源而无法继续运行，这就产生了一种特殊现象死锁。</p>
<h3 id="死锁的发送具备的条件"><a href="#死锁的发送具备的条件" class="headerlink" title="死锁的发送具备的条件"></a>死锁的发送具备的条件</h3><ol>
<li>互斥条件</li>
<li>请求和保持条件</li>
<li>不剥夺条件</li>
<li>环路等待条件</li>
</ol>
<h3 id="如何解决死锁问题"><a href="#如何解决死锁问题" class="headerlink" title="如何解决死锁问题"></a>如何解决死锁问题</h3><ol>
<li>按同一顺序访问对象<blockquote>
<p>如果所有并发事务按同一顺序访问对象，则发生死锁的可能性会降低。例如：如果两个并发事务获得Supplier表上的锁，然后获得Part表上的锁，则在其中一个事务完成之前，另一个事务被阻塞在Supplier表上。第一个事务提交或回滚后，第二个事务继续进行。不发生死锁。将存储过程用于所有的数据修改可以标准化访问对象的顺序。</p>
</blockquote>
</li>
<li>避免事务中的用户交互避免事务中的用户交互<blockquote>
<p>避免编写包含用户交互的事务，因为运行没有用户交互的批处理的速度要圆圆快于用户手动响应查询的速度，例如答复应用程序请求参数的提示。例如，如果事务正在等待用户输入，而用户去吃无参了或者甚至回家过周末了，则用户将此事务挂起使之不能完成。这样将降低系统的吞吐量，因为事务持有的任何锁只有在事务提交或回滚时才会释放，即使不出现死锁的情况，访问同一资源的其他事务也会被阻塞，等待该事务完成。</p>
</blockquote>
</li>
<li>保持事务简短并在一个批处理中<blockquote>
<p>在同一数据库中并发执行多个需要长时间运行的事务时通常发生死锁。事务运行时间越长，其持有排它锁或更新锁的时间也就越长，从而堵塞了其他活动并可能导致死锁。包吃事务在一个批处理中，可以最小化事务的网络通信往返量，减少完成事务可能的延迟并释放锁。</p>
</blockquote>
</li>
<li>使用低隔离级别<blockquote>
<p>确定事务是否能在更低的隔离级别上运行，执行提交读允许事务读取另一个事务已读取（未修改）的数据，而不必等待第一个事务完成。使用较低的隔离级别（例如隔离读）而不使用较高的隔离级别（例如可串行读）可以缩短持有共享锁的时间，从而降低了锁定争夺。</p>
</blockquote>
</li>
<li>使用绑定连接<blockquote>
<p> 使用绑定连接同一应用程序锁打开的两个或多个连接可以相互合作，次级连接锁获得的任何锁可以象由住连接获得的锁那样持有，反之亦然，因此不会相互阻塞。</p>
</blockquote>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 基本集 </category>
            
        </categories>
        
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><p><strong>Misaniy</strong> </p>
<p>这个名字是因为她的名字是YUANSIYI，我从中抠了几个字符串，加上我的想念组合的。</p>
<p>上可陪领导逛街拎包吃喝玩乐，下可宅在家里追新番，热衷于研究新菜品和更优雅的代码，也没有忘记工作之余锻炼身体给自己未来投资，有一个非常有眼光的女朋友（这绝不是在夸我），也在努力成为一个优雅的<del>hentai</del>绅士。</p>
<p>热爱生活，热爱科技，爱小米，更爱小米的智能家居体系，有朝一日，我要让家里充满智能，充满<strong>GEEK</strong>的味道。</p>
<h2 id="这是哪里"><a href="#这是哪里" class="headerlink" title="这是哪里"></a>这是哪里</h2><p><strong>misaniy.cc</strong><br>这是我的博客小站，也是我的黄金屋。在我的代码之夜上，地上有数不清的咯脚的石子，我摸索着前行，背后总有一个人意味深长地让我带上他们。如果你听过这个故事，你也会像我一样，写这样一个博客，把一路的石子捡起来。</p>
<p>我会不时更新我的博客，在我代码上遇到问题，或者我觉得需要记录的时候</p>
<h2 id="怎么联系我"><a href="#怎么联系我" class="headerlink" title="怎么联系我"></a>怎么联系我</h2><p><strong>Github</strong>:<a href="http://github.com/misaniy" title="Github" target="_blank" rel="external">Misaniy</a><br><strong>Email</strong>:<a href="mailto:misaniy@hotmail.com" title="Email" target="_blank" rel="external">Misaniy</a><br><strong>Weibo</strong>:<a href="http://weibo.com/u/2879514745" title="Weobo" target="_blank" rel="external">为这美好的世界献上祝福</a><br><strong>Location</strong>：中国.重庆</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生活图]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
