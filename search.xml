<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[MyBatis框架小结]]></title>
      <url>/2017/10/31/MyBatis/</url>
      <content type="html"><![CDATA[<p>学习MyBatis的一些个人总结</p>
<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p> 1 导入jar包<br> 2 log4j.properties<br> 3 sqlMapConfig.xml<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">&lt;!-- </div><div class="line">	先加载property，再加载properties,后加载覆盖</div><div class="line">--&gt;</div><div class="line">&lt;properties resource=&quot;db.properties&quot;&gt;</div><div class="line">	&lt;property name=&quot;jdbc.driver&quot; value=&quot;AAA&quot;/&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line">&lt;!--</div><div class="line">	配置pojo别名</div><div class="line">--&gt;	</div><div class="line">&lt;typeAliases&gt;</div><div class="line">	&lt;!--&lt;typeAlias type=&quot;com.misaniy.po.User&quot; alias=&quot;user&quot; /&gt;--&gt;</div><div class="line">	&lt;!-- 单个配置typeAlias 扫描包package，不区分大小写 --&gt;</div><div class="line">	&lt;package name=&quot;com.misaniy.po&quot; /&gt;</div><div class="line">&lt;/typeAliases&gt;</div><div class="line">&lt;enviroments default=&quot;development&quot;&gt;</div><div class="line">	&lt;enviroment id=&quot;development&quot;&gt;</div><div class="line">		&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">		&lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">		&lt;/dataSource&gt;</div><div class="line">	&lt;/enviroment&gt;</div><div class="line">&lt;/enviroments&gt;</div><div class="line">&lt;mappers&gt;</div><div class="line">	&lt;!--</div><div class="line">		resource根据classpath查找，url绝对路径,class，接口全限定名（目录相同、名称一致、）、package扫描包</div><div class="line">		--&gt;</div><div class="line">	&lt;mapper class=&quot;com.misaniy.mapper.UserMapper&quot; /&gt;</div><div class="line">	&lt;mapper resource=&quot;XXX.xml&quot;&gt;</div><div class="line">	&lt;package name=&quot;com.misaniy.mapper&quot; /&gt;</div><div class="line">	&lt;mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>####Config.xml配置内容和顺序</p>
<ul>
<li>properties(属性)</li>
<li>settings(全局配置参数)</li>
<li>typeAliases(类型别名)</li>
<li>typeHandlers(类型处理器)</li>
<li>objectFactory(对象工厂)</li>
<li>plugins(插件)</li>
<li>enviroments（环境集合属性对象）<ul>
<li>enviroments(环境子属性对象)<br>  -transactionManager<br>  -dataSource</li>
</ul>
</li>
<li><p>mappers（映射器）</p>
<p>4 PO类<br>5 映射文件xxx.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- &lt;mapper namespace=&quot;test&quot;&gt; 传统--&gt;</div><div class="line">&lt;mapper namespace=&quot;com.misaniy.UserMapper&quot;/&gt;</div><div class="line">&lt;!-- 使用Mapper不需要DaoImpl --&gt;</div><div class="line">&lt;!-- 这里的Type使用的别名，类型由mybatis内部定制，pojo由config配置文件定制--&gt;</div><div class="line">&lt;select id=&quot;findUserByName&quot; parameterType=&quot;String&quot; resultType=&quot;user&quot;&gt;</div><div class="line">	select * from user where name like &apos;%$&#123;value&#125;%&apos;</div><div class="line">&lt;/select&gt;</div><div class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;user&quot;&gt;</div><div class="line">	&lt;selectKey keyProperty=&quot;id&quot; order=&quot;After&quot; resultType=&quot;Integer&quot;&gt;</div><div class="line">		select LAST_INSERT_ID()</div><div class="line">	&lt;/selectKey&gt;</div><div class="line">	insert into user(name) values(#&#123;name&#125;)</div><div class="line">&lt;/insert&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Mybatis解决jdbc的问题"><a href="#Mybatis解决jdbc的问题" class="headerlink" title="Mybatis解决jdbc的问题"></a>Mybatis解决jdbc的问题</h2><p>数据库链接和创建的频繁操作、sql硬编码、结果集封装到pojo、parameterType对输入参数的规范</p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringWebMvc小结]]></title>
      <url>/2017/10/13/SpringWebMvc/</url>
      <content type="html"><![CDATA[<p>学习SpringWebMvc的个人小结</p>
<h2 id="SpringWebMvc"><a href="#SpringWebMvc" class="headerlink" title="SpringWebMvc"></a>SpringWebMvc</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li>用户请求给前端控制器DispatcherServlet</li>
<li>前端控制器给HandlerMapping处理器映射器</li>
<li>处理器映射器根据映射找到Handler处理器</li>
<li>处理器返回ExcutionChain数据给前端控制器</li>
<li>前端控制器找到HandlerAdapter处理器适配器</li>
<li>处理器适配器找到处理器执行后返回ModelAndView给前端控制器</li>
<li>前端控制器把ModelAndView解析位Model和View，把Model赋值给View</li>
<li>HandlerMapping<ul>
<li>ExcutionChain</li>
</ul>
</li>
<li>HandlerAdapter<ul>
<li>ModelAndView</li>
</ul>
</li>
<li>视图解析器<ul>
<li>解析Model赋值给View</li>
</ul>
</li>
</ul>
<h3 id="SpringMvc-xml配置文件"><a href="#SpringMvc-xml配置文件" class="headerlink" title="SpringMvc.xml配置文件"></a>SpringMvc.xml配置文件</h3><ul>
<li>扫描Controller</li>
<li>&lt; mvc:annotation-driver/&gt;</li>
<li>视图解析器</li>
</ul>
<h3 id="默认支持的数据类型"><a href="#默认支持的数据类型" class="headerlink" title="默认支持的数据类型"></a>默认支持的数据类型</h3><ul>
<li>request</li>
<li>response</li>
<li>session</li>
<li>Model</li>
<li>ModelMap</li>
<li>Map</li>
<li>基本数据类型</li>
<li>pojo类(属性名相同)</li>
<li>自定义参数类型  Converter<source,target><ul>
<li>时间注解方式：pojo属性@DateTimeFormat(pattern=”yyyy-MM-dd”)</li>
</ul>
</source,target></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java7的新特性Paths,Files]]></title>
      <url>/2017/09/25/JAVA7%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BPath/</url>
      <content type="html"><![CDATA[<p>在使用lucene 5的时候，发现在lucene4时file的地方用到了Path,发现这是JAVA7的新特性，于是查找相关文档，发现在IO方面,java7新增了Paths,Files工具类，发现异常强大，小结一下。</p>
<h3 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h3><p><strong>Path是用来表示文件路径和文件</strong>，可以有多种方法来构造一个Path对象来表示一个文件路径或一个文件</p>
<ul>
<li>在Paths类里有两个static方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Path get(String first,String...more) &#123; </div><div class="line">	return FileSystems.getDefault().getPath(first,more);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Path get(Url url)</div></pre></td></tr></table></figure>
<ul>
<li>得到三种构造方式(以源文件d:/demo.txt为例)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Path path1 = Paths.get(&quot;d:/&quot;,&quot;demo.txt&quot;);</div><div class="line">Path path2 = Paths.get(&quot;d:/demo.txt&quot;);</div><div class="line">Path path3 = Paths.get(URI.create(&quot;file:///d:/demo.txt&quot;));</div><div class="line">Path path4 = FileSystems.getDefault().getPath(&quot;d:/&quot;,&quot;demo.txt&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>File和Path、File和URI之间的转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;d:/demo.txt&quot;);</div><div class="line"></div><div class="line">Path path = file.toPath();</div><div class="line">File file2 = path.toFile();</div><div class="line">URI uri = file.toURI();</div></pre></td></tr></table></figure>
<ul>
<li>读取文件属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(url);</div><div class="line">path.getFileName();</div><div class="line">path.getParent();</div><div class="line">//根目录</div><div class="line">path.getRoot();</div><div class="line">//目录级数(D:\xxx\xxx\xxx\demo.txt   4)</div><div class="line">path.getNameCount();</div></pre></td></tr></table></figure>
<ul>
<li>创建一个文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(&quot;C:\demo.txt&quot;);</div><div class="line">if(Files.exists(path))</div><div class="line">	Files.createFile(path);</div></pre></td></tr></table></figure>
<ul>
<li>Files.newBufferWriter写入文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BufferedWriter writer = Files.newBufferedWriter(Paths.get(&quot;D:\\demo.txt&quot;),Charset.forName(&quot;UTF-8&quot;));</div><div class="line">        writer.write(&quot;测试中文&quot;);</div><div class="line">        writer.flush();</div><div class="line">        writer.close();</div></pre></td></tr></table></figure>
<ul>
<li>Files.newBufferWriter读取文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BufferedReader reader = Files.newBufferedReader(Paths.get(&quot;D:\\demo.txt&quot;), Charset.forName(&quot;UTF-8&quot;));</div><div class="line">        String str = null;</div><div class="line">        while((str = reader.readLine())!=null)&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">        reader.close();</div></pre></td></tr></table></figure>
<ul>
<li>遍历文件夹,这里只遍历当前目录，不遍历子目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(&quot;D:\\dir&quot;);</div><div class="line">        DirectoryStream&lt;Path&gt; paths = Files.newDirectoryStream(path);</div><div class="line">        for(Path p : paths)&#123;</div><div class="line">            System.out.println(p.getFileName());</div><div class="line">        &#125;	</div><div class="line"></div><div class="line"></div><div class="line">DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(Paths.get(&quot;D:\\dir&quot;));</div><div class="line">       Iterator&lt;Path&gt; ite = stream.iterator();</div><div class="line">       while (ite.hasNext())&#123;</div><div class="line">           Path path = ite.next();</div><div class="line">           System.out.println(path.getFileName());</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<ul>
<li>要遍历子目录，在java7前需要用递归，而java7的Files提供了walkFileTree()方法，这个在另一篇文章写到</li>
</ul>
<h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><ul>
<li>创建目录和文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.createDirectories(Paths.get(&quot;D://dir&quot;));</div><div class="line">if(!Files.exists(Paths.get(&quot;D://dir&quot;)))</div><div class="line">	Files.createFile(Paths.get(&quot;D://dir/demo.txt&quot;))</div></pre></td></tr></table></figure>
<ul>
<li>文件复制</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//Files.copy(Source,Target,CopyOptions)</div><div class="line">	</div><div class="line">	//StandardCopyOption</div><div class="line">	//REPLACE_EXISTING 如果存在替换</div><div class="line">	//COPY_ATTRIBUTES 复制</div><div class="line">	//ATOMIC_MOVE Move the file as an atomic file system operation.</div><div class="line"></div><div class="line">//Files.copy(Source,OutputStream)</div><div class="line"></div><div class="line">//Files.copy(InputStream,Target,CopOption)</div><div class="line"></div><div class="line">Files.copy(Paths.get(&quot;C://Source.txt&quot;,Paths.get(&quot;D://Target.txt&quot;,StandardCopyOption.COPY_ATTRIBUTES)));</div></pre></td></tr></table></figure>
<ul>
<li>读取文件属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(url);</div><div class="line">//最后一次修改时间</div><div class="line">   System.out.println(Files.getLastModifiedTime(path));</div><div class="line">   System.out.println(Files.size(path));</div><div class="line">//是否为一个连接</div><div class="line">   System.out.println(Files.isSymbolicLink(path));</div><div class="line">   System.out.println(Files.isDirectory(path));</div><div class="line">//指定属性，*表全部</div><div class="line">   System.out.println(Files.readAttributes(path,&quot;*&quot;));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[could not initialize proxy - noSession]]></title>
      <url>/2017/09/13/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>failed to lazily initialize a collection of role: com.misaniy.xxx, could not initialize proxy - no Session延迟加载异常</p>
<h2 id="解决方案有两种"><a href="#解决方案有两种" class="headerlink" title="解决方案有两种"></a>解决方案有两种</h2><h3 id="其一，在web-xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类"><a href="#其一，在web-xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类" class="headerlink" title="其一，在web.xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类"></a>其一，在web.xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;</div><div class="line">	&lt;filter-class&gt;org.springframework.orm.jpa.support.OpenEntityManagerInviewFilter&lt;/filter-class&gt;</div><div class="line">	&lt;!-- 如果你的sessionFactory不是叫sessionFactory，需要配置如下--&gt;</div><div class="line">	&lt;init-param&gt;</div><div class="line">		&lt;param-name&gt;sessionFactoryBeanName&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;&#123;Your Session Factory Name&#125;&lt;/param-value&gt;</div><div class="line">	&lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure>
<h3 id="其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory-比如我用的SPRING-DATA-JPA，就用如下方法"><a href="#其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory-比如我用的SPRING-DATA-JPA，就用如下方法" class="headerlink" title="其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory,比如我用的SPRING DATA JPA，就用如下方法"></a>其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory,比如我用的SPRING DATA JPA，就用如下方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@JSON(serialize = false)</div><div class="line">public XXX getXXX()&#123;</div><div class="line">	return XXX;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Bean类找到你的延迟加载的数据，没有使用到就使用该注解</p>
]]></content>
      
        <categories>
            
            <category> 报错集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux误删除了备份的数据库]]></title>
      <url>/2017/09/13/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E8%A2%AB%E5%88%A0%E9%99%A4oracle%20initialization%20or%20shutdown%20in%20progress/</url>
      <content type="html"><![CDATA[<p>延迟加载异常：failed to lazily initialize a collection of role: com.misaniy.bos.domain.base.Courier.fixedAreas, could not initialize proxy - no Session</p>
<h2 id="reason：误删除了备份的数据库"><a href="#reason：误删除了备份的数据库" class="headerlink" title="reason：误删除了备份的数据库"></a>reason：误删除了备份的数据库</h2><h2 id="resolve："><a href="#resolve：" class="headerlink" title="resolve："></a>resolve：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sqlplus /nolog</div><div class="line">//使用数据库命令模式</div><div class="line">connect system/root as sysdba</div><div class="line">//连接数据库</div><div class="line">SQL&gt;shutdown normal</div><div class="line">//关闭数据库oracle服务</div><div class="line">SQL&gt;startup mount</div><div class="line">//重新启动Oracle服务</div><div class="line">SQL&gt;alter database open;</div><div class="line">//打开数据库</div><div class="line"></div><div class="line">//SQL&gt;alter database datafile 5 offline drop 若出现错误</div><div class="line"></div><div class="line">SQL&gt;alter database open;</div><div class="line">//重新更改数据库的open</div><div class="line">SQL&gt;startup</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 报错集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle和tomcat端口冲突]]></title>
      <url>/2017/09/12/oracle%E4%B8%8Etomcat%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/</url>
      <content type="html"><![CDATA[<p>Oracle XE http与tomcat端口冲突8080</p>
<h2 id="reason："><a href="#reason：" class="headerlink" title="reason："></a>reason：</h2><p>oracle与tomcat端口8080冲突，我们可以修改任意一个端口；</p>
<h2 id="resolve："><a href="#resolve：" class="headerlink" title="resolve："></a>resolve：</h2><h3 id="修改oracle"><a href="#修改oracle" class="headerlink" title="修改oracle"></a>修改oracle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sqlplus system/root</div><div class="line"></div><div class="line">SQL&gt;call dbms_xdb.sethttpport(&apos;8082&apos;);</div></pre></td></tr></table></figure>
<h3 id="修改tomcat，这里由于用了maven-所以直接安装tomcat7插件"><a href="#修改tomcat，这里由于用了maven-所以直接安装tomcat7插件" class="headerlink" title="修改tomcat，这里由于用了maven,所以直接安装tomcat7插件"></a>修改tomcat，这里由于用了maven,所以直接安装tomcat7插件</h3><p>Maven —&gt; build plugin  —-&gt;tomcat7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">&lt;gourpId&gt;org.apache.tomact.maven&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.2&lt;/version&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;port&gt;8081&lt;/port&gt;</div><div class="line">	&lt;path&gt;/&lt;/path&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>Run As —&gt; Maven Install<br>Run As —&gt; Maven Build… tomcat7:run</p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Lucene和solr]]></title>
      <url>/2017/04/27/%E6%A3%80%E7%B4%A2%E5%B7%A5%E5%85%B7Lucene%E5%92%8Csolr/</url>
      <content type="html"><![CDATA[<p>SQL语句的like会搜索大量不相关的内容，不走索引，且，存在资源浪费。这时我们就需要用到全文检索。</p>
<h2 id="Lucene和solr"><a href="#Lucene和solr" class="headerlink" title="Lucene和solr"></a>Lucene和solr</h2><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>了解Lucene之前，我们需要清楚全文检索的概念。</p>
<p>生活中的数据分为三种。</p>
<ul>
<li><strong>结构化数据</strong>：具有固定格式或有限长度的数据，如数据库，元数据等。</li>
<li><strong>非结构化数据</strong>：不定长度或无固定格式的数据，如邮件，word文档等。</li>
<li>半结构化数据：根据需要可以按结构化数据处理，也可抽取出纯文本按非结构化数据来处理。</li>
</ul>
<p>对应的搜索分为两种。</p>
<ul>
<li><strong>对结构化数据的搜索</strong>：sql语句、windows搜索文件名、类型、修改时间等</li>
<li><strong>对非结构化数据的搜索</strong>：windwos搜索文件内容、linux的grep,搜索引擎的搜索等</li>
</ul>
<p>对非结构化数据搜索即对<strong>全文数据的搜索</strong>分为两种：</p>
<ul>
<li><strong>顺序扫描法</strong>：假设寻找某个字符串的文件，就是一个文档一个文档读，然后每个文档从头读到尾，Linux下的grep就是这种方式，小数据量可以使用，但对于大量数据，就很慢了。</li>
<li><strong>全文检索</strong>：将非结构化数据中的一部分信息提取出来，重新组织，使其变为结构化数据，我们称之为索引，而这种<strong>先建立索引，再搜索的过程就叫全文检索</strong>。</li>
</ul>
<p>对应的创建<strong>索引</strong>方式分三种。</p>
<blockquote>
<p>索引：加快数据搜索的一种数据结构</p>
</blockquote>
<ul>
<li><strong>I/O流</strong>：对于本地文件创建索引。</li>
<li><strong>爬虫</strong>：模拟访问URL，获取网页数据，搜索引擎使用。</li>
<li><strong>SQL搜索</strong>：对于存放在数据库的数据使用。</li>
</ul>
<h4 id="如何创建索引"><a href="#如何创建索引" class="headerlink" title="如何创建索引"></a>如何创建索引</h4><ol>
<li>源文档Document<ul>
<li>文档中包括一个一个域(Field)[file_name,file_path,file_size,file_content等]</li>
</ul>
</li>
<li>分词组件Tokenizer得到词元Token<ul>
<li>将源文档分词</li>
<li>去除标点</li>
<li>去除停词</li>
</ul>
</li>
<li>处理组件LinguisticProcessor得到词Term<ul>
<li>变为小写</li>
<li>缩减位词根</li>
<li>转变为词根 </li>
</ul>
</li>
<li>索引组件Indexer<ul>
<li>用词Term创建字典</li>
<li>对字典按字母顺序排序</li>
<li>合并相同的词Term成为倒排索引(Posting List)</li>
</ul>
</li>
</ol>
<p><img src="https://i.imgur.com/4HCyRk6.jpg" alt="倒排索引"></p>
<blockquote>
<p>倒排索引：从字符串到文件的映射是文件到字符串映射的反向过程，所以这种索引称为倒排索引</p>
</blockquote>
<h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3>]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><p><strong>Misaniy</strong> </p>
<p>这个名字是因为她的名字是YUANSIYI，我从中抠了几个字符串，加上我的想念组合的。</p>
<p>上可陪领导逛街拎包吃喝玩乐，下可宅在家里追新番，热衷于研究新菜品和更优雅的代码，也没有忘记工作之余锻炼身体给自己未来投资，有一个非常有眼光的女朋友（这绝不是在夸我），也在努力成为一个优雅的<del>hentai</del>绅士。</p>
<p>热爱生活，热爱科技，爱小米，更爱小米的智能家居体系，有朝一日，我要让家里充满智能，充满<strong>GEEK</strong>的味道。</p>
<h2 id="这是哪里"><a href="#这是哪里" class="headerlink" title="这是哪里"></a>这是哪里</h2><p><strong>misaniy.cc</strong><br>这是我的博客小站，也是我的黄金屋。在我的代码之夜上，地上有数不清的咯脚的石子，我摸索着前行，背后总有一个人意味深长地让我带上他们。如果你听过这个故事，你也会像我一样，写这样一个博客，把一路的石子捡起来。</p>
<p>我会不时更新我的博客，在我代码上遇到问题，或者我觉得需要记录的时候</p>
<h2 id="怎么联系我"><a href="#怎么联系我" class="headerlink" title="怎么联系我"></a>怎么联系我</h2><p><strong>Github</strong>:<a href="http://github.com/misaniy" title="Github" target="_blank" rel="external">Misaniy</a><br><strong>Email</strong>:<a href="mailto:misaniy@hotmail.com" title="Email" target="_blank" rel="external">Misaniy</a><br><strong>Weibo</strong>:<a href="http://weibo.com/u/2879514745" title="Weobo" target="_blank" rel="external">为这美好的世界献上祝福</a><br><strong>Location</strong>：中国.重庆</p>
]]></content>
    </entry>
    
  
</search>
