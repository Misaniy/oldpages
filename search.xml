<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[MyBatis框架小结]]></title>
      <url>/2017/10/31/MyBatis/</url>
      <content type="html"><![CDATA[<p>学习MyBatis的一些个人总结</p>
<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p> 1 导入jar包<br> 2 log4j.properties<br> 3 sqlMapConfig.xml<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">&lt;!-- </div><div class="line">	先加载property，再加载properties,后加载覆盖</div><div class="line">--&gt;</div><div class="line">&lt;properties resource=&quot;db.properties&quot;&gt;</div><div class="line">	&lt;property name=&quot;jdbc.driver&quot; value=&quot;AAA&quot;/&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line">&lt;!--</div><div class="line">	配置pojo别名</div><div class="line">--&gt;	</div><div class="line">&lt;typeAliases&gt;</div><div class="line">	&lt;!--&lt;typeAlias type=&quot;com.misaniy.po.User&quot; alias=&quot;user&quot; /&gt;--&gt;</div><div class="line">	&lt;!-- 单个配置typeAlias 扫描包package，不区分大小写 --&gt;</div><div class="line">	&lt;package name=&quot;com.misaniy.po&quot; /&gt;</div><div class="line">&lt;/typeAliases&gt;</div><div class="line">&lt;enviroments default=&quot;development&quot;&gt;</div><div class="line">	&lt;enviroment id=&quot;development&quot;&gt;</div><div class="line">		&lt;transactionManager type=&quot;JDBC&quot; /&gt;</div><div class="line">		&lt;dataSource type=&quot;POOLED&quot;&gt;</div><div class="line">		&lt;/dataSource&gt;</div><div class="line">	&lt;/enviroment&gt;</div><div class="line">&lt;/enviroments&gt;</div><div class="line">&lt;mappers&gt;</div><div class="line">	&lt;!--</div><div class="line">		resource根据classpath查找，url绝对路径,class，接口全限定名（目录相同、名称一致、）、package扫描包</div><div class="line">		--&gt;</div><div class="line">	&lt;mapper class=&quot;com.misaniy.mapper.UserMapper&quot; /&gt;</div><div class="line">	&lt;mapper resource=&quot;XXX.xml&quot;&gt;</div><div class="line">	&lt;package name=&quot;com.misaniy.mapper&quot; /&gt;</div><div class="line">	&lt;mappers&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>####Config.xml配置内容和顺序</p>
<ul>
<li>properties(属性)</li>
<li>settings(全局配置参数)</li>
<li>typeAliases(类型别名)</li>
<li>typeHandlers(类型处理器)</li>
<li>objectFactory(对象工厂)</li>
<li>plugins(插件)</li>
<li>enviroments（环境集合属性对象）<ul>
<li>enviroments(环境子属性对象)<br>  -transactionManager<br>  -dataSource</li>
</ul>
</li>
<li><p>mappers（映射器）</p>
<p>4 PO类<br>5 映射文件xxx.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- &lt;mapper namespace=&quot;test&quot;&gt; 传统--&gt;</div><div class="line">&lt;mapper namespace=&quot;com.misaniy.UserMapper&quot;/&gt;</div><div class="line">&lt;!-- 使用Mapper不需要DaoImpl --&gt;</div><div class="line">&lt;!-- 这里的Type使用的别名，类型由mybatis内部定制，pojo由config配置文件定制--&gt;</div><div class="line">&lt;select id=&quot;findUserByName&quot; parameterType=&quot;String&quot; resultType=&quot;user&quot;&gt;</div><div class="line">	select * from user where name like &apos;%$&#123;value&#125;%&apos;</div><div class="line">&lt;/select&gt;</div><div class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;user&quot;&gt;</div><div class="line">	&lt;selectKey keyProperty=&quot;id&quot; order=&quot;After&quot; resultType=&quot;Integer&quot;&gt;</div><div class="line">		select LAST_INSERT_ID()</div><div class="line">	&lt;/selectKey&gt;</div><div class="line">	insert into user(name) values(#&#123;name&#125;)</div><div class="line">&lt;/insert&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Mybatis解决jdbc的问题"><a href="#Mybatis解决jdbc的问题" class="headerlink" title="Mybatis解决jdbc的问题"></a>Mybatis解决jdbc的问题</h2><p>数据库链接和创建的频繁操作、sql硬编码、结果集封装到pojo、parameterType对输入参数的规范</p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringWebMvc小结]]></title>
      <url>/2017/10/13/SpringWebMvc/</url>
      <content type="html"><![CDATA[<p>学习SpringWebMvc的个人小结</p>
<h2 id="SpringWebMvc"><a href="#SpringWebMvc" class="headerlink" title="SpringWebMvc"></a>SpringWebMvc</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li>用户请求给前端控制器DispatcherServlet</li>
<li>前端控制器给HandlerMapping处理器映射器</li>
<li>处理器映射器根据映射找到Handler处理器</li>
<li>处理器返回ExcutionChain数据给前端控制器</li>
<li>前端控制器找到HandlerAdapter处理器适配器</li>
<li>处理器适配器找到处理器执行后返回ModelAndView给前端控制器</li>
<li>前端控制器把ModelAndView解析位Model和View，把Model赋值给View</li>
<li>HandlerMapping<ul>
<li>ExcutionChain</li>
</ul>
</li>
<li>HandlerAdapter<ul>
<li>ModelAndView</li>
</ul>
</li>
<li>视图解析器<ul>
<li>解析Model赋值给View</li>
</ul>
</li>
</ul>
<h3 id="SpringMvc-xml配置文件"><a href="#SpringMvc-xml配置文件" class="headerlink" title="SpringMvc.xml配置文件"></a>SpringMvc.xml配置文件</h3><ul>
<li>扫描Controller</li>
<li>&lt; mvc:annotation-driver/&gt;</li>
<li>视图解析器</li>
</ul>
<h3 id="默认支持的数据类型"><a href="#默认支持的数据类型" class="headerlink" title="默认支持的数据类型"></a>默认支持的数据类型</h3><ul>
<li>request</li>
<li>response</li>
<li>session</li>
<li>Model</li>
<li>ModelMap</li>
<li>Map</li>
<li>基本数据类型</li>
<li>pojo类(属性名相同)</li>
<li>自定义参数类型  Converter<source,target><ul>
<li>时间注解方式：pojo属性@DateTimeFormat(pattern=”yyyy-MM-dd”)</li>
</ul>
</source,target></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java7的新特性Paths,Files]]></title>
      <url>/2017/09/25/JAVA7PathsFiles/</url>
      <content type="html"><![CDATA[<p>在使用lucene 5的时候，发现在lucene4时file的地方用到了Path,发现这是JAVA7的新特性，于是查找相关文档，发现在IO方面,java7新增了Paths,Files工具类，发现异常强大，小结一下。</p>
<h3 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h3><p><strong>Path是用来表示文件路径和文件</strong>，可以有多种方法来构造一个Path对象来表示一个文件路径或一个文件</p>
<ul>
<li>在Paths类里有两个static方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Path get(String first,String...more) &#123; </div><div class="line">	return FileSystems.getDefault().getPath(first,more);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static Path get(Url url)</div></pre></td></tr></table></figure>
<ul>
<li>得到三种构造方式(以源文件d:/demo.txt为例)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Path path1 = Paths.get(&quot;d:/&quot;,&quot;demo.txt&quot;);</div><div class="line">Path path2 = Paths.get(&quot;d:/demo.txt&quot;);</div><div class="line">Path path3 = Paths.get(URI.create(&quot;file:///d:/demo.txt&quot;));</div><div class="line">Path path4 = FileSystems.getDefault().getPath(&quot;d:/&quot;,&quot;demo.txt&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>File和Path、File和URI之间的转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File file = new File(&quot;d:/demo.txt&quot;);</div><div class="line"></div><div class="line">Path path = file.toPath();</div><div class="line">File file2 = path.toFile();</div><div class="line">URI uri = file.toURI();</div></pre></td></tr></table></figure>
<ul>
<li>读取文件属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(url);</div><div class="line">path.getFileName();</div><div class="line">path.getParent();</div><div class="line">//根目录</div><div class="line">path.getRoot();</div><div class="line">//目录级数(D:\xxx\xxx\xxx\demo.txt   4)</div><div class="line">path.getNameCount();</div></pre></td></tr></table></figure>
<ul>
<li>创建一个文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(&quot;C:\demo.txt&quot;);</div><div class="line">if(Files.exists(path))</div><div class="line">	Files.createFile(path);</div></pre></td></tr></table></figure>
<ul>
<li>Files.newBufferWriter写入文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BufferedWriter writer = Files.newBufferedWriter(Paths.get(&quot;D:\\demo.txt&quot;),Charset.forName(&quot;UTF-8&quot;));</div><div class="line">        writer.write(&quot;测试中文&quot;);</div><div class="line">        writer.flush();</div><div class="line">        writer.close();</div></pre></td></tr></table></figure>
<ul>
<li>Files.newBufferWriter读取文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BufferedReader reader = Files.newBufferedReader(Paths.get(&quot;D:\\demo.txt&quot;), Charset.forName(&quot;UTF-8&quot;));</div><div class="line">        String str = null;</div><div class="line">        while((str = reader.readLine())!=null)&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">        reader.close();</div></pre></td></tr></table></figure>
<ul>
<li>遍历文件夹,这里只遍历当前目录，不遍历子目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(&quot;D:\\dir&quot;);</div><div class="line">        DirectoryStream&lt;Path&gt; paths = Files.newDirectoryStream(path);</div><div class="line">        for(Path p : paths)&#123;</div><div class="line">            System.out.println(p.getFileName());</div><div class="line">        &#125;	</div><div class="line"></div><div class="line"></div><div class="line">DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(Paths.get(&quot;D:\\dir&quot;));</div><div class="line">       Iterator&lt;Path&gt; ite = stream.iterator();</div><div class="line">       while (ite.hasNext())&#123;</div><div class="line">           Path path = ite.next();</div><div class="line">           System.out.println(path.getFileName());</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<ul>
<li>要遍历子目录，在java7前需要用递归，而java7的Files提供了walkFileTree()方法，这个在另一篇文章写到</li>
</ul>
<h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><ul>
<li>创建目录和文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Files.createDirectories(Paths.get(&quot;D://dir&quot;));</div><div class="line">if(!Files.exists(Paths.get(&quot;D://dir&quot;)))</div><div class="line">	Files.createFile(Paths.get(&quot;D://dir/demo.txt&quot;))</div></pre></td></tr></table></figure>
<ul>
<li>文件复制</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//Files.copy(Source,Target,CopyOptions)</div><div class="line">	</div><div class="line">	//StandardCopyOption</div><div class="line">	//REPLACE_EXISTING 如果存在替换</div><div class="line">	//COPY_ATTRIBUTES 复制</div><div class="line">	//ATOMIC_MOVE Move the file as an atomic file system operation.</div><div class="line"></div><div class="line">//Files.copy(Source,OutputStream)</div><div class="line"></div><div class="line">//Files.copy(InputStream,Target,CopOption)</div><div class="line"></div><div class="line">Files.copy(Paths.get(&quot;C://Source.txt&quot;,Paths.get(&quot;D://Target.txt&quot;,StandardCopyOption.COPY_ATTRIBUTES)));</div></pre></td></tr></table></figure>
<ul>
<li>读取文件属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Path path = Paths.get(url);</div><div class="line">//最后一次修改时间</div><div class="line">   System.out.println(Files.getLastModifiedTime(path));</div><div class="line">   System.out.println(Files.size(path));</div><div class="line">//是否为一个连接</div><div class="line">   System.out.println(Files.isSymbolicLink(path));</div><div class="line">   System.out.println(Files.isDirectory(path));</div><div class="line">//指定属性，*表全部</div><div class="line">   System.out.println(Files.readAttributes(path,&quot;*&quot;));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[could not initialize proxy - noSession]]></title>
      <url>/2017/09/13/lazily/</url>
      <content type="html"><![CDATA[<p>failed to lazily initialize a collection of role: com.misaniy.xxx, could not initialize proxy - no Session延迟加载异常</p>
<h2 id="解决方案有两种"><a href="#解决方案有两种" class="headerlink" title="解决方案有两种"></a>解决方案有两种</h2><h3 id="其一，在web-xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类"><a href="#其一，在web-xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类" class="headerlink" title="其一，在web.xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类"></a>其一，在web.xml中配置Spring的OpenSessionInViewFilter，确保服务器端的逻辑执行完后再关闭session，这是针对hibernate的支持类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;</div><div class="line">	&lt;filter-class&gt;org.springframework.orm.jpa.support.OpenEntityManagerInviewFilter&lt;/filter-class&gt;</div><div class="line">	&lt;!-- 如果你的sessionFactory不是叫sessionFactory，需要配置如下--&gt;</div><div class="line">	&lt;init-param&gt;</div><div class="line">		&lt;param-name&gt;sessionFactoryBeanName&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;&#123;Your Session Factory Name&#125;&lt;/param-value&gt;</div><div class="line">	&lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure>
<h3 id="其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory-比如我用的SPRING-DATA-JPA，就用如下方法"><a href="#其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory-比如我用的SPRING-DATA-JPA，就用如下方法" class="headerlink" title="其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory,比如我用的SPRING DATA JPA，就用如下方法"></a>其二，上面方法是hibernate的支持类，如果你配置的不是sessionFactory,比如我用的SPRING DATA JPA，就用如下方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@JSON(serialize = false)</div><div class="line">public XXX getXXX()&#123;</div><div class="line">	return XXX;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Bean类找到你的延迟加载的数据，没有使用到就使用该注解</p>
]]></content>
      
        <categories>
            
            <category> 报错集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux误删除了备份的数据库]]></title>
      <url>/2017/09/13/OracleBankDelete/</url>
      <content type="html"><![CDATA[<p>延迟加载异常：failed to lazily initialize a collection of role: com.misaniy.bos.domain.base.Courier.fixedAreas, could not initialize proxy - no Session</p>
<h2 id="reason：误删除了备份的数据库"><a href="#reason：误删除了备份的数据库" class="headerlink" title="reason：误删除了备份的数据库"></a>reason：误删除了备份的数据库</h2><h2 id="resolve："><a href="#resolve：" class="headerlink" title="resolve："></a>resolve：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sqlplus /nolog</div><div class="line">//使用数据库命令模式</div><div class="line">connect system/root as sysdba</div><div class="line">//连接数据库</div><div class="line">SQL&gt;shutdown normal</div><div class="line">//关闭数据库oracle服务</div><div class="line">SQL&gt;startup mount</div><div class="line">//重新启动Oracle服务</div><div class="line">SQL&gt;alter database open;</div><div class="line">//打开数据库</div><div class="line"></div><div class="line">//SQL&gt;alter database datafile 5 offline drop 若出现错误</div><div class="line"></div><div class="line">SQL&gt;alter database open;</div><div class="line">//重新更改数据库的open</div><div class="line">SQL&gt;startup</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 报错集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle和tomcat端口冲突]]></title>
      <url>/2017/09/12/PortException/</url>
      <content type="html"><![CDATA[<p>Oracle XE http与tomcat端口冲突8080</p>
<h2 id="reason："><a href="#reason：" class="headerlink" title="reason："></a>reason：</h2><p>oracle与tomcat端口8080冲突，我们可以修改任意一个端口；</p>
<h2 id="resolve："><a href="#resolve：" class="headerlink" title="resolve："></a>resolve：</h2><h3 id="修改oracle"><a href="#修改oracle" class="headerlink" title="修改oracle"></a>修改oracle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sqlplus system/root</div><div class="line"></div><div class="line">SQL&gt;call dbms_xdb.sethttpport(&apos;8082&apos;);</div></pre></td></tr></table></figure>
<h3 id="修改tomcat，这里由于用了maven-所以直接安装tomcat7插件"><a href="#修改tomcat，这里由于用了maven-所以直接安装tomcat7插件" class="headerlink" title="修改tomcat，这里由于用了maven,所以直接安装tomcat7插件"></a>修改tomcat，这里由于用了maven,所以直接安装tomcat7插件</h3><p>Maven —&gt; build plugin  —-&gt;tomcat7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">&lt;gourpId&gt;org.apache.tomact.maven&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.2&lt;/version&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;port&gt;8081&lt;/port&gt;</div><div class="line">	&lt;path&gt;/&lt;/path&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>Run As —&gt; Maven Install<br>Run As —&gt; Maven Build… tomcat7:run</p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[全文检索和Lucene]]></title>
      <url>/2017/04/27/Full-Context/</url>
      <content type="html"><![CDATA[<p>SQL语句的like会搜索大量不相关的内容，不走索引，且，存在资源浪费。这时我们就需要用到全文检索。</p>
<h2 id="全文检索和Lucene"><a href="#全文检索和Lucene" class="headerlink" title="全文检索和Lucene"></a>全文检索和Lucene</h2><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>了解Lucene之前，我们需要清楚全文检索的概念。</p>
<p>生活中的数据分为三种。</p>
<ul>
<li><strong>结构化数据</strong>：具有固定格式或有限长度的数据，如数据库，元数据等。</li>
<li><strong>非结构化数据</strong>：不定长度或无固定格式的数据，如邮件，word文档等。</li>
<li>半结构化数据：根据需要可以按结构化数据处理，也可抽取出纯文本按非结构化数据来处理。</li>
</ul>
<p>对应的搜索分为两种。</p>
<ul>
<li><strong>对结构化数据的搜索</strong>：sql语句、windows搜索文件名、类型、修改时间等</li>
<li><strong>对非结构化数据的搜索</strong>：windwos搜索文件内容、linux的grep,搜索引擎的搜索等</li>
</ul>
<p>对非结构化数据搜索即对<strong>全文数据的搜索</strong>分为两种：</p>
<ul>
<li><strong>顺序扫描法</strong>：假设寻找某个字符串的文件，就是一个文档一个文档读，然后每个文档从头读到尾，Linux下的grep就是这种方式，小数据量可以使用，但对于大量数据，就很慢了。</li>
<li><strong>全文检索</strong>：将非结构化数据中的一部分信息提取出来，重新组织，使其变为结构化数据，我们称之为索引，而这种<strong>先建立索引，再搜索的过程就叫全文检索</strong>。</li>
</ul>
<p>对应的创建<strong>索引</strong>方式分三种。</p>
<blockquote>
<p>索引：加快数据搜索的一种数据结构</p>
</blockquote>
<ul>
<li><strong>I/O流</strong>：对于本地文件创建索引。</li>
<li><strong>爬虫</strong>：模拟访问URL，获取网页数据，搜索引擎使用。</li>
<li><strong>SQL搜索</strong>：对于存放在数据库的数据使用。</li>
</ul>
<h4 id="如何创建索引"><a href="#如何创建索引" class="headerlink" title="如何创建索引"></a>如何创建索引</h4><ol>
<li>源文档Document<ul>
<li>文档中包括一个一个域(Field)[file_name,file_path,file_size,file_content等]</li>
</ul>
</li>
<li>分词组件Tokenizer得到词元Token<ul>
<li>将源文档分词</li>
<li>去除标点</li>
<li>去除停词</li>
</ul>
</li>
<li>处理组件LinguisticProcessor得到词Term<ul>
<li>变为小写</li>
<li>缩减位词根</li>
<li>转变为词根 </li>
</ul>
</li>
<li>索引组件Indexer<ul>
<li>用词Term创建字典</li>
<li>对字典按字母顺序排序</li>
<li>合并相同的词Term成为倒排索引(Posting List)</li>
</ul>
</li>
</ol>
<p><img src="https://i.imgur.com/4HCyRk6.jpg" alt="倒排索引"></p>
<blockquote>
<p>倒排索引：从字符串到文件的映射是文件到字符串映射的反向过程，所以这种索引称为倒排索引</p>
</blockquote>
<h4 id="如何对索引进行搜索"><a href="#如何对索引进行搜索" class="headerlink" title="如何对索引进行搜索"></a>如何对索引进行搜索</h4><ol>
<li>用户输入查询语句</li>
<li>对查询语句进行分析处理</li>
<li>搜索索引，得到符合语法树的文档</li>
<li>根据得到的文档和查询语句的相关性排序</li>
</ol>
<h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><h4 id="Lucene实现全文检索"><a href="#Lucene实现全文检索" class="headerlink" title="Lucene实现全文检索"></a>Lucene实现全文检索</h4><ul>
<li>获得原始文档</li>
<li>创建文档对象</li>
<li>分析文档</li>
<li>创建索引</li>
<li>查询索引库</li>
</ul>
<h4 id="常用域Field"><a href="#常用域Field" class="headerlink" title="常用域Field"></a>常用域Field</h4><p><img src="https://i.imgur.com/oodzETd.png" alt="常用域"></p>
<h4 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="索引库的维护"><a href="#索引库的维护" class="headerlink" title="索引库的维护"></a>索引库的维护</h4><h5 id="索引库的添加"><a href="#索引库的添加" class="headerlink" title="索引库的添加"></a>索引库的添加</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//Document.add(Field)</div><div class="line">Document document = new Document();</div><div class="line">document.add(new TextField(&quot;name&quot;,&quot;文档&quot;.Store.YES));</div><div class="line">document.add(new TextFiled(&quot;content&quot;,&quot;内容&quot;,Store.YES));</div><div class="line"></div><div class="line">IndexWriter.addDocument(document);</div><div class="line">IndexWriter.close();</div></pre></td></tr></table></figure>
<h5 id="索引库的删除"><a href="#索引库的删除" class="headerlink" title="索引库的删除"></a>索引库的删除</h5><ul>
<li>删除全部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//删除全部索引</div><div class="line">indexWriter.deleteAll();</div><div class="line"></div><div class="line">indexWriter.close();</div></pre></td></tr></table></figure>
<ul>
<li>指定条件删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//Query</div><div class="line">Query query = new TermQuery(new Term(&quot;name&quot;,&quot;文档&quot;));</div><div class="line">//指定条件删除</div><div class="line">indexWriter.deleteDocuments(query);</div><div class="line"></div><div class="line">indexWriter.close();</div></pre></td></tr></table></figure>
<h5 id="索引库的修改"><a href="#索引库的修改" class="headerlink" title="索引库的修改"></a>索引库的修改</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//IndexWriter</div><div class="line">IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(Path)),new IndexWriterConfig(Version.LATEST,new IKAnalyzer()));</div><div class="line">//修改后的Document</div><div class="line">Document document = new Document();</div><div class="line">document.add(new TextField(&quot;name&quot;,&quot;新文档&quot;,Store.YES));</div><div class="line">//updateDocument</div><div class="line">indexWriter.updateDocument(new Term(&quot;content&quot;,&quot;文档&quot;),document);</div><div class="line"></div><div class="line">indexWriter.close();</div></pre></td></tr></table></figure>
<h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><h5 id="Query的子类查询"><a href="#Query的子类查询" class="headerlink" title="Query的子类查询"></a>Query的子类查询</h5><h6 id="TermQuery-精确查找"><a href="#TermQuery-精确查找" class="headerlink" title="TermQuery 精确查找"></a>TermQuery 精确查找</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//IndexSearcher</div><div class="line">IndexSearcher indexSearcher = new IndexSearcher(Directory.open(FSDirectory.open(new File(Path))));</div><div class="line"></div><div class="line">Query query = new TermQuery(new Term(FieldName,keyStr));</div><div class="line"></div><div class="line">TopDocs topDocs = indexSearcher.searcher(query,100);</div><div class="line">//topDocs.scoreDocs存储了document的id</div><div class="line">for(ScoreDoc scoreDoc : topDocs.scoreDocs)&#123;</div><div class="line">	//scoreDoc.doc就是document的id</div><div class="line">	Document document = indexSearcher.doc(scoreDoc.doc);</div><div class="line">	</div><div class="line">	document.get(keyStr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">indexSearcher.getindexReader.close();</div></pre></td></tr></table></figure>
<h6 id="MatchAllDocsQuery-所有文档"><a href="#MatchAllDocsQuery-所有文档" class="headerlink" title="MatchAllDocsQuery 所有文档"></a>MatchAllDocsQuery 所有文档</h6><h6 id="NumericRangeQuery-数值范围查找"><a href="#NumericRangeQuery-数值范围查找" class="headerlink" title="NumericRangeQuery 数值范围查找"></a>NumericRangeQuery 数值范围查找</h6><h6 id="BooleanQuery-组合条件查找"><a href="#BooleanQuery-组合条件查找" class="headerlink" title="BooleanQuery 组合条件查找"></a>BooleanQuery 组合条件查找</h6><h6 id="IndexSearcher搜索方法"><a href="#IndexSearcher搜索方法" class="headerlink" title="IndexSearcher搜索方法"></a>IndexSearcher搜索方法</h6><h5 id="queryparser-查询"><a href="#queryparser-查询" class="headerlink" title="queryparser 查询"></a>queryparser 查询</h5><h6 id="QueryParser"><a href="#QueryParser" class="headerlink" title="QueryParser"></a>QueryParser</h6><h6 id="MulitFieldQueryParser"><a href="#MulitFieldQueryParser" class="headerlink" title="MulitFieldQueryParser"></a>MulitFieldQueryParser</h6><p><img src="https://i.imgur.com/SBeqYbE.png" alt="IndexSearcher搜索方法"></p>
<h5 id="TopDocs"><a href="#TopDocs" class="headerlink" title="TopDocs"></a>TopDocs</h5><p><img src="https://i.imgur.com/GyG3UOS.png" alt="TopDocs类"></p>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Solr安装与介绍]]></title>
      <url>/2017/04/02/solr/</url>
      <content type="html"><![CDATA[<p>Solr是基于Lucene的全文搜索服务器</p>
<h2 id="Solr的安装和配置"><a href="#Solr的安装和配置" class="headerlink" title="Solr的安装和配置"></a>Solr的安装和配置</h2><h3 id="Solr配置到tomcat"><a href="#Solr配置到tomcat" class="headerlink" title="Solr配置到tomcat"></a>Solr配置到tomcat</h3><ol>
<li>把Solr的war包赋值到tomcat的webapp下并解压</li>
<li>把Solr/example/lib/ext目录下的jar包添加到solr工程中.</li>
<li>配置SolrHome和SolrCore<ul>
<li>Solr/example/solr文件就是一个标准SolrHome，复制出来命名solrHome</li>
<li>solrHome中的collection1就是一个SolrCore</li>
<li>solrCore下有一个目录conf，conf下的solrconfig.xml可以配置相关信息。</li>
</ul>
</li>
<li>solrconfig.xml<ol>
<li>env-entry-value:配置solrhome的绝对路径</li>
<li>Lib:solr服务依赖的拓展包</li>
<li>dataDir:配置索引库存放路径</li>
<li>requestHandler:查询时使用的url</li>
</ol>
</li>
</ol>
<p>打开Schema.xml可以看到Solr默认的FieldType</p>
<p><img src="https://i.imgur.com/bgR7edq.png" alt="FieldType"></p>
<ul>
<li>class:Solr提供的包solr.TextField，solr.TextField允许用户通过分析器来定制索引和查询，分析器包括一个分词器(tokenizer)和多个过滤器(filter)</li>
<li>positionIncrementGap:可选属性，定义在同一个文档中此类型数据的空白间隔，避免短语匹配错误，此值相当于Lucene的短语查询设置slop值，根据经验设置位100</li>
<li>analyzer<ul>
<li>搜索分析器<ul>
<li>solr.StandardTokenizerFactory 标准分词器</li>
<li>solr.StopFilterFactory 停用词过滤器</li>
<li>solr.LowerCaseFilterFactory 小写过滤器 </li>
</ul>
</li>
<li>索引分析器<ul>
<li>solr.StandardTokenizerFactory 标准分词器</li>
<li>solr.StopFilterFactory 停用词过滤器</li>
<li>solr.SynonymFilterFactory 同义词过滤器</li>
</ul>
</li>
</ul>
</li>
<li>Field 定义<ul>
<li>name 域名</li>
<li>type FieldType</li>
<li>indexed 是否索引</li>
<li>stored 是否存储</li>
<li>multiValued 是否存储多个值</li>
</ul>
</li>
<li>uniqueKey<br>  默认定义唯一主键key为id域<br>  <code>&lt;uniqueKey&gt;id&lt;/uniqueKey&gt;</code></li>
<li><p>copyField 复制域<br>  将多个Field复制到一个Field中，进行统一检索<br>  比如，输入关键字搜索name/description</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 定义name/description/keywords的Field --&gt;</div><div class="line">&lt;field name=&quot;keywords&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;true&quot;/&gt;</div><div class="line">&lt;field name=&quot;name&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</div><div class="line">&lt;field name=&quot;description&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; /&gt;</div><div class="line">&lt;!-- 只搜索keywords就相当于搜索了name和description</div><div class="line">&lt;copyField source=&quot;name&quot; dest=&quot;keywords&quot;&gt;</div><div class="line">&lt;copyField source=&quot;description&quot; dest=&quot;keywords&quot;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>dynamicField(动态字段)<br>自定义Field为:product_title_t<br><code>&lt;dynamicField name=&quot;*_t&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</code></p>
</li>
</ul>
<h3 id="配置中文分析器"><a href="#配置中文分析器" class="headerlink" title="配置中文分析器"></a>配置中文分析器</h3><ol>
<li>将IKAnalyzer2012FF_ul.jar添加到solr/WEB-INF/lib</li>
<li>赋值IKAnalyzer的配置文件和自定义词典到solr的classpath下</li>
<li><p>在schema.xml中添加一个自定义的filedType</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextFiled&quot;&gt;</div><div class="line">	&lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;</div><div class="line">&lt;/fieldType&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>定义field，指定field的type属性为text_ik</p>
</li>
</ol>
<h2 id="Solr管理索引库"><a href="#Solr管理索引库" class="headerlink" title="Solr管理索引库"></a>Solr管理索引库</h2><h3 id="维护索引"><a href="#维护索引" class="headerlink" title="维护索引"></a>维护索引</h3><ul>
<li><p>添加/更新文档</p>
</li>
<li><p>使用Dataimport批量导入数据</p>
<ul>
<li>导入solr-dataimporthandler.jar、solr-dataimporthandler-extras.jar、mysql数据库jar包</li>
<li><p>配置solrconfig.xml，添加一个requestHandler</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;requestHandler name=&quot;/dateimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;</div><div class="line">	&lt;lst name=&quot;defaults&quot;&gt;</div><div class="line">		&lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;</div><div class="line">	&lt;/lst&gt;</div><div class="line">&lt;/requestHandler&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个data-config.xml，保存到solrcore\conf\目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class="line">&lt;dataConfig&gt;</div><div class="line">&lt;dataSource type=&quot;JdbcDataSource&quot;</div><div class="line">			driver=&quot;com.mysql.jdbc.Driver</div><div class="line">			url=&quot;jdbc:mysql://localhost:3306/database&quot;</div><div class="line">			user=&quot;root&quot;</div><div class="line">			password=&quot;root&quot;/&gt;</div><div class="line">&lt;document&gt;</div><div class="line">	&lt;entity name=&quot;product&quot; query=&quot;SELECT pid,name,catalog_name,price,description,picture FROM products&quot;&gt;</div><div class="line">		&lt;field column=&quot;pid&quot; name=&quot;id&quot;/&gt;</div><div class="line">		&lt;field column=&quot;name&quot; name=&quot;product_name&quot;/&gt;</div><div class="line">		&lt;field column=&quot;catalog_name&quot; name=&quot;product_catalog_name&quot;/&gt;</div><div class="line">		&lt;field column=&quot;description&quot; name=&quot;product_price&quot;/&gt;</div><div class="line">		&lt;field column=&quot;picture&quot; name=&quot;product_picture&quot;/&gt;</div><div class="line">	&lt;/entity&gt;</div><div class="line">&lt;/document&gt;</div><div class="line">&lt;/dataConfig&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重启tomcat</p>
</li>
<li>Excute导入数据</li>
</ul>
</li>
</ul>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><pre><code>- 删除指定ID的索引
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;delete&gt;</div><div class="line">	&lt;id&gt;1&lt;/id&gt;</div><div class="line">&lt;/delete&gt;</div></pre></td></tr></table></figure>

- 删除查询到的索引数据&lt;*:*表示全部&gt;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;delete&gt;</div><div class="line">	&lt;query&gt;*:*&lt;/query&gt;</div><div class="line">&lt;/delete&gt;</div></pre></td></tr></table></figure>
</code></pre><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><ul>
<li>q- 查询字符串 域名:条件</li>
<li>fq- filter query 过滤查询</li>
<li>sort- 排序</li>
<li>start,rows- 分页查询</li>
<li>fl- 返回指定字段内容，用逗号或空格分割</li>
<li>df- default Feild 默认域</li>
<li>wt- writer type 指定输出格式</li>
<li>hl- 是否高亮</li>
</ul>
<h2 id="使用SolrJ管理索引库"><a href="#使用SolrJ管理索引库" class="headerlink" title="使用SolrJ管理索引库"></a>使用SolrJ管理索引库</h2><pre><code>使用客户端操作Solr比较繁琐低效，于是有SolrJ通过JAVA来访问Solr客户端
</code></pre><h3 id="添加-更新文档"><a href="#添加-更新文档" class="headerlink" title="添加/更新文档"></a>添加/更新文档</h3><ul>
<li>solrJ、slf4j-log4j12、jul-to-slf4j、jcl-over-slf4j<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SolrServer solerServer = new HttpSolrServer(&quot;https://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">SolrInputDocument document = new SolrInputDocument();</div><div class="line"></div><div class="line">//这里FieldName在schema.xml已定义</div><div class="line">//当id已存在，相当于更新</div><div class="line">document.addField(FieldName,Value);</div><div class="line"></div><div class="line">solrServer.add(document);</div><div class="line"></div><div class="line">solrServer.commit();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SolrServer solrServer = new HttpSolrServer(&quot;http://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">//根据条件删除</div><div class="line">solrServer.deleteByQuery(&quot;*:*&quot;);</div><div class="line"></div><div class="line">solrServer.deleteById(id);</div><div class="line"></div><div class="line">solrServer.commit();</div></pre></td></tr></table></figure>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SolrServer solrServer = new HttpSolrServer(&quot;https://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">SolrQuery query = new SolrQuery();</div><div class="line"></div><div class="line">query.setQuery(&quot;*:*&quot;);</div><div class="line"></div><div class="line">QueryResponse queryResponse = solrQuery.query(query);</div><div class="line"></div><div class="line">SolrDocumentList solrDocumentList = queryResponse.getResults();</div><div class="line"></div><div class="line">//查询到的数量</div><div class="line">solrDocumentList.getNumFound();</div><div class="line">//遍历查询结果</div><div class="line">for(SolrDocument solrDocument : solrDocumentList) &#123;</div><div class="line">	solrDocument.get(fieldName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">SolrServer solrServer = new HttpSolrServer(&quot;http://localhost:8080/solr&quot;);</div><div class="line"></div><div class="line">SolrQuery query = new SolrQuery();</div><div class="line">//查询条件</div><div class="line">query.setQuery(KeyStr);</div><div class="line">//过滤条件</div><div class="line">query.setFilterQueries();</div><div class="line">//排序条件</div><div class="line">query.setSort(FieldNmae,ORDER.asc);</div><div class="line">//分页处理</div><div class="line">query.setStart(num);</div><div class="line">query.setRows(num);</div><div class="line">//结果中域的列表</div><div class="line">query.setFields(FiledNames);</div><div class="line">//默认搜索域</div><div class="line">query.set(FieldName);</div><div class="line">//高亮显示</div><div class="line">query.setHighlightField(true);</div><div class="line">//高亮显示前缀</div><div class="line">query.setHighlightSimplePre();</div><div class="line">//高亮显示后缀</div><div class="line">query.setHighlightSimplePost();</div><div class="line"></div><div class="line">//执行查询</div><div class="line">QueryResponse queryResponse = solrServer.query(query);</div><div class="line"></div><div class="line">//取查询结果</div><div class="line">SolrDocumentList solrDocumentList = queryResponse.getResults();</div><div class="line"></div><div class="line">//遍历查询结果</div><div class="line">for(SolrDocument solrDocument:solrDocumentList)&#123;</div><div class="line">	//取高亮显示</div><div class="line">	String productName=&quot;&quot;;</div><div class="line">	Map&lt;String,Map&lt;String,List&lt;String&gt;&gt;&gt; highlighting = queryResponse.getHighlighting();</div><div class="line">	List&lt;String&gt; list = highlighting.get(solrDocument.get(&quot;id&quot;)).get(product_name);</div><div class="line">	//判断是否有高亮内容</div><div class="line">	if(list!=null)&#123;</div><div class="line">		productName=list.get(0);</div><div class="line">	&#125;else&#123;</div><div class="line">		productName=(String)solrDocument.get(&quot;product_name&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Dubbo]]></title>
      <url>/2016/11/09/Dubbo/</url>
      <content type="html"><![CDATA[<p>Dubbo是阿里的开源分布式服务架构，可通过高性能的RPC实现服务的输出和输入功能。</p>
<h2 id="系统通信"><a href="#系统通信" class="headerlink" title="系统通信"></a>系统通信</h2><h3 id="如何实现远程通信"><a href="#如何实现远程通信" class="headerlink" title="如何实现远程通信"></a>如何实现远程通信</h3><ol>
<li>WebService：效率不高基于soap协议。</li>
<li>使用Restful形式的服务：http+json。很多项目中应用。如果服务太多，服务之间调用关系混乱，需要治疗服务。</li>
<li>dubbo。使用rpc协议进行远程调用，直接使用socket通信。传输效率高，并且可以统计出系统之间的调用关系、调用次数。</li>
</ol>
<h3 id="规模架构"><a href="#规模架构" class="headerlink" title="规模架构"></a>规模架构</h3><p><img src="https://i.imgur.com/TJOp8sQ.jpg" alt=""></p>
<ul>
<li>单一应用架构<ul>
<li>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。</li>
<li>此时，用于简化增删改差工作量的<strong>数据访问框架(ORM)</strong>是关键。</li>
</ul>
</li>
<li>垂直应用架构<ul>
<li>当访问量逐渐增大，单一应用增加极其带来的加速度越来越小，将应用拆成无不想干的几个应用，以提升效率</li>
<li>此时，用于加速前端页面开发的<strong>Web框架(MVC)</strong>是关键</li>
</ul>
</li>
<li>分布式服务架构<ul>
<li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。</li>
<li>此时，用于提高业务服用及整合的分布式<strong>服务架构(RPC)</strong>是关键。</li>
</ul>
</li>
<li>流动计算架构<ul>
<li>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。</li>
<li>此时，用于提高极其利用率的**资源调度和治理中心(SOA)是关键。</li>
</ul>
</li>
</ul>
<h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p><img src="https://i.imgur.com/B8sAVoY.jpg" alt=""></p>
<h3 id="节点角色说明："><a href="#节点角色说明：" class="headerlink" title="节点角色说明："></a>节点角色说明：</h3><ul>
<li>Provider:暴露服务的<strong>服务提供方</strong></li>
<li>Consumer:调用远程服务的<strong>服务消费方</strong></li>
<li>Registry:服务注册与发现的<strong>注册中心</strong></li>
<li>Monitor:统计服务的调用次数调和调用时间的<strong>监控中心</strong></li>
<li>Container:<strong>服务运行容器</strong></li>
</ul>
<h3 id="调用关系说明："><a href="#调用关系说明：" class="headerlink" title="调用关系说明："></a>调用关系说明：</h3><ul>
<li>0.<strong>服务容器(Container)</strong>负责启动、加载、运行<strong>服务提供方(Provider)</strong></li>
<li>1.<strong>服务提供方(Provider)</strong>在启动时，向<strong>注册中心(Registry)</strong>注册自己提供的服务。</li>
<li>2.<strong>服务消费方(Consumer)</strong>在启动时，向<strong>注册中心(Registry)</strong>订阅自己所需的服务。</li>
<li>3.<strong>注册中心(Registry)</strong>返回<strong>服务提供方(Provider)</strong>地址列表给消费者，如果有变化，注册中心将基于长连接推送变更数据给<strong>消费方(Consumer)</strong>.</li>
<li>４。<strong>服务消费方(Consumer)</strong>，从提供者地址列表中，基于软负载均衡算法，选一台<strong>提供方(Provider)</strong>进行调用，如果调用失败，再选另一台调用.</li>
<li>5.<strong>服务消费者(Consumer)和提供方(Provider)</strong>，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到<strong>监控中心(Monitor)</strong><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3></li>
</ul>
<h4 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h4><p>Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，Dubbo基于Spring的Schema拓展进行加载。</p>
<ul>
<li>单一工程中spring的配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;xxxService&quot; class=&quot;com.xxxServiceImpl&quot; /&gt;</div><div class="line">&lt;bean id=&quot;xxxAction&quot; class=&quot;com.xxx.xxxAction&quot;&gt;</div><div class="line">	&lt;property name=&quot;xxxService&quot; ref=&quot;xxxService&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<ul>
<li>远程服务</li>
</ul>
<p>将上述local.xml配置拆分成两份，将服务定义部分放在服务提供方remote-provier.xml,将服务引用部分放在服务消费方remote-consumer.xml<br>并在provider增加暴露服务配置<code>&lt;dubbo:service&gt;</code>,在consumer增加引用服务配置<code>&lt;dubbo:reference&gt;</code></p>
<p>发布服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 和本地服务一样实现远程服务 --&gt;</div><div class="line">&lt;bean id = &quot;xxxService&quot; class = &quot;com.xxx.xxxServiceImpl&quot;/&gt;</div><div class="line">&lt;!-- 增加暴露远程服务配置 --&gt;</div><div class="line">&lt;dubbo:service interface=&quot;com.xxx.xxxService&quot; ref=&quot;xxxService&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>调用服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 增加引用远程服务配置 --&gt;</div><div class="line">&lt;dubbo:reference id =&quot;xxxService&quot; interface=&quot;com.xxx.xxxService&quot;/&gt;</div><div class="line">&lt;!-- 和本地服务一样使用远程服务&gt;</div><div class="line">&lt;bean id =&quot;xxxAction&quot; class=&quot;com.xxx.xxxAction&quot;&gt;</div><div class="line">	&lt;property name=&quot;xxxService&quot; ref=&quot;xxxService&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h4 id="注册中心-Registry"><a href="#注册中心-Registry" class="headerlink" title="注册中心(Registry)"></a>注册中心(Registry)</h4><p>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力娇小，使用dubbo2.3.3以上版本，建议使用zookeeper注册中心<br>zookeeper是Apache Hadoop的紫霞公募，是一个属性的目录服务，支持变更推送，适合作为Dubbo服务的注册中心</p>
<h5 id="Zookeeper-安装"><a href="#Zookeeper-安装" class="headerlink" title="Zookeeper 安装"></a>Zookeeper 安装</h5><ul>
<li>安装jdk</li>
<li>上传并解压zookeeper</li>
<li>将conf文件夹下的zoo-sample.cfg复制一份，改名位zoo.cfg</li>
<li>修改zoo.cfg的dataDir属性，指定zookeeper的真实目录</li>
<li>修改zoo.cfg的clientport属性，指定该服务器的zookeeper端口</li>
<li>启动zookeeper:zookeeper/bin/zkServer.sh start</li>
<li>关闭zookeeper:zookeeper/bin/zkServer.sh stop</li>
<li>查看zookeeper:zookeeper/bin/zkServer.sh status</li>
</ul>
<h2 id="框架整合"><a href="#框架整合" class="headerlink" title="框架整合"></a>框架整合</h2><h2 id="Dubbo监控中心"><a href="#Dubbo监控中心" class="headerlink" title="Dubbo监控中心"></a>Dubbo监控中心</h2>]]></content>
      
        <categories>
            
            <category> 分享集 </category>
            
        </categories>
        
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h2><p><strong>Misaniy</strong> </p>
<p>这个名字是因为她的名字是YUANSIYI，我从中抠了几个字符串，加上我的想念组合的。</p>
<p>上可陪领导逛街拎包吃喝玩乐，下可宅在家里追新番，热衷于研究新菜品和更优雅的代码，也没有忘记工作之余锻炼身体给自己未来投资，有一个非常有眼光的女朋友（这绝不是在夸我），也在努力成为一个优雅的<del>hentai</del>绅士。</p>
<p>热爱生活，热爱科技，爱小米，更爱小米的智能家居体系，有朝一日，我要让家里充满智能，充满<strong>GEEK</strong>的味道。</p>
<h2 id="这是哪里"><a href="#这是哪里" class="headerlink" title="这是哪里"></a>这是哪里</h2><p><strong>misaniy.cc</strong><br>这是我的博客小站，也是我的黄金屋。在我的代码之夜上，地上有数不清的咯脚的石子，我摸索着前行，背后总有一个人意味深长地让我带上他们。如果你听过这个故事，你也会像我一样，写这样一个博客，把一路的石子捡起来。</p>
<p>我会不时更新我的博客，在我代码上遇到问题，或者我觉得需要记录的时候</p>
<h2 id="怎么联系我"><a href="#怎么联系我" class="headerlink" title="怎么联系我"></a>怎么联系我</h2><p><strong>Github</strong>:<a href="http://github.com/misaniy" title="Github" target="_blank" rel="external">Misaniy</a><br><strong>Email</strong>:<a href="mailto:misaniy@hotmail.com" title="Email" target="_blank" rel="external">Misaniy</a><br><strong>Weibo</strong>:<a href="http://weibo.com/u/2879514745" title="Weobo" target="_blank" rel="external">为这美好的世界献上祝福</a><br><strong>Location</strong>：中国.重庆</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[生活图]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
